name: CI

on:
  pull_request:
    branches:
      - master

  workflow_dispatch:

# for cancelling redundant runs
concurrency:
  group: ci-${{ github.head_ref }}
  cancel-in-progress: true


permissions:
  contents: read

jobs:
  changed-files:
    runs-on: ubuntu-latest
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-defining-outputs-for-a-job
    outputs:
      files: ${{ steps.get_files.outputs.changed_files }}
    steps:
      - uses: actions/checkout@v4

      - id: get_files
        run: |
          echo "changed_files=$(python3 .github/get_files_changed_in_pr.py)" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}

  ubuntu:
    runs-on: ubuntu-latest
    needs: changed-files
    strategy:
      fail-fast: false
      matrix:
        build-type: [Custom, FullDebug]
        compiler: [gcc, clang]
    env:
      KRATOS_BUILD_TYPE: ${{ matrix.build-type }}
      KRATOS_CI_CHANGED_FILES: ${{needs.changed-files.outputs.files}}
      KRATOS_CI_APPLICATIONS: ".github/workflows/ci_apps_linux.json"
      KRATOS_CI_CORES: 4                              # Current limits are 4 CPU and 16 GB Ram
      OMPI_MCA_rmaps_base_oversubscribe: 1            # Allow oversubscription for MPI (needed for OpenMPI >= 3.0)
      OMPI_MCA_btl_vader_single_copy_mechanism: none  # Suppressing some annoying OpenMPI messages

    container:
      image: kratosmultiphysics/kratos-image-ci-ubuntu-22-04:latest
      options: --user 1001

    steps:
    - uses: actions/checkout@v4

    # - name: Installing dependencies
    # => must be added to the docker container to avoid reinstalling it in every CI run

    - name: CI configuration
      shell: bash
      run: |
        python3 kratos/python_scripts/testing/ci_utilities.py
        python3 -m pip install --upgrade numpy==1.26.4

    - name: Build
      shell: bash
      run: |
        if [ ${{ matrix.compiler }} = gcc ]; then
          export CC=/usr/bin/gcc-12
          export CXX=/usr/bin/g++-12
          export KRATOS_CMAKE_OPTIONS_FLAGS="-DUSE_EIGEN_MKL=ON -DUSE_EIGEN_FEAST=ON -DTRILINOS_EXCLUDE_AMESOS2_SOLVER=OFF"
          export KRATOS_CMAKE_CXX_FLAGS="-Werror -Wno-deprecated-declarations -Wignored-qualifiers"
        elif [ ${{ matrix.compiler }} = clang ]; then
          export CC=/usr/bin/clang-14
          export CXX=/usr/bin/clang++-14
          export KRATOS_CMAKE_CXX_FLAGS="-Werror -Wno-deprecated-declarations"
          export KRATOS_CMAKE_OPTIONS_FLAGS="-DTRILINOS_EXCLUDE_AMESOS2_SOLVER=OFF"
        else
          echo 'Unsupported compiler: ${{ matrix.compiler }}'
          exit 1
        fi
        source /opt/intel/oneapi/setvars.sh
        cp .github/workflows/configure_core.sh configure.sh
        python3 kratos/python_scripts/testing/ci_utilities.py
        bash configure.sh
        rm -r ${GITHUB_WORKSPACE}/build

    - name: Build Core Apps
      shell: bash
      run: |
        if [ ${{ matrix.compiler }} = gcc ]; then
          export CC=/usr/bin/gcc-12
          export CXX=/usr/bin/g++-12
          export KRATOS_CMAKE_OPTIONS_FLAGS=""
          export KRATOS_CMAKE_CXX_FLAGS="-Werror -Wno-deprecated-declarations -Wignored-qualifiers"
        elif [ ${{ matrix.compiler }} = clang ]; then
          export CC=/usr/bin/clang-14
          export CXX=/usr/bin/clang++-14
          export KRATOS_CMAKE_CXX_FLAGS="-Werror -Wno-deprecated-declarations"
          export KRATOS_CMAKE_OPTIONS_FLAGS=""
        else
          echo 'Unsupported compiler: ${{ matrix.compiler }}'
          exit 1
        fi
        source /opt/intel/oneapi/setvars.sh
        cp .github/workflows/configure_core_applications.sh configure.sh
        bash configure.sh
        rm -r ${GITHUB_WORKSPACE}/build

    - name: Running C++ tests
      shell: bash
      run: |
        if [ ${{ matrix.compiler }} = gcc ]; then
          source /opt/intel/oneapi/setvars.sh
        fi
        export PYTHONPATH=${PYTHONPATH}:${GITHUB_WORKSPACE}/bin/${{ matrix.build-type }}
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${GITHUB_WORKSPACE}/bin/${{ matrix.build-type }}/libs
        python3 kratos/python_scripts/testing/run_cpp_tests.py

    - name: Running python tests
      shell: bash
      run: |
        if [ ${{ matrix.compiler }} = gcc ]; then
          source /opt/intel/oneapi/setvars.sh
        fi
        export PYTHONPATH=${PYTHONPATH}:${GITHUB_WORKSPACE}/bin/${{ matrix.build-type }}
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${GITHUB_WORKSPACE}/bin/${{ matrix.build-type }}/libs
        python3 kratos/python_scripts/testing/run_python_tests.py -v 2 -l nightly -c python3

    - name: Prepare Parallel Env
      shell: bash
      run: |
        echo "localhost slots=2" >> ${GITHUB_WORKSPACE}/ci_hostfile

    - name: Running MPI C++ tests (2 Cores)
      shell: bash
      timeout-minutes : 10
      run: |
        if [ ${{ matrix.compiler }} = gcc ]; then
          source /opt/intel/oneapi/setvars.sh
        fi
        export PYTHONPATH=${PYTHONPATH}:${GITHUB_WORKSPACE}/bin/${{ matrix.build-type }}
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${GITHUB_WORKSPACE}/bin/${{ matrix.build-type }}/libs
        python3 kratos/python_scripts/testing/run_cpp_mpi_tests.py --mpi_flags "--hostfile ${GITHUB_WORKSPACE}/ci_hostfile" -n 2

    - name: Running MPI C++ tests (3 Cores)
      shell: bash
      timeout-minutes : 10
      run: |
        if [ ${{ matrix.compiler }} = gcc ]; then
          source /opt/intel/oneapi/setvars.sh
        fi
        export PYTHONPATH=${PYTHONPATH}:${GITHUB_WORKSPACE}/bin/${{ matrix.build-type }}
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${GITHUB_WORKSPACE}/bin/${{ matrix.build-type }}/libs
        python3 kratos/python_scripts/testing/run_cpp_mpi_tests.py --mpi_flags "--hostfile ${GITHUB_WORKSPACE}/ci_hostfile" -n 3

    - name: Running MPI C++ tests (4 Cores)
      shell: bash
      timeout-minutes : 10
      run: |
        if [ ${{ matrix.compiler }} = gcc ]; then
          source /opt/intel/oneapi/setvars.sh
        fi
        export PYTHONPATH=${PYTHONPATH}:${GITHUB_WORKSPACE}/bin/${{ matrix.build-type }}
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${GITHUB_WORKSPACE}/bin/${{ matrix.build-type }}/libs
        python3 kratos/python_scripts/testing/run_cpp_mpi_tests.py --mpi_flags "--hostfile ${GITHUB_WORKSPACE}/ci_hostfile" -n 4

   

  windows:
    runs-on: windows-2022
    needs: changed-files
    env:
      KRATOS_BUILD_TYPE: Custom
      KRATOS_CI_CHANGED_FILES: ${{needs.changed-files.outputs.files}}
      KRATOS_CI_APPLICATIONS: ".github/workflows/ci_apps_windows.json"

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: CI configuration
      shell: bash
      run: python3 kratos/python_scripts/testing/ci_utilities.py

    - name: Download boost
      run: |
        $url = "https://archives.boost.io/release/1.87.0/source/boost_1_87_0.tar.gz"
        (New-Object System.Net.WebClient).DownloadFile($url, "$env:TEMP\boost.tar.gz")
        7z.exe x "$env:TEMP\boost.tar.gz" -o"$env:TEMP\boostArchive" -y | Out-Null
        7z.exe x "$env:TEMP\boostArchive" -o"$env:TEMP\boost" -y | Out-Null

    - name: Installing dependencies
      shell: cmd
      run: |
        pip install numpy
        pip install sympy
        pip install scipy
        pip install h5py
        pip install parameterized

    - name: Build
      shell: cmd
      run: |
        copy .\.github\workflows\configure.cmd
        python kratos/python_scripts/testing/ci_utilities.py
        configure.cmd

    - name: Running C++ tests
      shell: cmd
      run: |
        set PYTHONPATH=%PYTHONPATH%;%GITHUB_WORKSPACE%/bin/%KRATOS_BUILD_TYPE%
        set PATH=%PATH%;%GITHUB_WORKSPACE%/bin/%KRATOS_BUILD_TYPE%/libs
        python kratos/python_scripts/testing/run_cpp_tests.py

    - name: Running python tests
      shell: cmd
      run: |
        set PYTHONPATH=%PYTHONPATH%;%GITHUB_WORKSPACE%/bin/%KRATOS_BUILD_TYPE%
        set PATH=%PATH%;%GITHUB_WORKSPACE%/bin/%KRATOS_BUILD_TYPE%/libs
        python kratos/python_scripts/testing/run_python_tests.py -l nightly -c python


  

