import KratosMultiphysics
import math


class _ElementData:
    "Struct containing data mimicking CompressibleNavierStokesExplicit::ElementDataStruct."
    def __init__(self, dim, num_nodes):
        block_size = dim + 2

        self.U = self._ZeroMatrix(block_size, num_nodes)
        self.dUdt = self._ZeroMatrix(block_size, num_nodes)

        self.m_ext = self._ZeroVector(num_nodes)
        self.r_ext = self._ZeroVector(num_nodes)
        self.f_ext = self._ZeroMatrix(num_nodes, dim)

        self.alpha_sc_nodes = self._ZeroVector(num_nodes)
        self.beta_sc_nodes = self._ZeroVector(num_nodes)
        self.lamb_sc_nodes = self._ZeroVector(num_nodes)
        self.mu_sc_nodes = self._ZeroVector(num_nodes)
        self.alpha = 0.0
        self.beta = 0.0
        self.lambda_ = 0.0
        self.mu = 0.0
        self.h = 0.0
        self.gamma = 0.0
        self.c_v = 0.0
        self.ResProj = self._ZeroMatrix(num_nodes, block_size)

    @classmethod
    def _ZeroMatrix(cls, rows, cols):
        m = KratosMultiphysics.Matrix(rows, cols)
        for r in range(rows):
            for c in range(cols):
                m[r,c] = 0.0
        return m

    @classmethod
    def _ZeroVector(cls, rows):
        v = KratosMultiphysics.Vector(rows)
        for r in range(rows):
            v[r] = 0.0
        return v

class SubTestSuite:
    num_nodes = 3
    dim = 2
    block_size = dim + 2

    @classmethod
    def __ShapeFunctions(cls, x, y):
        N = KratosMultiphysics.Vector(cls.num_nodes)
        N[0] = -(x+y)/2
        N[1] = (1+x)/2
        N[2] = (1+y)/2

        DN_DX = KratosMultiphysics.Matrix(cls.num_nodes, cls.block_size)
        DN_DX[0,0] = -0.5
        DN_DX[0,1] = -0.5
        DN_DX[1,0] =  0.5
        DN_DX[1,1] =  0
        DN_DX[2,0] =  0
        DN_DX[2,1] =  0.5

        return N, DN_DX

    @classmethod
    def __FillVector(cls, rows, value):
        v = KratosMultiphysics.Vector(rows)
        for r in range(rows):
            v[r] = value
        return v

    def __init__(self):
        self.N, self.DN_DX = self.__ShapeFunctions(0, 0)

        # Filling data
        rho_0 = 1.16927
        rho_1 = 1.46426

        mom = 467.707

        et_0 = 346854
        et_1 = 422234

        self.data = _ElementData(self.dim, self.num_nodes)

        self.data.U[0, 0] = rho_0
        self.data.U[1, 0] = rho_1
        self.data.U[2, 0] = rho_1

        self.data.U[0, 1] = mom
        self.data.U[1, 1] = mom
        self.data.U[2, 1] = mom

        self.data.U[0, 3] = et_0
        self.data.U[1, 3] = et_1
        self.data.U[2, 3] = et_1

        self.data.alpha_sc_nodes = self.__FillVector(self.num_nodes, 1.5e-4)
        self.data.beta_sc_nodes = self.__FillVector(self.num_nodes, 2.8e-5)
        self.data.lamb_sc_nodes = self.__FillVector(self.num_nodes, 1.3e-7)
        self.data.mu_sc_nodes = self.__FillVector(self.num_nodes, 2.3e-6)

        self.data.alpha = 0
        self.data.beta = 1.13e-4
        self.data.lambda_ = 6.84e-6
        self.data.mu = 1.26e-4

        self.data.gamma = 1.4
        self.data.c_v = 722.14
        self.data.h = 2.0

    def test_substitute_rho_proj_2D(self):
        N = self.N
        DN_DX = self.DN_DX
        data = self.data

        rho_proj = KratosMultiphysics.Vector(self.num_nodes)

        #substitute_rho_proj_2D:
        //substitute_rho_proj_2D

        expected = KratosMultiphysics.Vector(self.num_nodes)
        expected[0] = 0
        expected[1] = 0
        expected[2] = 0

        return (rho_proj, expected)


    def test_substitute_mom_proj_2D(self):
        N = self.N
        DN_DX = self.DN_DX
        data = self.data

        mom_proj = KratosMultiphysics.Vector(self.dim * self.num_nodes)

        #substitute_mom_proj_2D:
        //substitute_mom_proj_2D

        expected = KratosMultiphysics.Vector(self.dim * self.num_nodes)
        expected[0] = -15074.669035298386007
        expected[1] = -15076.405054351418585
        expected[2] = -15075.42578645597132
        expected[3] = -15076.174751211932744
        expected[4] = -15075.460788465843507
        expected[5] = -15076.164099001256545

        return (mom_proj, expected)

    def test_substitute_tot_ener_proj_2D(self):
        N = self.N
        DN_DX = self.DN_DX
        data = self.data

        tot_ener_proj = KratosMultiphysics.Vector(self.num_nodes)

        #substitute_tot_ener_proj_2D:
        //substitute_tot_ener_proj_2D

        expected = KratosMultiphysics.Vector(self.num_nodes)
        expected[0] = 1712.3910912142378038
        expected[1] = 738.00562019298854466
        expected[2] = 688.89753394371905415

        return (tot_ener_proj, expected)


    def test_substitute_rhs_2D_OSS(self):
        N = self.N
        DN_DX = self.DN_DX
        data = self.data

        rRightHandSideBoundedVector = KratosMultiphysics.Vector(self.block_size*self.num_nodes)

        stab_c1 = 12
        stab_c2 = 2
        stab_c3 = 1

        #substitute_rhs_2D_OSS:
        //substitute_rhs_2D_OSS

        expected = KratosMultiphysics.Vector(self.block_size*self.num_nodes)
        expected[0] = 47264.288734433073842
        expected[1] = -15379.402979698103081
        expected[2] = -15576.430423595746106
        expected[3] = 213563.16351141795167
        expected[4] = -23635.684471189790202
        expected[5] = -14538.279451626927766
        expected[6] = -15112.339370110219534
        expected[7] = -3990.3328559225551544
        expected[8] = -23628.60426324328364
        expected[9] = -15064.189988995642125
        expected[10] = -14495.58857930533668
        expected[11] = -7262.2965689810916956

        return (rRightHandSideBoundedVector, expected)

    def test_substitute_rhs_2D_ASGS(self):
        N = self.N
        DN_DX = self.DN_DX
        data = self.data

        rRightHandSideBoundedVector = KratosMultiphysics.Vector(self.block_size*self.num_nodes)

        stab_c1 = 12
        stab_c2 = 2
        stab_c3 = 1

        #substitute_rhs_2D_ASGS:
        //substitute_rhs_2D_ASGS

        expected = KratosMultiphysics.Vector(self.block_size*self.num_nodes)
        expected[0] = 47264.288734433073842
        expected[1] = -15379.402979698103081
        expected[2] = -15576.430423595746106
        expected[3] = 213563.16351141795167
        expected[4] = -23635.684471189790202
        expected[5] = -14538.279451626927766
        expected[6] = -15112.339370110219534
        expected[7] = -3990.3328559225551544
        expected[8] = -23628.60426324328364
        expected[9] = -15064.189988995643944
        expected[10] = -14495.58857930533668
        expected[11] = -7262.2965689810916956

        return (rRightHandSideBoundedVector, expected)
