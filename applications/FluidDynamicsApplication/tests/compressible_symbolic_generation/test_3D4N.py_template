import KratosMultiphysics
import math


class _ElementData:
    "Struct containing data mimicking CompressibleNavierStokesExplicit::ElementDataStruct."
    def __init__(self, dim, num_nodes):
        block_size = dim + 2

        self.U = self._ZeroMatrix(block_size, num_nodes)
        self.dUdt = self._ZeroMatrix(block_size, num_nodes)

        self.m_ext = self._ZeroVector(num_nodes)
        self.r_ext = self._ZeroVector(num_nodes)
        self.f_ext = self._ZeroMatrix(num_nodes, dim)

        self.alpha_sc_nodes = self._ZeroVector(num_nodes)
        self.beta_sc_nodes = self._ZeroVector(num_nodes)
        self.lamb_sc_nodes = self._ZeroVector(num_nodes)
        self.mu_sc_nodes = self._ZeroVector(num_nodes)
        self.alpha = 0.0
        self.beta = 0.0
        self.lambda_ = 0.0
        self.mu = 0.0
        self.h = 0.0
        self.gamma = 0.0
        self.c_v = 0.0
        self.ResProj = self._ZeroMatrix(num_nodes, block_size)

    @classmethod
    def _ZeroMatrix(cls, rows, cols):
        m = KratosMultiphysics.Matrix(rows, cols)
        for r in range(rows):
            for c in range(cols):
                m[r,c] = 0.0
        return m

    @classmethod
    def _ZeroVector(cls, rows):
        v = KratosMultiphysics.Vector(rows)
        for r in range(rows):
            v[r] = 0.0
        return v

class SubTestSuite:
    num_nodes = 4
    dim = 3
    block_size = dim + 2

    @classmethod
    def __ShapeFunctions(cls, x, y, z):
        N = KratosMultiphysics.Vector(cls.num_nodes)
        N[0] = -(1+x+y+z)/3
        N[1] = (1+x)/2
        N[2] = (1+y)/2
        N[3] = (1+z)/2

        DN_DX = KratosMultiphysics.Matrix(cls.num_nodes, cls.block_size)
        DN_DX[0,0] = -1/3.0
        DN_DX[0,1] = -1/3.0
        DN_DX[0,2] = -1/3.0
        DN_DX[1,0] =  0.5
        DN_DX[1,1] =  0
        DN_DX[1,2] = 0
        DN_DX[2,0] =  0
        DN_DX[2,1] =  0.5
        DN_DX[2,2] = 0
        DN_DX[3,0] =  0
        DN_DX[3,1] =  0
        DN_DX[3,2] = 0.5

        return N, DN_DX

    @classmethod
    def __FillVector(cls, rows, value):
        v = KratosMultiphysics.Vector(rows)
        for r in range(rows):
            v[r] = value
        return v

    def __init__(self):
        self.N, self.DN_DX = self.__ShapeFunctions(0, 0, 0)

        # Filling data
        rho_0 = 1.16927
        rho_1 = 1.46426

        mom = 467.707

        et_0 = 346854
        et_1 = 422234

        self.data = _ElementData(self.dim, self.num_nodes)

        self.data.U[0,0] = rho_0
        self.data.U[1,0] = rho_1
        self.data.U[2,0] = rho_0
        self.data.U[3,0] = rho_0

        self.data.U[0,1] = mom
        self.data.U[1,1] = mom
        self.data.U[2,1] = mom
        self.data.U[3,1] = mom

        self.data.U[0,4] = et_0
        self.data.U[1,4] = et_1
        self.data.U[2,4] = et_0
        self.data.U[3,4] = et_0

        self.data.alpha_sc_nodes = self.__FillVector(self.num_nodes, 1.5e-4)
        self.data.beta_sc_nodes = self.__FillVector(self.num_nodes, 2.8e-5)
        self.data.lamb_sc_nodes = self.__FillVector(self.num_nodes, 1.3e-7)
        self.data.mu_sc_nodes = self.__FillVector(self.num_nodes, 2.3e-6)

        self.data.alpha = 0
        self.data.beta = 1.13e-4
        self.data.lambda_ = 6.84e-6
        self.data.mu = 1.26e-4

        self.data.gamma = 1.4
        self.data.c_v = 722.14
        self.data.h = 2.0

    def test_substitute_rho_proj_3D(self):
        N = self.N
        DN_DX = self.DN_DX
        data = self.data

        rho_proj = KratosMultiphysics.Vector(self.num_nodes)

        #substitute_rho_proj_3D:
        //substitute_rho_proj_3D

        expected = KratosMultiphysics.Vector(self.num_nodes)
        expected[0] = -77.951166666666665606
        expected[1] = -77.951166666666665606
        expected[2] = -77.951166666666665606
        expected[3] = -77.951166666666665606

        return (rho_proj, expected)


    def test_substitute_mom_proj_3D(self):
        N = self.N
        DN_DX = self.DN_DX
        data = self.data

        mom_proj = KratosMultiphysics.Vector(self.dim * self.num_nodes)

        #substitute_mom_proj_3D:
        //substitute_mom_proj_3D

        expected = KratosMultiphysics.Vector(self.dim * self.num_nodes)
        expected[0]  = -38199.026727399781521
        expected[1]  = -23123.790603943834867
        expected[2]  = -23123.743318150052801
        expected[3]  = -38199.370733959018253
        expected[4]  = -23123.681303369005036
        expected[5]  = -23123.657316510238161
        expected[6]  = -38199.3889541139215
        expected[7]  = -23123.67530814285783
        expected[8]  = -23123.652761471519625
        expected[9]  = -38199.370733959025529
        expected[10] = -23123.681303369005036
        expected[11] = -23123.657316510238161

        return (mom_proj, expected)

    def test_substitute_tot_ener_proj_3D(self):
        N = self.N
        DN_DX = self.DN_DX
        data = self.data

        tot_ener_proj = KratosMultiphysics.Vector(self.num_nodes)

        #substitute_tot_ener_proj_3D:
        //substitute_tot_ener_proj_3D

        expected = KratosMultiphysics.Vector(self.num_nodes)
        expected[0] = 650.34404563661087195
        expected[1] = 237.28688757874476778
        expected[2] = 203.70255146375845356
        expected[3] = 224.71439433220740511

        return (tot_ener_proj, expected)


    def test_substitute_rhs_3D_OSS(self):
        N = self.N
        DN_DX = self.DN_DX
        data = self.data

        rRightHandSideBoundedVector = KratosMultiphysics.Vector(self.block_size*self.num_nodes)

        stab_c1 = 12
        stab_c2 = 2
        stab_c3 = 1

        #substitute_rhs_3D_OSS:
        //substitute_rhs_3D_OSS

        expected = KratosMultiphysics.Vector(self.block_size*self.num_nodes)
        expected[0]  = 129586.20119766362768
        expected[1]  = -37873.97680532533559
        expected[2]  = -23262.112022618039191
        expected[3]  = -23254.902094212877273
        expected[4]  = 413798.27815090655349
        expected[5]  = -88081.722252947132802
        expected[6]  = -38089.271760862153315
        expected[7]  = -23214.188567774395779
        expected[8]  = -23209.942729985992628
        expected[9]  = -78249.923647935793269
        expected[10] = -53318.556610606465256
        expected[11] = -38189.824105623272771
        expected[12] = -22809.305722123430314
        expected[13] = -23116.554610274011793
        expected[14] = -20008.098125665354019
        expected[15] = -53329.803182941846899
        expected[16] = -38182.965865428974212
        expected[17] = -23120.398712731923297
        expected[18] = -22804.746775478080963
        expected[19] = -14319.600207868859798

        return (rRightHandSideBoundedVector, expected)

    def test_substitute_rhs_3D_ASGS(self):
        N = self.N
        DN_DX = self.DN_DX
        data = self.data

        rRightHandSideBoundedVector = KratosMultiphysics.Vector(self.block_size*self.num_nodes)

        stab_c1 = 12
        stab_c2 = 2
        stab_c3 = 1

        #substitute_rhs_3D_ASGS:
        //substitute_rhs_3D_ASGS

        expected = KratosMultiphysics.Vector(self.block_size*self.num_nodes)
        expected[0]  = 129586.20119766362768
        expected[1]  = -37873.976805325328314
        expected[2]  = -23262.112022618039191
        expected[3]  = -23254.902094212877273
        expected[4]  = 413798.27815090655349
        expected[5]  = -88081.722252947132802
        expected[6]  = -38089.271760862153315
        expected[7]  = -23214.188567774395779
        expected[8]  = -23209.942729985992628
        expected[9]  = -78249.923647935793269
        expected[10] = -53318.556610606465256
        expected[11] = -38189.824105623272771
        expected[12] = -22809.305722123430314
        expected[13] = -23116.554610274011793
        expected[14] = -20008.098125665354019
        expected[15] = -53329.803182941846899
        expected[16] = -38182.965865428974212
        expected[17] = -23120.398712731923297
        expected[18] = -22804.746775478080963
        expected[19] = -14319.600207868859798

        return (rRightHandSideBoundedVector, expected)
