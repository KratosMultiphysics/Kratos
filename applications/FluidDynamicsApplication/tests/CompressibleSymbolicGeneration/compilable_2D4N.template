//    |  /           |
//    ' /   __| _` | __|  _ \   __|
//    . \  |   (   | |   (   |\__ `
//   _|\_\_|  \__,_|\__|\___/ ____/
//                   Multi-Physics
//
//  License:         BSD License
//                   Kratos default license: kratos/license.txt
//
//  Main authors:    Eduard GÃ³mez
//

#include "compilable_symbolic_test.h"
#include <iomanip>
#include <cstring>

using namespace TestCompressibleNavierStokesSymbolic;

static constexpr std::size_t nnodes = 4;
static constexpr std::size_t dim = 2;
static constexpr std::size_t blocksize = dim + 2;

using ShapeFun = Vector<nnodes>;
using ShapeFunGrad = Matrix<nnodes, dim>;
using ElementData = ElementDataT<dim, nnodes>;

int test_substitute_rho_proj_2D(ShapeFun const& N, ShapeFunGrad const& DN_DX, ElementData const& data, const bool dump_values);
int test_substitute_mom_proj_2D(ShapeFun const& N, ShapeFunGrad const& DN_DX, ElementData const& data, const bool dump_values);
int test_substitute_tot_ener_proj_2D(ShapeFun const& N, ShapeFunGrad const& DN_DX, ElementData const& data, const bool dump_values);
int test_substitute_lhs_2D_OSS(ShapeFun const& N, ShapeFunGrad const& DN_DX, ElementData const& data, const bool dump_values);
int test_substitute_rhs_2D_OSS(ShapeFun const& N, ShapeFunGrad const& DN_DX, ElementData const& data, const bool dump_values);
int test_substitute_lhs_2D_ASGS(ShapeFun const& N, ShapeFunGrad const& DN_DX, ElementData const& data, const bool dump_values);
int test_substitute_rhs_2D_ASGS(ShapeFun const& N, ShapeFunGrad const& DN_DX, ElementData const& data, const bool dump_values);

int main(int argc, char** argv)
{
    int result = 0;

    bool dump_values = false;
    if(argc > 1 && strcmp(argv[1], "--dump")==0) dump_values = true;

    const ElementData data;

    ShapeFunGrad DN_DX;
    ShapeFun N;

    double xi = -sqrt(3)/3;
    double eta = sqrt(3)/3;

    ShapeFunctions<dim, nnodes>(N, DN_DX, xi, eta);

    result += test_substitute_rho_proj_2D(N, DN_DX, data, dump_values);
    result += test_substitute_mom_proj_2D(N, DN_DX, data, dump_values);
    result += test_substitute_tot_ener_proj_2D(N, DN_DX, data, dump_values);
    result += test_substitute_lhs_2D_OSS(N, DN_DX, data, dump_values);
    result += test_substitute_rhs_2D_OSS(N, DN_DX, data, dump_values);
    result += test_substitute_lhs_2D_ASGS(N, DN_DX, data, dump_values);
    result += test_substitute_rhs_2D_ASGS(N, DN_DX, data, dump_values);

    return result;
}

int test_substitute_rho_proj_2D(ShapeFun const& N, ShapeFunGrad const& DN_DX, ElementData const& data, const bool dump_values)
{
    Vector<nnodes> rho_proj_gauss;

    // ------------------------- substitute_rho_proj_2D -------------------------
    //substitute_rho_proj_2D

    Vector<nnodes> expected;
    expected[0] = 0;
    expected[1] = 0;
    expected[2] = 0;
    expected[3] = 0;

    std::cout << "test_substitute_rho_proj_2D:";
    int test = rho_proj_gauss.validate(expected);
    if(test == 0) {
        std::cout << " OK";
    }
    std::cout << std::endl;

    if(dump_values) {
        std::cout << "Value dump:\n" << std::setprecision(20) << rho_proj_gauss << std::endl;
    }

    return test;
}


int test_substitute_mom_proj_2D(ShapeFun const& N, ShapeFunGrad const& DN_DX, ElementData const& data, const bool dump_values)
{
    Vector<dim * nnodes> mom_proj_gauss;

// ------------------------- substitute_mom_proj_2D -------------------------
//substitute_mom_proj_2D

    Vector<dim * nnodes> expected;
    expected[0] = 323.41193368440514178;
    expected[1] = -9.8639477702076238232e-13;
    expected[2] = 86.657966453324164036;
    expected[3] = -2.6430368392099063291e-13;
    expected[4] = 323.41193368440514178;
    expected[5] = -9.8639477702076238232e-13;
    expected[6] = 1206.9897682842961331;
    expected[7] = -3.6812754241620587954e-12;

    std::cout << "test_substitute_mom_proj_2D:";
    int test = mom_proj_gauss.validate(expected);
    if(test == 0) {
        std::cout << " OK";
    }
    std::cout << std::endl;

    if(dump_values) {
        std::cout << "Value dump:\n" << std::setprecision(20) << mom_proj_gauss << std::endl;
    }

    return test;
}

int test_substitute_tot_ener_proj_2D(ShapeFun const& N, ShapeFunGrad const& DN_DX, ElementData const& data, const bool dump_values)
{
    Vector<nnodes> tot_ener_proj_gauss;

// ------------------------- substitute_tot_ener_proj_2D -------------------------
//substitute_tot_ener_proj_2D

    Vector<nnodes> expected;
    expected[0] = -28449.159438906241121;
    expected[1] = -7622.9292969991793143;
    expected[2] = -28449.159438906241121;
    expected[3] = -106173.70845862576971;

    std::cout << "test_substitute_tot_ener_proj_2D:";
    int test = tot_ener_proj_gauss.validate(expected);
    if(test == 0) {
        std::cout << " OK";
    }
    std::cout << std::endl;

    if(dump_values) {
        std::cout << "Value dump:\n" << std::setprecision(20) << tot_ener_proj_gauss << std::endl;
    }

    return test;
}

int test_substitute_lhs_2D_OSS(ShapeFun const&, ShapeFunGrad const&, ElementData const&, const bool)
{
// ------------------------- substitute_lhs_2D_OSS -------------------------
//substitute_lhs_2D_OSS
    return 0;
}

int test_substitute_rhs_2D_OSS(ShapeFun const& N, ShapeFunGrad const& DN_DX, ElementData const& data, const bool dump_values)
{
    Vector<blocksize*nnodes> rhs_gauss;
    const double stab_c1 = 12;
    const double stab_c2 = 2;
    const double stab_c3 = 1;

// ------------------------- substitute_rhs_2D_OSS -------------------------
//substitute_rhs_2D_OSS

    Vector<blocksize*nnodes> expected;
    expected[0] = -0.27983535927973562929;
    expected[1] = 131.11110392555048065;
    expected[2] = 195.386026326388901;
    expected[3] = -97816.487139542135992;
    expected[4] = 0.27983535927973962609;
    expected[5] = 238.23440538623225393;
    expected[6] = 52.353527966481571809;
    expected[7] = 72815.815767064399552;
    expected[8] = 1.0443597785862750449;
    expected[9] = 889.10290501237784611;
    expected[10] = -52.353527966484271872;
    expected[11] = 271752.32403725769836;
    expected[12] = -1.0443597785862790417;
    expected[13] = 489.31330128659192269;
    expected[14] = -195.38602632639174317;
    expected[15] = -365056.09982268471504;

    std::cout << "test_substitute_rhs_2D_OSS:";
    int test = rhs_gauss.validate(expected);
    if(test == 0) {
        std::cout << " OK";
    }
    std::cout << std::endl;

    if(dump_values) {
        std::cout << "Value dump:\n" << std::setprecision(20) << rhs_gauss << std::endl;
    }

    return test;
}

int test_substitute_lhs_2D_ASGS(ShapeFun const&, ShapeFunGrad const&, ElementData const&, const bool)
{
// ------------------------- substitute_lhs_2D_ASGS -------------------------
//substitute_lhs_2D_ASGS
    return 0;
}

int test_substitute_rhs_2D_ASGS(ShapeFun const& N, ShapeFunGrad const& DN_DX, ElementData const& data, const bool dump_values)
{
    Vector<blocksize*nnodes> rhs_gauss;
    const double stab_c1 = 12;
    const double stab_c2 = 2;
    const double stab_c3 = 1;

// ------------------------- substitute_rhs_2D_ASGS -------------------------
//substitute_rhs_2D_ASGS

    Vector<blocksize*nnodes> expected;
    expected[0] = -0.27983535927973562929;
    expected[1] = 131.11110392555048065;
    expected[2] = 195.386026326388901;
    expected[3] = -97816.487139542135992;
    expected[4] = 0.27983535927973962609;
    expected[5] = 238.23440538623225393;
    expected[6] = 52.353527966481571809;
    expected[7] = 72815.815767064399552;
    expected[8] = 1.0443597785862750449;
    expected[9] = 889.10290501237784611;
    expected[10] = -52.353527966484271872;
    expected[11] = 271752.32403725769836;
    expected[12] = -1.0443597785862790417;
    expected[13] = 489.31330128659192269;
    expected[14] = -195.38602632639174317;
    expected[15] = -365056.09982268471504;

    std::cout << "test_substitute_rhs_2D_ASGS:";
    int test = rhs_gauss.validate(expected);
    if(test == 0) {
        std::cout << " OK";
    }
    std::cout << std::endl;

    if(dump_values) {
        std::cout << "Value dump:\n" << std::setprecision(20) << rhs_gauss << std::endl;
    }

    return test;
}