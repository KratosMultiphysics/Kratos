//    |  /           |
//    ' /   __| _` | __|  _ \   __|
//    . \  |   (   | |   (   |\__ `
//   _|\_\_|  \__,_|\__|\___/ ____/
//                   Multi-Physics
//
//  License:         BSD License
//                   Kratos default license: kratos/license.txt
//
//  Main authors:    Eduard GÃ³mez, Ruben Zorrilla
//

/**
 *
 *                          WARNING! THIS FILE IS READ-ONLY
 *
 * This file has been auto-generated by compressible_navier_stokes_symbolic_generator.py
 * located in the symbolic_generation directories of the FluidDynamicsApplication
 *
 * Any modifications to this file will be overwritten if and when that script is run again.
 *
 * In order to do any lasting changes, modify the template used by the script:
 * templates/compressible_navier_stokes_explicit_template_2D4N.cpp
 * located in the symbolic_generation directories of the FluidDynamicsApplication.
 *
 * In order to change the formulation you will have to modify the script itself.
 */

// System includes


// External includes


// Project includes
#include "includes/checks.h"
#include "utilities/element_size_calculator.h"

// Application includes
#include "custom_elements/compressible_navier_stokes_explicit.h"


namespace Kratos {

template<>
GeometryData::IntegrationMethod CompressibleNavierStokesExplicit<2,4>::GetIntegrationMethod() const
{
    return GeometryData::IntegrationMethod::GI_GAUSS_2;
}

template <>
void CompressibleNavierStokesExplicit<2,4>::EquationIdVector(
    EquationIdVectorType &rResult,
    const ProcessInfo &rCurrentProcessInfo) const
{
    KRATOS_TRY

    if (rResult.size() != DofSize) {
        rResult.resize(DofSize);
    }

    unsigned int local_index = 0;
    const auto& r_geometry = GetGeometry();
    const unsigned int den_pos = r_geometry[0].GetDofPosition(DENSITY);
    const unsigned int mom_pos = r_geometry[0].GetDofPosition(MOMENTUM);
    const unsigned int enr_pos = r_geometry[0].GetDofPosition(TOTAL_ENERGY);
    for (unsigned int i_node = 0; i_node < NumNodes; ++i_node) {
        rResult[local_index++] = r_geometry[i_node].GetDof(DENSITY, den_pos).EquationId();
        rResult[local_index++] = r_geometry[i_node].GetDof(MOMENTUM_X, mom_pos).EquationId();
        rResult[local_index++] = r_geometry[i_node].GetDof(MOMENTUM_Y, mom_pos + 1).EquationId();
        rResult[local_index++] = r_geometry[i_node].GetDof(TOTAL_ENERGY, enr_pos).EquationId();
    }

    KRATOS_CATCH("");
}

template <>
void CompressibleNavierStokesExplicit<2,4>::GetDofList(
    DofsVectorType &ElementalDofList,
    const ProcessInfo &rCurrentProcessInfo) const
{
    KRATOS_TRY

    if (ElementalDofList.size() != DofSize) {
        ElementalDofList.resize(DofSize);
    }

    unsigned int local_index = 0;
    const auto& r_geometry = GetGeometry();
    const unsigned int den_pos = r_geometry[0].GetDofPosition(DENSITY);
    const unsigned int mom_pos = r_geometry[0].GetDofPosition(MOMENTUM);
    const unsigned int enr_pos = r_geometry[0].GetDofPosition(TOTAL_ENERGY);
    for (unsigned int i_node = 0; i_node < NumNodes; ++i_node) {
        ElementalDofList[local_index++] = r_geometry[i_node].pGetDof(DENSITY, den_pos);
        ElementalDofList[local_index++] = r_geometry[i_node].pGetDof(MOMENTUM_X, mom_pos);
        ElementalDofList[local_index++] = r_geometry[i_node].pGetDof(MOMENTUM_Y, mom_pos + 1);
        ElementalDofList[local_index++] = r_geometry[i_node].pGetDof(TOTAL_ENERGY, enr_pos);
    }

    KRATOS_CATCH("");
}


void ComputeMidpointShapeFunctions(
    const Geometry<Node<3>>& rGeometry,
    Vector& rN,
    Matrix& rDN_DX)
{
    Matrix DN_De;
    Matrix Jinv;

    const auto center = rGeometry.Center();
    rGeometry.ShapeFunctionsValues(rN, center);
    rGeometry.InverseOfJacobian(Jinv, center);

    rGeometry.ShapeFunctionsLocalGradients(DN_De, center);
    GeometryUtils::ShapeFunctionsGradients(DN_De, Jinv, rDN_DX);
}


template <>
array_1d<double,3> CompressibleNavierStokesExplicit<2,4>::CalculateMidPointVelocityRotational() const
{
    // Get geometry data
    const auto& r_geometry = GetGeometry();

    Vector N;
    Matrix DN_DX;

    ComputeMidpointShapeFunctions(r_geometry, N, DN_DX);

    // Calculate midpoint magnitudes
    double midpoint_rho = 0.0;
    double midpoint_dmy_dx = 0.0;
    double midpoint_dmx_dy = 0.0;
    double midpoint_rho_dx = 0.0;
    double midpoint_rho_dy = 0.0;
    array_1d<double, 3> midpoint_mom = ZeroVector(3);

    for (unsigned int i_node = 0; i_node < NumNodes; ++i_node) {
        auto& r_node = r_geometry[i_node];

        const auto node_dNdX = row(DN_DX, i_node);
        const auto node_N = N(i_node);

        const auto& r_mom = r_node.FastGetSolutionStepValue(MOMENTUM);
        const double& r_rho = r_node.FastGetSolutionStepValue(DENSITY);
        midpoint_rho += node_N * r_rho;
        midpoint_mom += node_N * r_mom;
        midpoint_dmy_dx += r_mom[1] * node_dNdX[0];
        midpoint_dmx_dy += r_mom[0] * node_dNdX[1];
        midpoint_rho_dx += r_rho * node_dNdX[0];
        midpoint_rho_dy += r_rho * node_dNdX[1];
    }

    // Calculate velocity rotational
    // Note that the formulation is written in conservative variables. Hence we do rot(mom/rho).
    const double dvy_dx = (midpoint_dmy_dx * midpoint_rho - midpoint_mom[1] * midpoint_rho_dx) / std::pow(midpoint_rho, 2);
    const double dvx_dy = (midpoint_dmx_dy * midpoint_rho - midpoint_mom[0] * midpoint_rho_dy) / std::pow(midpoint_rho, 2);
    array_1d<double,3> midpoint_rot_v;
    midpoint_rot_v[0] = 0.0;
    midpoint_rot_v[1] = 0.0;
    midpoint_rot_v[2] = dvy_dx - dvx_dy;
    return midpoint_rot_v;
}


template <>
BoundedMatrix<double, 3, 3> CompressibleNavierStokesExplicit<2, 4>::CalculateMidPointVelocityGradient() const
{
    KRATOS_TRY

    // Get geometry data
    const auto& r_geometry = GetGeometry();

    Vector N;
    Matrix DN_DX;

    ComputeMidpointShapeFunctions(r_geometry, N, DN_DX);

    // Calculate midpoint magnitudes
    double midpoint_rho = 0.0;
    double midpoint_dmx_dx = 0.0;
    double midpoint_dmx_dy = 0.0;
    double midpoint_dmy_dx = 0.0;
    double midpoint_dmy_dy = 0.0;
    double midpoint_rho_dx = 0.0;
    double midpoint_rho_dy = 0.0;
    array_1d<double,3> midpoint_mom = ZeroVector(3);

    for (unsigned int i_node = 0; i_node < NumNodes; ++i_node) {
        auto& r_node = r_geometry[i_node];

        const auto node_dNdX = row(DN_DX, i_node);
        const auto node_N = N(i_node);

        const auto& r_mom = r_node.FastGetSolutionStepValue(MOMENTUM);
        const double& r_rho = r_node.FastGetSolutionStepValue(DENSITY);
        midpoint_rho += node_N * r_rho;
        midpoint_mom += node_N * r_mom;
        midpoint_dmx_dx += r_mom[0] * node_dNdX[0];
        midpoint_dmx_dy += r_mom[0] * node_dNdX[1];
        midpoint_dmy_dx += r_mom[1] * node_dNdX[0];
        midpoint_dmy_dy += r_mom[1] * node_dNdX[1];
        midpoint_rho_dx += r_rho * node_dNdX[0];
        midpoint_rho_dy += r_rho * node_dNdX[1];
    }

    // Calculate velocity gradient
    // Note that the formulation is written in conservative variables. Hence we do grad(mom/rho).
    BoundedMatrix<double, 3, 3> midpoint_grad_v = ZeroMatrix(3, 3);
    midpoint_grad_v(0,0) = (midpoint_dmx_dx * midpoint_rho - midpoint_mom[0] * midpoint_rho_dx);
    midpoint_grad_v(0,1) = (midpoint_dmx_dy * midpoint_rho - midpoint_mom[0] * midpoint_rho_dy);
    midpoint_grad_v(1,0) = (midpoint_dmy_dx * midpoint_rho - midpoint_mom[1] * midpoint_rho_dx);
    midpoint_grad_v(1,1) = (midpoint_dmy_dy * midpoint_rho - midpoint_mom[1] * midpoint_rho_dy);
    midpoint_grad_v /= std::pow(midpoint_rho, 2);

    return midpoint_grad_v;

    KRATOS_CATCH("")
}


template <>
void CompressibleNavierStokesExplicit<2,4>::CalculateMomentumProjection(const ProcessInfo& rCurrentProcessInfo)
{
    KRATOS_TRY

    // Struct to pass around the data
    ElementDataStruct data;
    this->FillElementData(data, rCurrentProcessInfo);

    // Calculate shock capturing values
    constexpr std::size_t vector_size = Dim*NumNodes;
    BoundedVector<double, vector_size> mom_proj = ZeroVector(vector_size);

    Vector N;
    Matrix DN_De;
    Matrix DN_DX;

    Matrix J;
    Matrix Jinv;

    auto& r_geometry = GetGeometry();
    const auto& gauss_points = r_geometry.IntegrationPoints(GetIntegrationMethod());
    for(const auto& gauss_point: gauss_points)
    {
        const double w = gauss_point.Weight();
        r_geometry.ShapeFunctionsValues(N, gauss_point.Coordinates());

        double detJ;
        r_geometry.Jacobian(J, gauss_point.Coordinates());
        MathUtils<double>::InvertMatrix(J, Jinv, detJ);

        r_geometry.ShapeFunctionsLocalGradients(DN_De, gauss_point.Coordinates());
        GeometryUtils::ShapeFunctionsGradients(DN_De, Jinv, DN_DX);

        BoundedVector<double, vector_size> mom_proj_gauss(DofSize);

        const double cmom_proj_gauss0 = data.gamma - 1;
        const double cmom_proj_gauss1 = N(0)*data.U(0,0) + N(1)*data.U(1,0) + N(2)*data.U(2,0) + N(3)*data.U(3,0);
        const double cmom_proj_gauss2 = DN_DX(0,1)*data.U(0,1) + DN_DX(1,1)*data.U(1,1) + DN_DX(2,1)*data.U(2,1) + DN_DX(3,1)*data.U(3,1);
        const double cmom_proj_gauss3 = 1.0/cmom_proj_gauss1;
        const double cmom_proj_gauss4 = N(0)*data.U(0,2) + N(1)*data.U(1,2) + N(2)*data.U(2,2) + N(3)*data.U(3,2);
        const double cmom_proj_gauss5 = cmom_proj_gauss3*cmom_proj_gauss4;
        const double cmom_proj_gauss6 = DN_DX(0,1)*data.U(0,2) + DN_DX(1,1)*data.U(1,2) + DN_DX(2,1)*data.U(2,2) + DN_DX(3,1)*data.U(3,2);
        const double cmom_proj_gauss7 = N(0)*data.U(0,1) + N(1)*data.U(1,1) + N(2)*data.U(2,1) + N(3)*data.U(3,1);
        const double cmom_proj_gauss8 = cmom_proj_gauss3*cmom_proj_gauss7;
        const double cmom_proj_gauss9 = DN_DX(0,0)*data.U(0,2) + DN_DX(1,0)*data.U(1,2) + DN_DX(2,0)*data.U(2,2) + DN_DX(3,0)*data.U(3,2);
        const double cmom_proj_gauss10 = 1.0*cmom_proj_gauss0;
        const double cmom_proj_gauss11 = DN_DX(0,0)*data.U(0,1) + DN_DX(1,0)*data.U(1,1) + DN_DX(2,0)*data.U(2,1) + DN_DX(3,0)*data.U(3,1);
        const double cmom_proj_gauss12 = 1.0*data.gamma - 3.0;
        const double cmom_proj_gauss13 = pow(cmom_proj_gauss1, -2);
        const double cmom_proj_gauss14 = cmom_proj_gauss13*(DN_DX(0,1)*data.U(0,0) + DN_DX(1,1)*data.U(1,0) + DN_DX(2,1)*data.U(2,0) + DN_DX(3,1)*data.U(3,0));
        const double cmom_proj_gauss15 = cmom_proj_gauss4*cmom_proj_gauss7;
        const double cmom_proj_gauss16 = pow(cmom_proj_gauss7, 2);
        const double cmom_proj_gauss17 = pow(cmom_proj_gauss4, 2);
        const double cmom_proj_gauss18 = 0.5*cmom_proj_gauss0*(cmom_proj_gauss16 + cmom_proj_gauss17);
        const double cmom_proj_gauss19 = cmom_proj_gauss13*(DN_DX(0,0)*data.U(0,0) + DN_DX(1,0)*data.U(1,0) + DN_DX(2,0)*data.U(2,0) + DN_DX(3,0)*data.U(3,0));
        const double cmom_proj_gauss20 = N(0)*data.dUdt(0,1) + N(1)*data.dUdt(1,1) + N(2)*data.dUdt(2,1) + N(3)*data.dUdt(3,1) + cmom_proj_gauss0*(DN_DX(0,0)*data.U(0,3) + DN_DX(1,0)*data.U(1,3) + DN_DX(2,0)*data.U(2,3) + DN_DX(3,0)*data.U(3,3)) - cmom_proj_gauss1*(N(0)*data.f_ext(0,0) + N(1)*data.f_ext(1,0) + N(2)*data.f_ext(2,0) + N(3)*data.f_ext(3,0)) - cmom_proj_gauss10*cmom_proj_gauss5*cmom_proj_gauss9 - cmom_proj_gauss11*cmom_proj_gauss12*cmom_proj_gauss8 - cmom_proj_gauss14*cmom_proj_gauss15 + cmom_proj_gauss19*(-cmom_proj_gauss16 + cmom_proj_gauss18) + cmom_proj_gauss2*cmom_proj_gauss5 + cmom_proj_gauss6*cmom_proj_gauss8;
        const double cmom_proj_gauss21 = N(0)*data.dUdt(0,2) + N(1)*data.dUdt(1,2) + N(2)*data.dUdt(2,2) + N(3)*data.dUdt(3,2) + cmom_proj_gauss0*(DN_DX(0,1)*data.U(0,3) + DN_DX(1,1)*data.U(1,3) + DN_DX(2,1)*data.U(2,3) + DN_DX(3,1)*data.U(3,3)) - cmom_proj_gauss1*(N(0)*data.f_ext(0,1) + N(1)*data.f_ext(1,1) + N(2)*data.f_ext(2,1) + N(3)*data.f_ext(3,1)) - cmom_proj_gauss10*cmom_proj_gauss2*cmom_proj_gauss8 + cmom_proj_gauss11*cmom_proj_gauss5 - cmom_proj_gauss12*cmom_proj_gauss5*cmom_proj_gauss6 + cmom_proj_gauss14*(-cmom_proj_gauss17 + cmom_proj_gauss18) - cmom_proj_gauss15*cmom_proj_gauss19 + cmom_proj_gauss8*cmom_proj_gauss9;
        mom_proj_gauss[0] = -N(0)*cmom_proj_gauss20;
        mom_proj_gauss[1] = -N(0)*cmom_proj_gauss21;
        mom_proj_gauss[2] = -N(1)*cmom_proj_gauss20;
        mom_proj_gauss[3] = -N(1)*cmom_proj_gauss21;
        mom_proj_gauss[4] = -N(2)*cmom_proj_gauss20;
        mom_proj_gauss[5] = -N(2)*cmom_proj_gauss21;
        mom_proj_gauss[6] = -N(3)*cmom_proj_gauss20;
        mom_proj_gauss[7] = -N(3)*cmom_proj_gauss21;


        mom_proj += w * detJ * mom_proj_gauss;
    }

    // Assembly the projection contributions
    for (IndexType i_node = 0; i_node < NumNodes; ++i_node) {
        const IndexType aux = i_node * Dim;
        auto& r_mom_proj = r_geometry[i_node].GetValue(MOMENTUM_PROJECTION);
        for (IndexType d = 0; d < Dim; ++d) {
            AtomicAdd(r_mom_proj[d], mom_proj[aux + d]);
        }
    }

    KRATOS_CATCH("")
}


template <>
void CompressibleNavierStokesExplicit<2,4>::CalculateDensityProjection(const ProcessInfo& rCurrentProcessInfo)
{
    KRATOS_TRY

    // Struct to pass around the data
    ElementDataStruct data;
    this->FillElementData(data, rCurrentProcessInfo);

    // Calculate shock capturing values
    BoundedVector<double, NumNodes> rho_proj = ZeroVector(NumNodes);

    Vector N;
    Matrix DN_De;
    Matrix DN_DX;

    Matrix J;
    Matrix Jinv;

    auto& r_geometry = GetGeometry();
    const auto& gauss_points = r_geometry.IntegrationPoints(GetIntegrationMethod());
    for(const auto& gauss_point: gauss_points)
    {
        const double w = gauss_point.Weight();
        r_geometry.ShapeFunctionsValues(N, gauss_point.Coordinates());

        double detJ;
        r_geometry.Jacobian(J, gauss_point.Coordinates());
        MathUtils<double>::InvertMatrix(J, Jinv, detJ);

        r_geometry.ShapeFunctionsLocalGradients(DN_De, gauss_point.Coordinates());
        GeometryUtils::ShapeFunctionsGradients(DN_De, Jinv, DN_DX);

        BoundedVector<double, DofSize> rho_proj_gauss(DofSize);

        const double crho_proj_gauss0 = DN_DX(0,0)*data.U(0,1) + DN_DX(0,1)*data.U(0,2) + DN_DX(1,0)*data.U(1,1) + DN_DX(1,1)*data.U(1,2) + DN_DX(2,0)*data.U(2,1) + DN_DX(2,1)*data.U(2,2) + DN_DX(3,0)*data.U(3,1) + DN_DX(3,1)*data.U(3,2) + N(0)*data.dUdt(0,0) - N(0)*data.m_ext(0) + N(1)*data.dUdt(1,0) - N(1)*data.m_ext(1) + N(2)*data.dUdt(2,0) - N(2)*data.m_ext(2) + N(3)*data.dUdt(3,0) - N(3)*data.m_ext(3);
        rho_proj_gauss[0] = -N(0)*crho_proj_gauss0;
        rho_proj_gauss[1] = -N(1)*crho_proj_gauss0;
        rho_proj_gauss[2] = -N(2)*crho_proj_gauss0;
        rho_proj_gauss[3] = -N(3)*crho_proj_gauss0;


        rho_proj += w * detJ * rho_proj_gauss;
    }

    // Assembly the projection contributions
    for (IndexType i_node = 0; i_node < NumNodes; ++i_node) {
        AtomicAdd(r_geometry[i_node].GetValue(DENSITY_PROJECTION), rho_proj[i_node]);
    }

    KRATOS_CATCH("")
}


template <>
void CompressibleNavierStokesExplicit<2,4>::CalculateTotalEnergyProjection(const ProcessInfo& rCurrentProcessInfo)
{
    KRATOS_TRY

    // Struct to pass around the data
    ElementDataStruct data;
    this->FillElementData(data, rCurrentProcessInfo);

    // Calculate shock capturing values
    BoundedVector<double, NumNodes> tot_ener_proj = ZeroVector(NumNodes);

    Vector N;
    Matrix DN_De;
    Matrix DN_DX;

    Matrix J;
    Matrix Jinv;

    auto& r_geometry = GetGeometry();
    const auto& gauss_points = r_geometry.IntegrationPoints(GetIntegrationMethod());
    for(const auto& gauss_point: gauss_points)
    {
        const double w = gauss_point.Weight();
        r_geometry.ShapeFunctionsValues(N, gauss_point.Coordinates());

        double detJ;
        r_geometry.Jacobian(J, gauss_point.Coordinates());
        MathUtils<double>::InvertMatrix(J, Jinv, detJ);

        r_geometry.ShapeFunctionsLocalGradients(DN_De, gauss_point.Coordinates());
        GeometryUtils::ShapeFunctionsGradients(DN_De, Jinv, DN_DX);

        BoundedVector<double, DofSize> tot_ener_proj_gauss(DofSize);

        const double ctot_ener_proj_gauss0 = N(0)*data.U(0,0) + N(1)*data.U(1,0) + N(2)*data.U(2,0) + N(3)*data.U(3,0);
        const double ctot_ener_proj_gauss1 = N(0)*data.U(0,1) + N(1)*data.U(1,1) + N(2)*data.U(2,1) + N(3)*data.U(3,1);
        const double ctot_ener_proj_gauss2 = N(0)*data.U(0,2) + N(1)*data.U(1,2) + N(2)*data.U(2,2) + N(3)*data.U(3,2);
        const double ctot_ener_proj_gauss3 = data.gamma/ctot_ener_proj_gauss0;
        const double ctot_ener_proj_gauss4 = pow(ctot_ener_proj_gauss0, -2);
        const double ctot_ener_proj_gauss5 = data.gamma - 1;
        const double ctot_ener_proj_gauss6 = 1.0*ctot_ener_proj_gauss5;
        const double ctot_ener_proj_gauss7 = ctot_ener_proj_gauss1*ctot_ener_proj_gauss2*ctot_ener_proj_gauss4*ctot_ener_proj_gauss6;
        const double ctot_ener_proj_gauss8 = pow(ctot_ener_proj_gauss1, 2);
        const double ctot_ener_proj_gauss9 = pow(ctot_ener_proj_gauss2, 2);
        const double ctot_ener_proj_gauss10 = ctot_ener_proj_gauss0*(N(0)*data.U(0,3) + N(1)*data.U(1,3) + N(2)*data.U(2,3) + N(3)*data.U(3,3));
        const double ctot_ener_proj_gauss11 = 1.0*(ctot_ener_proj_gauss10*data.gamma - ctot_ener_proj_gauss8*data.gamma + ctot_ener_proj_gauss8 - ctot_ener_proj_gauss9*data.gamma + ctot_ener_proj_gauss9)/pow(ctot_ener_proj_gauss0, 3);
        const double ctot_ener_proj_gauss12 = ctot_ener_proj_gauss10 - ctot_ener_proj_gauss5*(-ctot_ener_proj_gauss10 + 0.5*ctot_ener_proj_gauss8 + 0.5*ctot_ener_proj_gauss9);
        const double ctot_ener_proj_gauss13 = N(0)*data.dUdt(0,3) + N(1)*data.dUdt(1,3) + N(2)*data.dUdt(2,3) + N(3)*data.dUdt(3,3) - ctot_ener_proj_gauss0*(N(0)*data.r_ext(0) + N(1)*data.r_ext(1) + N(2)*data.r_ext(2) + N(3)*data.r_ext(3)) - ctot_ener_proj_gauss1*ctot_ener_proj_gauss11*(DN_DX(0,0)*data.U(0,0) + DN_DX(1,0)*data.U(1,0) + DN_DX(2,0)*data.U(2,0) + DN_DX(3,0)*data.U(3,0)) + ctot_ener_proj_gauss1*ctot_ener_proj_gauss3*(DN_DX(0,0)*data.U(0,3) + DN_DX(1,0)*data.U(1,3) + DN_DX(2,0)*data.U(2,3) + DN_DX(3,0)*data.U(3,3)) - ctot_ener_proj_gauss1*(N(0)*data.f_ext(0,0) + N(1)*data.f_ext(1,0) + N(2)*data.f_ext(2,0) + N(3)*data.f_ext(3,0)) - ctot_ener_proj_gauss11*ctot_ener_proj_gauss2*(DN_DX(0,1)*data.U(0,0) + DN_DX(1,1)*data.U(1,0) + DN_DX(2,1)*data.U(2,0) + DN_DX(3,1)*data.U(3,0)) + ctot_ener_proj_gauss2*ctot_ener_proj_gauss3*(DN_DX(0,1)*data.U(0,3) + DN_DX(1,1)*data.U(1,3) + DN_DX(2,1)*data.U(2,3) + DN_DX(3,1)*data.U(3,3)) - ctot_ener_proj_gauss2*(N(0)*data.f_ext(0,1) + N(1)*data.f_ext(1,1) + N(2)*data.f_ext(2,1) + N(3)*data.f_ext(3,1)) + ctot_ener_proj_gauss4*(ctot_ener_proj_gauss12 - ctot_ener_proj_gauss6*ctot_ener_proj_gauss8)*(DN_DX(0,0)*data.U(0,1) + DN_DX(1,0)*data.U(1,1) + DN_DX(2,0)*data.U(2,1) + DN_DX(3,0)*data.U(3,1)) + ctot_ener_proj_gauss4*(ctot_ener_proj_gauss12 - ctot_ener_proj_gauss6*ctot_ener_proj_gauss9)*(DN_DX(0,1)*data.U(0,2) + DN_DX(1,1)*data.U(1,2) + DN_DX(2,1)*data.U(2,2) + DN_DX(3,1)*data.U(3,2)) - ctot_ener_proj_gauss7*(DN_DX(0,0)*data.U(0,2) + DN_DX(1,0)*data.U(1,2) + DN_DX(2,0)*data.U(2,2) + DN_DX(3,0)*data.U(3,2)) - ctot_ener_proj_gauss7*(DN_DX(0,1)*data.U(0,1) + DN_DX(1,1)*data.U(1,1) + DN_DX(2,1)*data.U(2,1) + DN_DX(3,1)*data.U(3,1));
        tot_ener_proj_gauss[0] = -N(0)*ctot_ener_proj_gauss13;
        tot_ener_proj_gauss[1] = -N(1)*ctot_ener_proj_gauss13;
        tot_ener_proj_gauss[2] = -N(2)*ctot_ener_proj_gauss13;
        tot_ener_proj_gauss[3] = -N(3)*ctot_ener_proj_gauss13;


        tot_ener_proj += w * detJ * tot_ener_proj_gauss;
    }

    // Assembly the projection contributions
    for (IndexType i_node = 0; i_node < NumNodes; ++i_node) {
        AtomicAdd(r_geometry[i_node].GetValue(TOTAL_ENERGY_PROJECTION), tot_ener_proj[i_node]);
    }

    KRATOS_CATCH("")
}


template <>
void CompressibleNavierStokesExplicit<2,4>::CalculateRightHandSideInternal(
    BoundedVector<double, DofSize> &rRightHandSideBoundedVector,
    const ProcessInfo &rCurrentProcessInfo)
{
    KRATOS_TRY

    std::fill(rRightHandSideBoundedVector.begin(), rRightHandSideBoundedVector.end(), 0.0);

    // Struct to pass around the data
    ElementDataStruct data;
    this->FillElementData(data, rCurrentProcessInfo);

    // Stabilization parameters
    constexpr double stab_c1 = 12.0;
    constexpr double stab_c2 = 2.0;
    constexpr double stab_c3 = 1.0;

    const auto& r_geometry = GetGeometry();
    const auto& gauss_points = r_geometry.IntegrationPoints(GetIntegrationMethod());

    Vector N;
    Matrix DN_De;
    Matrix DN_DX;

    Matrix J;
    Matrix Jinv;

    if (data.UseOSS)
    {
        for(const auto& gauss_point: gauss_points)
        {
            const double w = gauss_point.Weight();
            r_geometry.ShapeFunctionsValues(N, gauss_point.Coordinates());

            double detJ;
            r_geometry.Jacobian(J, gauss_point.Coordinates());
            MathUtils<double>::InvertMatrix(J, Jinv, detJ);

            r_geometry.ShapeFunctionsLocalGradients(DN_De, gauss_point.Coordinates());
            GeometryUtils::ShapeFunctionsGradients(DN_De, Jinv, DN_DX);

            BoundedVector<double, DofSize> rhs_gauss(DofSize);

            const double crhs_gauss0 = N(0)*data.m_ext(0);
            const double crhs_gauss1 = N(1)*data.m_ext(1);
            const double crhs_gauss2 = N(2)*data.m_ext(2);
            const double crhs_gauss3 = N(3)*data.m_ext(3);
            const double crhs_gauss4 = crhs_gauss0 + crhs_gauss1 + crhs_gauss2 + crhs_gauss3;
            const double crhs_gauss5 = N(0)*crhs_gauss4;
            const double crhs_gauss6 = DN_DX(0,1)*data.U(0,2);
            const double crhs_gauss7 = DN_DX(1,1)*data.U(1,2);
            const double crhs_gauss8 = DN_DX(2,1)*data.U(2,2);
            const double crhs_gauss9 = DN_DX(3,1)*data.U(3,2);
            const double crhs_gauss10 = crhs_gauss6 + crhs_gauss7 + crhs_gauss8 + crhs_gauss9;
            const double crhs_gauss11 = DN_DX(0,0)*data.U(0,1);
            const double crhs_gauss12 = DN_DX(1,0)*data.U(1,1);
            const double crhs_gauss13 = DN_DX(2,0)*data.U(2,1);
            const double crhs_gauss14 = DN_DX(3,0)*data.U(3,1);
            const double crhs_gauss15 = crhs_gauss11 + crhs_gauss12 + crhs_gauss13 + crhs_gauss14;
            const double crhs_gauss16 = crhs_gauss10 + crhs_gauss15;
            const double crhs_gauss17 = DN_DX(0,0)*data.U(0,0) + DN_DX(1,0)*data.U(1,0) + DN_DX(2,0)*data.U(2,0) + DN_DX(3,0)*data.U(3,0);
            const double crhs_gauss18 = N(0)*data.alpha_sc_nodes(0) + N(1)*data.alpha_sc_nodes(1) + N(2)*data.alpha_sc_nodes(2) + N(3)*data.alpha_sc_nodes(3);
            const double crhs_gauss19 = crhs_gauss17*crhs_gauss18;
            const double crhs_gauss20 = DN_DX(0,1)*data.U(0,0) + DN_DX(1,1)*data.U(1,0) + DN_DX(2,1)*data.U(2,0) + DN_DX(3,1)*data.U(3,0);
            const double crhs_gauss21 = crhs_gauss18*crhs_gauss20;
            const double crhs_gauss22 = N(0)*data.U(0,0) + N(1)*data.U(1,0) + N(2)*data.U(2,0) + N(3)*data.U(3,0);
            const double crhs_gauss23 = 1.0/crhs_gauss22;
            const double crhs_gauss24 = fabs(crhs_gauss22);
            const double crhs_gauss25 = N(0)*data.U(0,1);
            const double crhs_gauss26 = N(1)*data.U(1,1);
            const double crhs_gauss27 = N(2)*data.U(2,1);
            const double crhs_gauss28 = N(3)*data.U(3,1);
            const double crhs_gauss29 = crhs_gauss25 + crhs_gauss26 + crhs_gauss27 + crhs_gauss28;
            const double crhs_gauss30 = pow(crhs_gauss29, 2);
            const double crhs_gauss31 = N(0)*data.U(0,2);
            const double crhs_gauss32 = N(1)*data.U(1,2);
            const double crhs_gauss33 = N(2)*data.U(2,2);
            const double crhs_gauss34 = N(3)*data.U(3,2);
            const double crhs_gauss35 = crhs_gauss31 + crhs_gauss32 + crhs_gauss33 + crhs_gauss34;
            const double crhs_gauss36 = pow(crhs_gauss35, 2);
            const double crhs_gauss37 = crhs_gauss30 + crhs_gauss36;
            const double crhs_gauss38 = 0.5*crhs_gauss30 + 0.5*crhs_gauss36;
            const double crhs_gauss39 = N(0)*data.U(0,3);
            const double crhs_gauss40 = N(1)*data.U(1,3);
            const double crhs_gauss41 = N(2)*data.U(2,3);
            const double crhs_gauss42 = N(3)*data.U(3,3);
            const double crhs_gauss43 = crhs_gauss39 + crhs_gauss40 + crhs_gauss41 + crhs_gauss42;
            const double crhs_gauss44 = -crhs_gauss23*crhs_gauss38 + crhs_gauss43;
            const double crhs_gauss45 = data.gamma - 1;
            const double crhs_gauss46 = crhs_gauss23*crhs_gauss45;
            const double crhs_gauss47 = crhs_gauss44*crhs_gauss46;
            const double crhs_gauss48 = 1.0/data.gamma;
            const double crhs_gauss49 = N(0)*data.r_ext(0) + N(1)*data.r_ext(1) + N(2)*data.r_ext(2) + N(3)*data.r_ext(3);
            const double crhs_gauss50 = pow(crhs_gauss49, 2);
            const double crhs_gauss51 = N(0)*data.f_ext(0,0) + N(1)*data.f_ext(1,0) + N(2)*data.f_ext(2,0) + N(3)*data.f_ext(3,0);
            const double crhs_gauss52 = N(0)*data.f_ext(0,1) + N(1)*data.f_ext(1,1) + N(2)*data.f_ext(2,1) + N(3)*data.f_ext(3,1);
            const double crhs_gauss53 = crhs_gauss47*data.gamma*(pow(crhs_gauss51, 2) + pow(crhs_gauss52, 2));
            const double crhs_gauss54 = 0.70710678118654757*crhs_gauss24*crhs_gauss48*stab_c3*sqrt((crhs_gauss50 + 2.0*crhs_gauss53 + 2.0*sqrt(0.25*crhs_gauss50 + crhs_gauss53)*fabs(crhs_gauss49))/(pow(crhs_gauss44, 2)*pow(crhs_gauss45, 2))) + stab_c2*(sqrt(crhs_gauss47)*sqrt(data.gamma) + sqrt(crhs_gauss37)/crhs_gauss24)/data.h;
            const double crhs_gauss55 = 1.0*(N(0)*data.ResProj(0,0) + N(0)*data.dUdt(0,0) + N(1)*data.ResProj(1,0) + N(1)*data.dUdt(1,0) + N(2)*data.ResProj(2,0) + N(2)*data.dUdt(2,0) + N(3)*data.ResProj(3,0) + N(3)*data.dUdt(3,0) - crhs_gauss0 - crhs_gauss1 + crhs_gauss16 - crhs_gauss2 - crhs_gauss3)/crhs_gauss54;
            const double crhs_gauss56 = crhs_gauss23*crhs_gauss55;
            const double crhs_gauss57 = crhs_gauss22*crhs_gauss51;
            const double crhs_gauss58 = 1.0*data.gamma;
            const double crhs_gauss59 = -crhs_gauss58;
            const double crhs_gauss60 = crhs_gauss59 + 3.0;
            const double crhs_gauss61 = crhs_gauss15*crhs_gauss23;
            const double crhs_gauss62 = crhs_gauss29*crhs_gauss61;
            const double crhs_gauss63 = DN_DX(0,0)*data.U(0,2);
            const double crhs_gauss64 = DN_DX(1,0)*data.U(1,2);
            const double crhs_gauss65 = DN_DX(2,0)*data.U(2,2);
            const double crhs_gauss66 = DN_DX(3,0)*data.U(3,2);
            const double crhs_gauss67 = crhs_gauss63 + crhs_gauss64 + crhs_gauss65 + crhs_gauss66;
            const double crhs_gauss68 = crhs_gauss35*crhs_gauss67;
            const double crhs_gauss69 = 1.0*crhs_gauss68;
            const double crhs_gauss70 = 1 - data.gamma;
            const double crhs_gauss71 = crhs_gauss23*crhs_gauss70;
            const double crhs_gauss72 = DN_DX(0,0)*data.U(0,3) + DN_DX(1,0)*data.U(1,3) + DN_DX(2,0)*data.U(2,3) + DN_DX(3,0)*data.U(3,3);
            const double crhs_gauss73 = DN_DX(0,1)*data.U(0,1);
            const double crhs_gauss74 = DN_DX(1,1)*data.U(1,1);
            const double crhs_gauss75 = DN_DX(2,1)*data.U(2,1);
            const double crhs_gauss76 = DN_DX(3,1)*data.U(3,1);
            const double crhs_gauss77 = crhs_gauss73 + crhs_gauss74 + crhs_gauss75 + crhs_gauss76;
            const double crhs_gauss78 = crhs_gauss35*crhs_gauss77;
            const double crhs_gauss79 = crhs_gauss23*crhs_gauss78;
            const double crhs_gauss80 = crhs_gauss10*crhs_gauss29;
            const double crhs_gauss81 = pow(crhs_gauss22, 2);
            const double crhs_gauss82 = 1.0/crhs_gauss81;
            const double crhs_gauss83 = -crhs_gauss30;
            const double crhs_gauss84 = 0.5*crhs_gauss45;
            const double crhs_gauss85 = crhs_gauss37*crhs_gauss84;
            const double crhs_gauss86 = crhs_gauss83 + crhs_gauss85;
            const double crhs_gauss87 = crhs_gauss82*crhs_gauss86;
            const double crhs_gauss88 = crhs_gauss20*crhs_gauss35;
            const double crhs_gauss89 = crhs_gauss82*crhs_gauss88;
            const double crhs_gauss90 = crhs_gauss17*crhs_gauss87 + crhs_gauss23*crhs_gauss80 - crhs_gauss29*crhs_gauss89 + crhs_gauss45*crhs_gauss72 + crhs_gauss79;
            const double crhs_gauss91 = N(0)*data.mu_sc_nodes(0);
            const double crhs_gauss92 = N(1)*data.mu_sc_nodes(1);
            const double crhs_gauss93 = N(2)*data.mu_sc_nodes(2);
            const double crhs_gauss94 = N(3)*data.mu_sc_nodes(3);
            const double crhs_gauss95 = crhs_gauss91 + crhs_gauss92 + crhs_gauss93 + crhs_gauss94 + data.mu;
            const double crhs_gauss96 = crhs_gauss23*stab_c1/pow(data.h, 2);
            const double crhs_gauss97 = 1.0/(crhs_gauss54 + 1.3333333333333333*crhs_gauss95*crhs_gauss96);
            const double crhs_gauss98 = crhs_gauss97*(N(0)*data.ResProj(0,1) + N(0)*data.dUdt(0,1) + N(1)*data.ResProj(1,1) + N(1)*data.dUdt(1,1) + N(2)*data.ResProj(2,1) + N(2)*data.dUdt(2,1) + N(3)*data.ResProj(3,1) + N(3)*data.dUdt(3,1) - crhs_gauss57 + crhs_gauss60*crhs_gauss62 + crhs_gauss69*crhs_gauss71 + crhs_gauss90);
            const double crhs_gauss99 = crhs_gauss22*crhs_gauss52;
            const double crhs_gauss100 = crhs_gauss10*crhs_gauss23;
            const double crhs_gauss101 = crhs_gauss100*crhs_gauss35;
            const double crhs_gauss102 = crhs_gauss29*crhs_gauss77;
            const double crhs_gauss103 = 1.0*crhs_gauss102;
            const double crhs_gauss104 = DN_DX(0,1)*data.U(0,3) + DN_DX(1,1)*data.U(1,3) + DN_DX(2,1)*data.U(2,3) + DN_DX(3,1)*data.U(3,3);
            const double crhs_gauss105 = crhs_gauss15*crhs_gauss35;
            const double crhs_gauss106 = crhs_gauss29*crhs_gauss67;
            const double crhs_gauss107 = crhs_gauss106*crhs_gauss23;
            const double crhs_gauss108 = -crhs_gauss36;
            const double crhs_gauss109 = crhs_gauss108 + crhs_gauss85;
            const double crhs_gauss110 = crhs_gauss109*crhs_gauss82;
            const double crhs_gauss111 = crhs_gauss17*crhs_gauss29;
            const double crhs_gauss112 = crhs_gauss35*crhs_gauss82;
            const double crhs_gauss113 = crhs_gauss104*crhs_gauss45 + crhs_gauss105*crhs_gauss23 + crhs_gauss107 + crhs_gauss110*crhs_gauss20 - crhs_gauss111*crhs_gauss112;
            const double crhs_gauss114 = crhs_gauss97*(N(0)*data.ResProj(0,2) + N(0)*data.dUdt(0,2) + N(1)*data.ResProj(1,2) + N(1)*data.dUdt(1,2) + N(2)*data.ResProj(2,2) + N(2)*data.dUdt(2,2) + N(3)*data.ResProj(3,2) + N(3)*data.dUdt(3,2) + crhs_gauss101*crhs_gauss60 + crhs_gauss103*crhs_gauss71 + crhs_gauss113 - crhs_gauss99);
            const double crhs_gauss115 = DN_DX(0,1)*crhs_gauss82;
            const double crhs_gauss116 = crhs_gauss22*crhs_gauss67;
            const double crhs_gauss117 = crhs_gauss22*crhs_gauss77;
            const double crhs_gauss118 = crhs_gauss17*crhs_gauss35;
            const double crhs_gauss119 = crhs_gauss20*crhs_gauss29;
            const double crhs_gauss120 = crhs_gauss95*(crhs_gauss116 + crhs_gauss117 - crhs_gauss118 - crhs_gauss119);
            const double crhs_gauss121 = crhs_gauss15*crhs_gauss22;
            const double crhs_gauss122 = -crhs_gauss111 + crhs_gauss121;
            const double crhs_gauss123 = 2*crhs_gauss95;
            const double crhs_gauss124 = crhs_gauss10*crhs_gauss22;
            const double crhs_gauss125 = crhs_gauss124 - crhs_gauss88;
            const double crhs_gauss126 = (crhs_gauss122 + crhs_gauss125)*(-N(0)*data.beta_sc_nodes(0) - N(1)*data.beta_sc_nodes(1) - N(2)*data.beta_sc_nodes(2) - N(3)*data.beta_sc_nodes(3) + 0.66666666666666663*crhs_gauss91 + 0.66666666666666663*crhs_gauss92 + 0.66666666666666663*crhs_gauss93 + 0.66666666666666663*crhs_gauss94 + 0.66666666666666663*data.mu);
            const double crhs_gauss127 = crhs_gauss122*crhs_gauss123 + crhs_gauss126;
            const double crhs_gauss128 = DN_DX(0,0)*crhs_gauss82;
            const double crhs_gauss129 = crhs_gauss58 - 3.0;
            const double crhs_gauss130 = -crhs_gauss129*crhs_gauss62 - crhs_gauss46*crhs_gauss69 + crhs_gauss90;
            const double crhs_gauss131 = N(0)*crhs_gauss51;
            const double crhs_gauss132 = DN_DX(0,1)*crhs_gauss29;
            const double crhs_gauss133 = crhs_gauss112*crhs_gauss132;
            const double crhs_gauss134 = crhs_gauss23*crhs_gauss88;
            const double crhs_gauss135 = crhs_gauss134*crhs_gauss29;
            const double crhs_gauss136 = -2*crhs_gauss135 + crhs_gauss78 + crhs_gauss80;
            const double crhs_gauss137 = N(0)*crhs_gauss82;
            const double crhs_gauss138 = crhs_gauss35*crhs_gauss84;
            const double crhs_gauss139 = crhs_gauss29*crhs_gauss84;
            const double crhs_gauss140 = crhs_gauss138*crhs_gauss67 - crhs_gauss15*(-crhs_gauss139 + crhs_gauss29) - crhs_gauss17*crhs_gauss23*crhs_gauss86;
            const double crhs_gauss141 = 2*crhs_gauss137;
            const double crhs_gauss142 = DN_DX(0,0)*crhs_gauss35;
            const double crhs_gauss143 = 1.0*crhs_gauss45;
            const double crhs_gauss144 = crhs_gauss119*crhs_gauss23 - crhs_gauss73 - crhs_gauss74 - crhs_gauss75 - crhs_gauss76;
            const double crhs_gauss145 = N(0)*crhs_gauss144;
            const double crhs_gauss146 = crhs_gauss59 + 1.0;
            const double crhs_gauss147 = crhs_gauss118*crhs_gauss23 - crhs_gauss63 - crhs_gauss64 - crhs_gauss65 - crhs_gauss66;
            const double crhs_gauss148 = N(0)*crhs_gauss147;
            const double crhs_gauss149 = crhs_gauss114*crhs_gauss23;
            const double crhs_gauss150 = DN_DX(0,0)*crhs_gauss29;
            const double crhs_gauss151 = crhs_gauss111*crhs_gauss23;
            const double crhs_gauss152 = -crhs_gauss11 - crhs_gauss12 - crhs_gauss13 - crhs_gauss14 + crhs_gauss151;
            const double crhs_gauss153 = N(0)*crhs_gauss152;
            const double crhs_gauss154 = DN_DX(0,1)*crhs_gauss35;
            const double crhs_gauss155 = crhs_gauss134 - crhs_gauss6 - crhs_gauss7 - crhs_gauss8 - crhs_gauss9;
            const double crhs_gauss156 = N(0)*crhs_gauss155;
            const double crhs_gauss157 = crhs_gauss154 - crhs_gauss156;
            const double crhs_gauss158 = crhs_gauss23*crhs_gauss98;
            const double crhs_gauss159 = (N(0)*data.lamb_sc_nodes(0) + N(1)*data.lamb_sc_nodes(1) + N(2)*data.lamb_sc_nodes(2) + N(3)*data.lamb_sc_nodes(3) + data.lambda)/data.c_v;
            const double crhs_gauss160 = crhs_gauss22*crhs_gauss49;
            const double crhs_gauss161 = crhs_gauss29*crhs_gauss51;
            const double crhs_gauss162 = crhs_gauss35*crhs_gauss52;
            const double crhs_gauss163 = crhs_gauss29*data.gamma;
            const double crhs_gauss164 = crhs_gauss163*crhs_gauss72;
            const double crhs_gauss165 = crhs_gauss35*data.gamma;
            const double crhs_gauss166 = crhs_gauss104*crhs_gauss165;
            const double crhs_gauss167 = 1.0*crhs_gauss106;
            const double crhs_gauss168 = 1.0*crhs_gauss78;
            const double crhs_gauss169 = crhs_gauss168*crhs_gauss29;
            const double crhs_gauss170 = 1.0*crhs_gauss111;
            const double crhs_gauss171 = pow(crhs_gauss22, -3);
            const double crhs_gauss172 = crhs_gauss30*data.gamma;
            const double crhs_gauss173 = crhs_gauss36*data.gamma;
            const double crhs_gauss174 = crhs_gauss22*crhs_gauss43;
            const double crhs_gauss175 = crhs_gauss174*data.gamma;
            const double crhs_gauss176 = crhs_gauss171*(crhs_gauss108 + crhs_gauss172 + crhs_gauss173 - crhs_gauss175 + crhs_gauss83);
            const double crhs_gauss177 = 1.0*crhs_gauss30;
            const double crhs_gauss178 = crhs_gauss174 - crhs_gauss45*(-crhs_gauss174 + crhs_gauss38);
            const double crhs_gauss179 = crhs_gauss177*crhs_gauss70 + crhs_gauss178;
            const double crhs_gauss180 = 1.0*crhs_gauss36;
            const double crhs_gauss181 = crhs_gauss178 + crhs_gauss180*crhs_gauss70;
            const double crhs_gauss182 = (N(0)*data.ResProj(0,3) + N(0)*data.dUdt(0,3) + N(1)*data.ResProj(1,3) + N(1)*data.dUdt(1,3) + N(2)*data.ResProj(2,3) + N(2)*data.dUdt(2,3) + N(3)*data.ResProj(3,3) + N(3)*data.dUdt(3,3) + crhs_gauss10*crhs_gauss181*crhs_gauss82 + crhs_gauss112*crhs_gauss167*crhs_gauss70 + crhs_gauss15*crhs_gauss179*crhs_gauss82 - crhs_gauss160 - crhs_gauss161 - crhs_gauss162 + crhs_gauss164*crhs_gauss23 + crhs_gauss166*crhs_gauss23 + crhs_gauss169*crhs_gauss70*crhs_gauss82 + crhs_gauss170*crhs_gauss176 + 1.0*crhs_gauss176*crhs_gauss88)/(crhs_gauss159*crhs_gauss48*crhs_gauss96 + crhs_gauss54);
            const double crhs_gauss183 = crhs_gauss143*crhs_gauss182;
            const double crhs_gauss184 = crhs_gauss123*crhs_gauss125 + crhs_gauss126;
            const double crhs_gauss185 = -crhs_gauss101*crhs_gauss129 - crhs_gauss103*crhs_gauss46 + crhs_gauss113;
            const double crhs_gauss186 = N(0)*crhs_gauss52;
            const double crhs_gauss187 = crhs_gauss112*crhs_gauss150;
            const double crhs_gauss188 = crhs_gauss151*crhs_gauss35;
            const double crhs_gauss189 = crhs_gauss105 + crhs_gauss106 - 2*crhs_gauss188;
            const double crhs_gauss190 = -crhs_gauss10*(-crhs_gauss138 + crhs_gauss35) - crhs_gauss109*crhs_gauss20*crhs_gauss23 + crhs_gauss139*crhs_gauss77;
            const double crhs_gauss191 = crhs_gauss150 - crhs_gauss153;
            const double crhs_gauss192 = crhs_gauss160 + crhs_gauss161 + crhs_gauss162;
            const double crhs_gauss193 = 1.0*crhs_gauss159;
            const double crhs_gauss194 = crhs_gauss171*(crhs_gauss120*crhs_gauss35 + crhs_gauss127*crhs_gauss29 + crhs_gauss193*(-crhs_gauss116*crhs_gauss35 - crhs_gauss121*crhs_gauss29 - crhs_gauss17*crhs_gauss174 + crhs_gauss17*crhs_gauss30 + crhs_gauss17*crhs_gauss36 + crhs_gauss72*crhs_gauss81));
            const double crhs_gauss195 = crhs_gauss171*(crhs_gauss120*crhs_gauss29 + crhs_gauss184*crhs_gauss35 + crhs_gauss193*(crhs_gauss104*crhs_gauss81 - crhs_gauss117*crhs_gauss29 - crhs_gauss124*crhs_gauss35 - crhs_gauss174*crhs_gauss20 + crhs_gauss20*crhs_gauss30 + crhs_gauss20*crhs_gauss36));
            const double crhs_gauss196 = -crhs_gauss172 - crhs_gauss173 + crhs_gauss175 + crhs_gauss37;
            const double crhs_gauss197 = 1.0*crhs_gauss196;
            const double crhs_gauss198 = -crhs_gauss177*crhs_gauss45 + crhs_gauss178;
            const double crhs_gauss199 = crhs_gauss178 - crhs_gauss180*crhs_gauss45;
            const double crhs_gauss200 = crhs_gauss23*(crhs_gauss100*crhs_gauss199 + crhs_gauss164 + crhs_gauss166 - crhs_gauss167*crhs_gauss35*crhs_gauss46 - crhs_gauss169*crhs_gauss46 - crhs_gauss170*crhs_gauss196*crhs_gauss82 - crhs_gauss197*crhs_gauss89 + crhs_gauss198*crhs_gauss61);
            const double crhs_gauss201 = 2.0*crhs_gauss135 - crhs_gauss168 - 1.0*crhs_gauss80;
            const double crhs_gauss202 = crhs_gauss137*crhs_gauss45;
            const double crhs_gauss203 = 3.0*crhs_gauss45;
            const double crhs_gauss204 = crhs_gauss22*crhs_gauss45 + crhs_gauss22;
            const double crhs_gauss205 = 2*crhs_gauss23;
            const double crhs_gauss206 = -crhs_gauss39 - crhs_gauss40 - crhs_gauss41 - crhs_gauss42 + crhs_gauss43*crhs_gauss70;
            const double crhs_gauss207 = -crhs_gauss143*crhs_gauss68 - crhs_gauss15*crhs_gauss203*crhs_gauss29 - crhs_gauss17*(crhs_gauss179*crhs_gauss205 + crhs_gauss206) + crhs_gauss204*crhs_gauss72;
            const double crhs_gauss208 = -1.0*crhs_gauss105 - crhs_gauss167 + 2.0*crhs_gauss188;
            const double crhs_gauss209 = -crhs_gauss10*crhs_gauss203*crhs_gauss35 - crhs_gauss102*crhs_gauss143 + crhs_gauss104*crhs_gauss204 - crhs_gauss20*(crhs_gauss181*crhs_gauss205 + crhs_gauss206);
            const double crhs_gauss210 = crhs_gauss182*crhs_gauss23*crhs_gauss58;
            const double crhs_gauss211 = crhs_gauss171*crhs_gauss197;
            const double crhs_gauss212 = 2.0*crhs_gauss165 - 2.0*crhs_gauss31 - 2.0*crhs_gauss32 - 2.0*crhs_gauss33 - 2.0*crhs_gauss34;
            const double crhs_gauss213 = crhs_gauss23*(3.0*crhs_gauss172 + 3.0*crhs_gauss173 - 3.0*crhs_gauss175 - 3.0*crhs_gauss30 - 3.0*crhs_gauss36) + crhs_gauss43*crhs_gauss58;
            const double crhs_gauss214 = 2.0*crhs_gauss163 - 2.0*crhs_gauss25 - 2.0*crhs_gauss26 - 2.0*crhs_gauss27 - 2.0*crhs_gauss28;
            const double crhs_gauss215 = -crhs_gauss174*crhs_gauss58 - crhs_gauss177 - crhs_gauss180 + crhs_gauss30*crhs_gauss58 + crhs_gauss36*crhs_gauss58;
            const double crhs_gauss216 = -crhs_gauss107*crhs_gauss212 + crhs_gauss151*crhs_gauss213 + crhs_gauss29*crhs_gauss58*crhs_gauss72 - crhs_gauss61*(crhs_gauss214*crhs_gauss29 + crhs_gauss215);
            const double crhs_gauss217 = -crhs_gauss100*(crhs_gauss212*crhs_gauss35 + crhs_gauss215) + crhs_gauss104*crhs_gauss35*crhs_gauss58 + crhs_gauss134*crhs_gauss213 - crhs_gauss214*crhs_gauss79;
            const double crhs_gauss218 = N(1)*crhs_gauss4;
            const double crhs_gauss219 = DN_DX(1,1)*crhs_gauss82;
            const double crhs_gauss220 = DN_DX(1,0)*crhs_gauss82;
            const double crhs_gauss221 = N(1)*crhs_gauss51;
            const double crhs_gauss222 = DN_DX(1,1)*crhs_gauss29;
            const double crhs_gauss223 = crhs_gauss112*crhs_gauss222;
            const double crhs_gauss224 = N(1)*crhs_gauss82;
            const double crhs_gauss225 = 2*crhs_gauss224;
            const double crhs_gauss226 = DN_DX(1,0)*crhs_gauss35;
            const double crhs_gauss227 = N(1)*crhs_gauss144;
            const double crhs_gauss228 = N(1)*crhs_gauss147;
            const double crhs_gauss229 = DN_DX(1,0)*crhs_gauss29;
            const double crhs_gauss230 = N(1)*crhs_gauss152;
            const double crhs_gauss231 = DN_DX(1,1)*crhs_gauss35;
            const double crhs_gauss232 = N(1)*crhs_gauss155;
            const double crhs_gauss233 = crhs_gauss231 - crhs_gauss232;
            const double crhs_gauss234 = N(1)*crhs_gauss52;
            const double crhs_gauss235 = crhs_gauss112*crhs_gauss229;
            const double crhs_gauss236 = crhs_gauss229 - crhs_gauss230;
            const double crhs_gauss237 = crhs_gauss224*crhs_gauss45;
            const double crhs_gauss238 = N(2)*crhs_gauss4;
            const double crhs_gauss239 = DN_DX(2,1)*crhs_gauss82;
            const double crhs_gauss240 = DN_DX(2,0)*crhs_gauss82;
            const double crhs_gauss241 = N(2)*crhs_gauss51;
            const double crhs_gauss242 = DN_DX(2,1)*crhs_gauss29;
            const double crhs_gauss243 = crhs_gauss112*crhs_gauss242;
            const double crhs_gauss244 = N(2)*crhs_gauss82;
            const double crhs_gauss245 = 2*crhs_gauss244;
            const double crhs_gauss246 = DN_DX(2,0)*crhs_gauss35;
            const double crhs_gauss247 = N(2)*crhs_gauss144;
            const double crhs_gauss248 = N(2)*crhs_gauss147;
            const double crhs_gauss249 = DN_DX(2,0)*crhs_gauss29;
            const double crhs_gauss250 = N(2)*crhs_gauss152;
            const double crhs_gauss251 = DN_DX(2,1)*crhs_gauss35;
            const double crhs_gauss252 = N(2)*crhs_gauss155;
            const double crhs_gauss253 = crhs_gauss251 - crhs_gauss252;
            const double crhs_gauss254 = N(2)*crhs_gauss52;
            const double crhs_gauss255 = crhs_gauss112*crhs_gauss249;
            const double crhs_gauss256 = crhs_gauss249 - crhs_gauss250;
            const double crhs_gauss257 = crhs_gauss244*crhs_gauss45;
            const double crhs_gauss258 = N(3)*crhs_gauss4;
            const double crhs_gauss259 = DN_DX(3,1)*crhs_gauss82;
            const double crhs_gauss260 = DN_DX(3,0)*crhs_gauss82;
            const double crhs_gauss261 = N(3)*crhs_gauss51;
            const double crhs_gauss262 = DN_DX(3,1)*crhs_gauss29;
            const double crhs_gauss263 = crhs_gauss112*crhs_gauss262;
            const double crhs_gauss264 = N(3)*crhs_gauss82;
            const double crhs_gauss265 = 2*crhs_gauss264;
            const double crhs_gauss266 = DN_DX(3,0)*crhs_gauss35;
            const double crhs_gauss267 = N(3)*crhs_gauss144;
            const double crhs_gauss268 = N(3)*crhs_gauss147;
            const double crhs_gauss269 = DN_DX(3,0)*crhs_gauss29;
            const double crhs_gauss270 = N(3)*crhs_gauss152;
            const double crhs_gauss271 = DN_DX(3,1)*crhs_gauss35;
            const double crhs_gauss272 = N(3)*crhs_gauss155;
            const double crhs_gauss273 = crhs_gauss271 - crhs_gauss272;
            const double crhs_gauss274 = N(3)*crhs_gauss52;
            const double crhs_gauss275 = crhs_gauss112*crhs_gauss269;
            const double crhs_gauss276 = crhs_gauss269 - crhs_gauss270;
            const double crhs_gauss277 = crhs_gauss264*crhs_gauss45;
            rhs_gauss[0] = DN_DX(0,0)*crhs_gauss19 - DN_DX(0,0)*crhs_gauss98 - DN_DX(0,1)*crhs_gauss114 + DN_DX(0,1)*crhs_gauss21 - N(0)*crhs_gauss16 - crhs_gauss5*crhs_gauss56 + crhs_gauss5;
            rhs_gauss[1] = -DN_DX(0,0)*crhs_gauss183 - N(0)*crhs_gauss130 + N(0)*crhs_gauss57 - crhs_gauss115*crhs_gauss120 - crhs_gauss127*crhs_gauss128 - crhs_gauss149*(crhs_gauss132 - crhs_gauss142*crhs_gauss143 - crhs_gauss145 - crhs_gauss146*crhs_gauss148) - crhs_gauss158*(-crhs_gauss129*crhs_gauss150 - crhs_gauss153*crhs_gauss60 + crhs_gauss157) - crhs_gauss55*(DN_DX(0,0)*crhs_gauss87 + crhs_gauss131 - crhs_gauss133 - crhs_gauss136*crhs_gauss137 + crhs_gauss140*crhs_gauss141);
            rhs_gauss[2] = -DN_DX(0,1)*crhs_gauss183 - N(0)*crhs_gauss185 + N(0)*crhs_gauss99 - crhs_gauss115*crhs_gauss184 - crhs_gauss120*crhs_gauss128 - crhs_gauss149*(-crhs_gauss129*crhs_gauss154 - crhs_gauss156*crhs_gauss60 + crhs_gauss191) - crhs_gauss158*(-crhs_gauss132*crhs_gauss143 + crhs_gauss142 - crhs_gauss145*crhs_gauss146 - crhs_gauss148) - crhs_gauss55*(DN_DX(0,1)*crhs_gauss110 - crhs_gauss137*crhs_gauss189 + crhs_gauss141*crhs_gauss190 + crhs_gauss186 - crhs_gauss187);
            rhs_gauss[3] = -DN_DX(0,0)*crhs_gauss194 - DN_DX(0,1)*crhs_gauss195 + N(0)*crhs_gauss192 - N(0)*crhs_gauss200 - crhs_gauss114*(crhs_gauss115*crhs_gauss199 + crhs_gauss137*crhs_gauss209 - crhs_gauss143*crhs_gauss187 + crhs_gauss186 + crhs_gauss202*crhs_gauss208) - crhs_gauss210*(crhs_gauss157 + crhs_gauss191) - crhs_gauss55*(N(0)*crhs_gauss49 - crhs_gauss137*crhs_gauss216 - crhs_gauss137*crhs_gauss217 - crhs_gauss150*crhs_gauss211 - crhs_gauss154*crhs_gauss211) - crhs_gauss98*(crhs_gauss128*crhs_gauss198 + crhs_gauss131 - crhs_gauss133*crhs_gauss143 + crhs_gauss137*crhs_gauss207 + crhs_gauss201*crhs_gauss202);
            rhs_gauss[4] = DN_DX(1,0)*crhs_gauss19 - DN_DX(1,0)*crhs_gauss98 - DN_DX(1,1)*crhs_gauss114 + DN_DX(1,1)*crhs_gauss21 - N(1)*crhs_gauss16 - crhs_gauss218*crhs_gauss56 + crhs_gauss218;
            rhs_gauss[5] = -DN_DX(1,0)*crhs_gauss183 - N(1)*crhs_gauss130 + N(1)*crhs_gauss57 - crhs_gauss120*crhs_gauss219 - crhs_gauss127*crhs_gauss220 - crhs_gauss149*(-crhs_gauss143*crhs_gauss226 - crhs_gauss146*crhs_gauss228 + crhs_gauss222 - crhs_gauss227) - crhs_gauss158*(-crhs_gauss129*crhs_gauss229 - crhs_gauss230*crhs_gauss60 + crhs_gauss233) - crhs_gauss55*(DN_DX(1,0)*crhs_gauss87 - crhs_gauss136*crhs_gauss224 + crhs_gauss140*crhs_gauss225 + crhs_gauss221 - crhs_gauss223);
            rhs_gauss[6] = -DN_DX(1,1)*crhs_gauss183 - N(1)*crhs_gauss185 + N(1)*crhs_gauss99 - crhs_gauss120*crhs_gauss220 - crhs_gauss149*(-crhs_gauss129*crhs_gauss231 - crhs_gauss232*crhs_gauss60 + crhs_gauss236) - crhs_gauss158*(-crhs_gauss143*crhs_gauss222 - crhs_gauss146*crhs_gauss227 + crhs_gauss226 - crhs_gauss228) - crhs_gauss184*crhs_gauss219 - crhs_gauss55*(DN_DX(1,1)*crhs_gauss110 - crhs_gauss189*crhs_gauss224 + crhs_gauss190*crhs_gauss225 + crhs_gauss234 - crhs_gauss235);
            rhs_gauss[7] = -DN_DX(1,0)*crhs_gauss194 - DN_DX(1,1)*crhs_gauss195 + N(1)*crhs_gauss192 - N(1)*crhs_gauss200 - crhs_gauss114*(-crhs_gauss143*crhs_gauss235 + crhs_gauss199*crhs_gauss219 + crhs_gauss208*crhs_gauss237 + crhs_gauss209*crhs_gauss224 + crhs_gauss234) - crhs_gauss210*(crhs_gauss233 + crhs_gauss236) - crhs_gauss55*(N(1)*crhs_gauss49 - crhs_gauss211*crhs_gauss229 - crhs_gauss211*crhs_gauss231 - crhs_gauss216*crhs_gauss224 - crhs_gauss217*crhs_gauss224) - crhs_gauss98*(-crhs_gauss143*crhs_gauss223 + crhs_gauss198*crhs_gauss220 + crhs_gauss201*crhs_gauss237 + crhs_gauss207*crhs_gauss224 + crhs_gauss221);
            rhs_gauss[8] = DN_DX(2,0)*crhs_gauss19 - DN_DX(2,0)*crhs_gauss98 - DN_DX(2,1)*crhs_gauss114 + DN_DX(2,1)*crhs_gauss21 - N(2)*crhs_gauss16 - crhs_gauss238*crhs_gauss56 + crhs_gauss238;
            rhs_gauss[9] = -DN_DX(2,0)*crhs_gauss183 - N(2)*crhs_gauss130 + N(2)*crhs_gauss57 - crhs_gauss120*crhs_gauss239 - crhs_gauss127*crhs_gauss240 - crhs_gauss149*(-crhs_gauss143*crhs_gauss246 - crhs_gauss146*crhs_gauss248 + crhs_gauss242 - crhs_gauss247) - crhs_gauss158*(-crhs_gauss129*crhs_gauss249 - crhs_gauss250*crhs_gauss60 + crhs_gauss253) - crhs_gauss55*(DN_DX(2,0)*crhs_gauss87 - crhs_gauss136*crhs_gauss244 + crhs_gauss140*crhs_gauss245 + crhs_gauss241 - crhs_gauss243);
            rhs_gauss[10] = -DN_DX(2,1)*crhs_gauss183 - N(2)*crhs_gauss185 + N(2)*crhs_gauss99 - crhs_gauss120*crhs_gauss240 - crhs_gauss149*(-crhs_gauss129*crhs_gauss251 - crhs_gauss252*crhs_gauss60 + crhs_gauss256) - crhs_gauss158*(-crhs_gauss143*crhs_gauss242 - crhs_gauss146*crhs_gauss247 + crhs_gauss246 - crhs_gauss248) - crhs_gauss184*crhs_gauss239 - crhs_gauss55*(DN_DX(2,1)*crhs_gauss110 - crhs_gauss189*crhs_gauss244 + crhs_gauss190*crhs_gauss245 + crhs_gauss254 - crhs_gauss255);
            rhs_gauss[11] = -DN_DX(2,0)*crhs_gauss194 - DN_DX(2,1)*crhs_gauss195 + N(2)*crhs_gauss192 - N(2)*crhs_gauss200 - crhs_gauss114*(-crhs_gauss143*crhs_gauss255 + crhs_gauss199*crhs_gauss239 + crhs_gauss208*crhs_gauss257 + crhs_gauss209*crhs_gauss244 + crhs_gauss254) - crhs_gauss210*(crhs_gauss253 + crhs_gauss256) - crhs_gauss55*(N(2)*crhs_gauss49 - crhs_gauss211*crhs_gauss249 - crhs_gauss211*crhs_gauss251 - crhs_gauss216*crhs_gauss244 - crhs_gauss217*crhs_gauss244) - crhs_gauss98*(-crhs_gauss143*crhs_gauss243 + crhs_gauss198*crhs_gauss240 + crhs_gauss201*crhs_gauss257 + crhs_gauss207*crhs_gauss244 + crhs_gauss241);
            rhs_gauss[12] = DN_DX(3,0)*crhs_gauss19 - DN_DX(3,0)*crhs_gauss98 - DN_DX(3,1)*crhs_gauss114 + DN_DX(3,1)*crhs_gauss21 - N(3)*crhs_gauss16 - crhs_gauss258*crhs_gauss56 + crhs_gauss258;
            rhs_gauss[13] = -DN_DX(3,0)*crhs_gauss183 - N(3)*crhs_gauss130 + N(3)*crhs_gauss57 - crhs_gauss120*crhs_gauss259 - crhs_gauss127*crhs_gauss260 - crhs_gauss149*(-crhs_gauss143*crhs_gauss266 - crhs_gauss146*crhs_gauss268 + crhs_gauss262 - crhs_gauss267) - crhs_gauss158*(-crhs_gauss129*crhs_gauss269 - crhs_gauss270*crhs_gauss60 + crhs_gauss273) - crhs_gauss55*(DN_DX(3,0)*crhs_gauss87 - crhs_gauss136*crhs_gauss264 + crhs_gauss140*crhs_gauss265 + crhs_gauss261 - crhs_gauss263);
            rhs_gauss[14] = -DN_DX(3,1)*crhs_gauss183 - N(3)*crhs_gauss185 + N(3)*crhs_gauss99 - crhs_gauss120*crhs_gauss260 - crhs_gauss149*(-crhs_gauss129*crhs_gauss271 - crhs_gauss272*crhs_gauss60 + crhs_gauss276) - crhs_gauss158*(-crhs_gauss143*crhs_gauss262 - crhs_gauss146*crhs_gauss267 + crhs_gauss266 - crhs_gauss268) - crhs_gauss184*crhs_gauss259 - crhs_gauss55*(DN_DX(3,1)*crhs_gauss110 - crhs_gauss189*crhs_gauss264 + crhs_gauss190*crhs_gauss265 + crhs_gauss274 - crhs_gauss275);
            rhs_gauss[15] = -DN_DX(3,0)*crhs_gauss194 - DN_DX(3,1)*crhs_gauss195 + N(3)*crhs_gauss192 - N(3)*crhs_gauss200 - crhs_gauss114*(-crhs_gauss143*crhs_gauss275 + crhs_gauss199*crhs_gauss259 + crhs_gauss208*crhs_gauss277 + crhs_gauss209*crhs_gauss264 + crhs_gauss274) - crhs_gauss210*(crhs_gauss273 + crhs_gauss276) - crhs_gauss55*(N(3)*crhs_gauss49 - crhs_gauss211*crhs_gauss269 - crhs_gauss211*crhs_gauss271 - crhs_gauss216*crhs_gauss264 - crhs_gauss217*crhs_gauss264) - crhs_gauss98*(-crhs_gauss143*crhs_gauss263 + crhs_gauss198*crhs_gauss260 + crhs_gauss201*crhs_gauss277 + crhs_gauss207*crhs_gauss264 + crhs_gauss261);


            rRightHandSideBoundedVector += w * detJ * rhs_gauss;
        }
    }
    else
    {
        for(const auto& gauss_point: gauss_points)
        {

            const double w = gauss_point.Weight();
            r_geometry.ShapeFunctionsValues(N, gauss_point.Coordinates());

            double detJ;
            r_geometry.Jacobian(J, gauss_point.Coordinates());
            MathUtils<double>::InvertMatrix(J, Jinv, detJ);

            r_geometry.ShapeFunctionsLocalGradients(DN_De, gauss_point.Coordinates());
            GeometryUtils::ShapeFunctionsGradients(DN_De, Jinv, DN_DX);

            BoundedVector<double, DofSize> rhs_gauss(DofSize);

            const double crhs_gauss0 = N(0)*data.m_ext(0);
            const double crhs_gauss1 = N(1)*data.m_ext(1);
            const double crhs_gauss2 = N(2)*data.m_ext(2);
            const double crhs_gauss3 = N(3)*data.m_ext(3);
            const double crhs_gauss4 = crhs_gauss0 + crhs_gauss1 + crhs_gauss2 + crhs_gauss3;
            const double crhs_gauss5 = N(0)*crhs_gauss4;
            const double crhs_gauss6 = DN_DX(0,1)*data.U(0,2);
            const double crhs_gauss7 = DN_DX(1,1)*data.U(1,2);
            const double crhs_gauss8 = DN_DX(2,1)*data.U(2,2);
            const double crhs_gauss9 = DN_DX(3,1)*data.U(3,2);
            const double crhs_gauss10 = crhs_gauss6 + crhs_gauss7 + crhs_gauss8 + crhs_gauss9;
            const double crhs_gauss11 = DN_DX(0,0)*data.U(0,1);
            const double crhs_gauss12 = DN_DX(1,0)*data.U(1,1);
            const double crhs_gauss13 = DN_DX(2,0)*data.U(2,1);
            const double crhs_gauss14 = DN_DX(3,0)*data.U(3,1);
            const double crhs_gauss15 = crhs_gauss11 + crhs_gauss12 + crhs_gauss13 + crhs_gauss14;
            const double crhs_gauss16 = crhs_gauss10 + crhs_gauss15;
            const double crhs_gauss17 = DN_DX(0,0)*data.U(0,0) + DN_DX(1,0)*data.U(1,0) + DN_DX(2,0)*data.U(2,0) + DN_DX(3,0)*data.U(3,0);
            const double crhs_gauss18 = N(0)*data.alpha_sc_nodes(0) + N(1)*data.alpha_sc_nodes(1) + N(2)*data.alpha_sc_nodes(2) + N(3)*data.alpha_sc_nodes(3);
            const double crhs_gauss19 = crhs_gauss17*crhs_gauss18;
            const double crhs_gauss20 = DN_DX(0,1)*data.U(0,0) + DN_DX(1,1)*data.U(1,0) + DN_DX(2,1)*data.U(2,0) + DN_DX(3,1)*data.U(3,0);
            const double crhs_gauss21 = crhs_gauss18*crhs_gauss20;
            const double crhs_gauss22 = N(0)*data.U(0,0) + N(1)*data.U(1,0) + N(2)*data.U(2,0) + N(3)*data.U(3,0);
            const double crhs_gauss23 = 1.0/crhs_gauss22;
            const double crhs_gauss24 = fabs(crhs_gauss22);
            const double crhs_gauss25 = N(0)*data.U(0,1);
            const double crhs_gauss26 = N(1)*data.U(1,1);
            const double crhs_gauss27 = N(2)*data.U(2,1);
            const double crhs_gauss28 = N(3)*data.U(3,1);
            const double crhs_gauss29 = crhs_gauss25 + crhs_gauss26 + crhs_gauss27 + crhs_gauss28;
            const double crhs_gauss30 = pow(crhs_gauss29, 2);
            const double crhs_gauss31 = N(0)*data.U(0,2);
            const double crhs_gauss32 = N(1)*data.U(1,2);
            const double crhs_gauss33 = N(2)*data.U(2,2);
            const double crhs_gauss34 = N(3)*data.U(3,2);
            const double crhs_gauss35 = crhs_gauss31 + crhs_gauss32 + crhs_gauss33 + crhs_gauss34;
            const double crhs_gauss36 = pow(crhs_gauss35, 2);
            const double crhs_gauss37 = crhs_gauss30 + crhs_gauss36;
            const double crhs_gauss38 = 0.5*crhs_gauss30 + 0.5*crhs_gauss36;
            const double crhs_gauss39 = N(0)*data.U(0,3);
            const double crhs_gauss40 = N(1)*data.U(1,3);
            const double crhs_gauss41 = N(2)*data.U(2,3);
            const double crhs_gauss42 = N(3)*data.U(3,3);
            const double crhs_gauss43 = crhs_gauss39 + crhs_gauss40 + crhs_gauss41 + crhs_gauss42;
            const double crhs_gauss44 = -crhs_gauss23*crhs_gauss38 + crhs_gauss43;
            const double crhs_gauss45 = data.gamma - 1;
            const double crhs_gauss46 = crhs_gauss23*crhs_gauss45;
            const double crhs_gauss47 = crhs_gauss44*crhs_gauss46;
            const double crhs_gauss48 = 1.0/data.gamma;
            const double crhs_gauss49 = N(0)*data.r_ext(0) + N(1)*data.r_ext(1) + N(2)*data.r_ext(2) + N(3)*data.r_ext(3);
            const double crhs_gauss50 = pow(crhs_gauss49, 2);
            const double crhs_gauss51 = N(0)*data.f_ext(0,0) + N(1)*data.f_ext(1,0) + N(2)*data.f_ext(2,0) + N(3)*data.f_ext(3,0);
            const double crhs_gauss52 = N(0)*data.f_ext(0,1) + N(1)*data.f_ext(1,1) + N(2)*data.f_ext(2,1) + N(3)*data.f_ext(3,1);
            const double crhs_gauss53 = crhs_gauss47*data.gamma*(pow(crhs_gauss51, 2) + pow(crhs_gauss52, 2));
            const double crhs_gauss54 = 0.70710678118654757*crhs_gauss24*crhs_gauss48*stab_c3*sqrt((crhs_gauss50 + 2.0*crhs_gauss53 + 2.0*sqrt(0.25*crhs_gauss50 + crhs_gauss53)*fabs(crhs_gauss49))/(pow(crhs_gauss44, 2)*pow(crhs_gauss45, 2))) + stab_c2*(sqrt(crhs_gauss47)*sqrt(data.gamma) + sqrt(crhs_gauss37)/crhs_gauss24)/data.h;
            const double crhs_gauss55 = 1.0*(N(0)*data.dUdt(0,0) + N(1)*data.dUdt(1,0) + N(2)*data.dUdt(2,0) + N(3)*data.dUdt(3,0) - crhs_gauss0 - crhs_gauss1 + crhs_gauss16 - crhs_gauss2 - crhs_gauss3)/crhs_gauss54;
            const double crhs_gauss56 = crhs_gauss23*crhs_gauss55;
            const double crhs_gauss57 = crhs_gauss22*crhs_gauss51;
            const double crhs_gauss58 = 1.0*data.gamma;
            const double crhs_gauss59 = -crhs_gauss58;
            const double crhs_gauss60 = crhs_gauss59 + 3.0;
            const double crhs_gauss61 = crhs_gauss15*crhs_gauss23;
            const double crhs_gauss62 = crhs_gauss29*crhs_gauss61;
            const double crhs_gauss63 = DN_DX(0,0)*data.U(0,2);
            const double crhs_gauss64 = DN_DX(1,0)*data.U(1,2);
            const double crhs_gauss65 = DN_DX(2,0)*data.U(2,2);
            const double crhs_gauss66 = DN_DX(3,0)*data.U(3,2);
            const double crhs_gauss67 = crhs_gauss63 + crhs_gauss64 + crhs_gauss65 + crhs_gauss66;
            const double crhs_gauss68 = crhs_gauss35*crhs_gauss67;
            const double crhs_gauss69 = 1.0*crhs_gauss68;
            const double crhs_gauss70 = 1 - data.gamma;
            const double crhs_gauss71 = crhs_gauss23*crhs_gauss70;
            const double crhs_gauss72 = DN_DX(0,0)*data.U(0,3) + DN_DX(1,0)*data.U(1,3) + DN_DX(2,0)*data.U(2,3) + DN_DX(3,0)*data.U(3,3);
            const double crhs_gauss73 = DN_DX(0,1)*data.U(0,1);
            const double crhs_gauss74 = DN_DX(1,1)*data.U(1,1);
            const double crhs_gauss75 = DN_DX(2,1)*data.U(2,1);
            const double crhs_gauss76 = DN_DX(3,1)*data.U(3,1);
            const double crhs_gauss77 = crhs_gauss73 + crhs_gauss74 + crhs_gauss75 + crhs_gauss76;
            const double crhs_gauss78 = crhs_gauss35*crhs_gauss77;
            const double crhs_gauss79 = crhs_gauss23*crhs_gauss78;
            const double crhs_gauss80 = crhs_gauss10*crhs_gauss29;
            const double crhs_gauss81 = pow(crhs_gauss22, 2);
            const double crhs_gauss82 = 1.0/crhs_gauss81;
            const double crhs_gauss83 = -crhs_gauss30;
            const double crhs_gauss84 = 0.5*crhs_gauss45;
            const double crhs_gauss85 = crhs_gauss37*crhs_gauss84;
            const double crhs_gauss86 = crhs_gauss83 + crhs_gauss85;
            const double crhs_gauss87 = crhs_gauss82*crhs_gauss86;
            const double crhs_gauss88 = crhs_gauss20*crhs_gauss35;
            const double crhs_gauss89 = crhs_gauss82*crhs_gauss88;
            const double crhs_gauss90 = crhs_gauss17*crhs_gauss87 + crhs_gauss23*crhs_gauss80 - crhs_gauss29*crhs_gauss89 + crhs_gauss45*crhs_gauss72 + crhs_gauss79;
            const double crhs_gauss91 = N(0)*data.mu_sc_nodes(0);
            const double crhs_gauss92 = N(1)*data.mu_sc_nodes(1);
            const double crhs_gauss93 = N(2)*data.mu_sc_nodes(2);
            const double crhs_gauss94 = N(3)*data.mu_sc_nodes(3);
            const double crhs_gauss95 = crhs_gauss91 + crhs_gauss92 + crhs_gauss93 + crhs_gauss94 + data.mu;
            const double crhs_gauss96 = crhs_gauss23*stab_c1/pow(data.h, 2);
            const double crhs_gauss97 = 1.0/(crhs_gauss54 + 1.3333333333333333*crhs_gauss95*crhs_gauss96);
            const double crhs_gauss98 = crhs_gauss97*(N(0)*data.dUdt(0,1) + N(1)*data.dUdt(1,1) + N(2)*data.dUdt(2,1) + N(3)*data.dUdt(3,1) - crhs_gauss57 + crhs_gauss60*crhs_gauss62 + crhs_gauss69*crhs_gauss71 + crhs_gauss90);
            const double crhs_gauss99 = crhs_gauss22*crhs_gauss52;
            const double crhs_gauss100 = crhs_gauss10*crhs_gauss23;
            const double crhs_gauss101 = crhs_gauss100*crhs_gauss35;
            const double crhs_gauss102 = crhs_gauss29*crhs_gauss77;
            const double crhs_gauss103 = 1.0*crhs_gauss102;
            const double crhs_gauss104 = DN_DX(0,1)*data.U(0,3) + DN_DX(1,1)*data.U(1,3) + DN_DX(2,1)*data.U(2,3) + DN_DX(3,1)*data.U(3,3);
            const double crhs_gauss105 = crhs_gauss15*crhs_gauss35;
            const double crhs_gauss106 = crhs_gauss29*crhs_gauss67;
            const double crhs_gauss107 = crhs_gauss106*crhs_gauss23;
            const double crhs_gauss108 = -crhs_gauss36;
            const double crhs_gauss109 = crhs_gauss108 + crhs_gauss85;
            const double crhs_gauss110 = crhs_gauss109*crhs_gauss82;
            const double crhs_gauss111 = crhs_gauss17*crhs_gauss29;
            const double crhs_gauss112 = crhs_gauss35*crhs_gauss82;
            const double crhs_gauss113 = crhs_gauss104*crhs_gauss45 + crhs_gauss105*crhs_gauss23 + crhs_gauss107 + crhs_gauss110*crhs_gauss20 - crhs_gauss111*crhs_gauss112;
            const double crhs_gauss114 = crhs_gauss97*(N(0)*data.dUdt(0,2) + N(1)*data.dUdt(1,2) + N(2)*data.dUdt(2,2) + N(3)*data.dUdt(3,2) + crhs_gauss101*crhs_gauss60 + crhs_gauss103*crhs_gauss71 + crhs_gauss113 - crhs_gauss99);
            const double crhs_gauss115 = DN_DX(0,1)*crhs_gauss82;
            const double crhs_gauss116 = crhs_gauss22*crhs_gauss67;
            const double crhs_gauss117 = crhs_gauss22*crhs_gauss77;
            const double crhs_gauss118 = crhs_gauss17*crhs_gauss35;
            const double crhs_gauss119 = crhs_gauss20*crhs_gauss29;
            const double crhs_gauss120 = crhs_gauss95*(crhs_gauss116 + crhs_gauss117 - crhs_gauss118 - crhs_gauss119);
            const double crhs_gauss121 = crhs_gauss15*crhs_gauss22;
            const double crhs_gauss122 = -crhs_gauss111 + crhs_gauss121;
            const double crhs_gauss123 = 2*crhs_gauss95;
            const double crhs_gauss124 = crhs_gauss10*crhs_gauss22;
            const double crhs_gauss125 = crhs_gauss124 - crhs_gauss88;
            const double crhs_gauss126 = (crhs_gauss122 + crhs_gauss125)*(-N(0)*data.beta_sc_nodes(0) - N(1)*data.beta_sc_nodes(1) - N(2)*data.beta_sc_nodes(2) - N(3)*data.beta_sc_nodes(3) + 0.66666666666666663*crhs_gauss91 + 0.66666666666666663*crhs_gauss92 + 0.66666666666666663*crhs_gauss93 + 0.66666666666666663*crhs_gauss94 + 0.66666666666666663*data.mu);
            const double crhs_gauss127 = crhs_gauss122*crhs_gauss123 + crhs_gauss126;
            const double crhs_gauss128 = DN_DX(0,0)*crhs_gauss82;
            const double crhs_gauss129 = crhs_gauss58 - 3.0;
            const double crhs_gauss130 = -crhs_gauss129*crhs_gauss62 - crhs_gauss46*crhs_gauss69 + crhs_gauss90;
            const double crhs_gauss131 = N(0)*crhs_gauss51;
            const double crhs_gauss132 = DN_DX(0,1)*crhs_gauss29;
            const double crhs_gauss133 = crhs_gauss112*crhs_gauss132;
            const double crhs_gauss134 = crhs_gauss23*crhs_gauss88;
            const double crhs_gauss135 = crhs_gauss134*crhs_gauss29;
            const double crhs_gauss136 = -2*crhs_gauss135 + crhs_gauss78 + crhs_gauss80;
            const double crhs_gauss137 = N(0)*crhs_gauss82;
            const double crhs_gauss138 = crhs_gauss35*crhs_gauss84;
            const double crhs_gauss139 = crhs_gauss29*crhs_gauss84;
            const double crhs_gauss140 = crhs_gauss138*crhs_gauss67 - crhs_gauss15*(-crhs_gauss139 + crhs_gauss29) - crhs_gauss17*crhs_gauss23*crhs_gauss86;
            const double crhs_gauss141 = 2*crhs_gauss137;
            const double crhs_gauss142 = DN_DX(0,0)*crhs_gauss35;
            const double crhs_gauss143 = 1.0*crhs_gauss45;
            const double crhs_gauss144 = crhs_gauss119*crhs_gauss23 - crhs_gauss73 - crhs_gauss74 - crhs_gauss75 - crhs_gauss76;
            const double crhs_gauss145 = N(0)*crhs_gauss144;
            const double crhs_gauss146 = crhs_gauss59 + 1.0;
            const double crhs_gauss147 = crhs_gauss118*crhs_gauss23 - crhs_gauss63 - crhs_gauss64 - crhs_gauss65 - crhs_gauss66;
            const double crhs_gauss148 = N(0)*crhs_gauss147;
            const double crhs_gauss149 = crhs_gauss114*crhs_gauss23;
            const double crhs_gauss150 = DN_DX(0,0)*crhs_gauss29;
            const double crhs_gauss151 = crhs_gauss111*crhs_gauss23;
            const double crhs_gauss152 = -crhs_gauss11 - crhs_gauss12 - crhs_gauss13 - crhs_gauss14 + crhs_gauss151;
            const double crhs_gauss153 = N(0)*crhs_gauss152;
            const double crhs_gauss154 = DN_DX(0,1)*crhs_gauss35;
            const double crhs_gauss155 = crhs_gauss134 - crhs_gauss6 - crhs_gauss7 - crhs_gauss8 - crhs_gauss9;
            const double crhs_gauss156 = N(0)*crhs_gauss155;
            const double crhs_gauss157 = crhs_gauss154 - crhs_gauss156;
            const double crhs_gauss158 = crhs_gauss23*crhs_gauss98;
            const double crhs_gauss159 = (N(0)*data.lamb_sc_nodes(0) + N(1)*data.lamb_sc_nodes(1) + N(2)*data.lamb_sc_nodes(2) + N(3)*data.lamb_sc_nodes(3) + data.lambda)/data.c_v;
            const double crhs_gauss160 = crhs_gauss22*crhs_gauss49;
            const double crhs_gauss161 = crhs_gauss29*crhs_gauss51;
            const double crhs_gauss162 = crhs_gauss35*crhs_gauss52;
            const double crhs_gauss163 = crhs_gauss29*data.gamma;
            const double crhs_gauss164 = crhs_gauss163*crhs_gauss72;
            const double crhs_gauss165 = crhs_gauss35*data.gamma;
            const double crhs_gauss166 = crhs_gauss104*crhs_gauss165;
            const double crhs_gauss167 = 1.0*crhs_gauss106;
            const double crhs_gauss168 = 1.0*crhs_gauss78;
            const double crhs_gauss169 = crhs_gauss168*crhs_gauss29;
            const double crhs_gauss170 = 1.0*crhs_gauss111;
            const double crhs_gauss171 = pow(crhs_gauss22, -3);
            const double crhs_gauss172 = crhs_gauss30*data.gamma;
            const double crhs_gauss173 = crhs_gauss36*data.gamma;
            const double crhs_gauss174 = crhs_gauss22*crhs_gauss43;
            const double crhs_gauss175 = crhs_gauss174*data.gamma;
            const double crhs_gauss176 = crhs_gauss171*(crhs_gauss108 + crhs_gauss172 + crhs_gauss173 - crhs_gauss175 + crhs_gauss83);
            const double crhs_gauss177 = 1.0*crhs_gauss30;
            const double crhs_gauss178 = crhs_gauss174 - crhs_gauss45*(-crhs_gauss174 + crhs_gauss38);
            const double crhs_gauss179 = crhs_gauss177*crhs_gauss70 + crhs_gauss178;
            const double crhs_gauss180 = 1.0*crhs_gauss36;
            const double crhs_gauss181 = crhs_gauss178 + crhs_gauss180*crhs_gauss70;
            const double crhs_gauss182 = (N(0)*data.dUdt(0,3) + N(1)*data.dUdt(1,3) + N(2)*data.dUdt(2,3) + N(3)*data.dUdt(3,3) + crhs_gauss10*crhs_gauss181*crhs_gauss82 + crhs_gauss112*crhs_gauss167*crhs_gauss70 + crhs_gauss15*crhs_gauss179*crhs_gauss82 - crhs_gauss160 - crhs_gauss161 - crhs_gauss162 + crhs_gauss164*crhs_gauss23 + crhs_gauss166*crhs_gauss23 + crhs_gauss169*crhs_gauss70*crhs_gauss82 + crhs_gauss170*crhs_gauss176 + 1.0*crhs_gauss176*crhs_gauss88)/(crhs_gauss159*crhs_gauss48*crhs_gauss96 + crhs_gauss54);
            const double crhs_gauss183 = crhs_gauss143*crhs_gauss182;
            const double crhs_gauss184 = crhs_gauss123*crhs_gauss125 + crhs_gauss126;
            const double crhs_gauss185 = -crhs_gauss101*crhs_gauss129 - crhs_gauss103*crhs_gauss46 + crhs_gauss113;
            const double crhs_gauss186 = N(0)*crhs_gauss52;
            const double crhs_gauss187 = crhs_gauss112*crhs_gauss150;
            const double crhs_gauss188 = crhs_gauss151*crhs_gauss35;
            const double crhs_gauss189 = crhs_gauss105 + crhs_gauss106 - 2*crhs_gauss188;
            const double crhs_gauss190 = -crhs_gauss10*(-crhs_gauss138 + crhs_gauss35) - crhs_gauss109*crhs_gauss20*crhs_gauss23 + crhs_gauss139*crhs_gauss77;
            const double crhs_gauss191 = crhs_gauss150 - crhs_gauss153;
            const double crhs_gauss192 = crhs_gauss160 + crhs_gauss161 + crhs_gauss162;
            const double crhs_gauss193 = 1.0*crhs_gauss159;
            const double crhs_gauss194 = crhs_gauss171*(crhs_gauss120*crhs_gauss35 + crhs_gauss127*crhs_gauss29 + crhs_gauss193*(-crhs_gauss116*crhs_gauss35 - crhs_gauss121*crhs_gauss29 - crhs_gauss17*crhs_gauss174 + crhs_gauss17*crhs_gauss30 + crhs_gauss17*crhs_gauss36 + crhs_gauss72*crhs_gauss81));
            const double crhs_gauss195 = crhs_gauss171*(crhs_gauss120*crhs_gauss29 + crhs_gauss184*crhs_gauss35 + crhs_gauss193*(crhs_gauss104*crhs_gauss81 - crhs_gauss117*crhs_gauss29 - crhs_gauss124*crhs_gauss35 - crhs_gauss174*crhs_gauss20 + crhs_gauss20*crhs_gauss30 + crhs_gauss20*crhs_gauss36));
            const double crhs_gauss196 = -crhs_gauss172 - crhs_gauss173 + crhs_gauss175 + crhs_gauss37;
            const double crhs_gauss197 = 1.0*crhs_gauss196;
            const double crhs_gauss198 = -crhs_gauss177*crhs_gauss45 + crhs_gauss178;
            const double crhs_gauss199 = crhs_gauss178 - crhs_gauss180*crhs_gauss45;
            const double crhs_gauss200 = crhs_gauss23*(crhs_gauss100*crhs_gauss199 + crhs_gauss164 + crhs_gauss166 - crhs_gauss167*crhs_gauss35*crhs_gauss46 - crhs_gauss169*crhs_gauss46 - crhs_gauss170*crhs_gauss196*crhs_gauss82 - crhs_gauss197*crhs_gauss89 + crhs_gauss198*crhs_gauss61);
            const double crhs_gauss201 = 2.0*crhs_gauss135 - crhs_gauss168 - 1.0*crhs_gauss80;
            const double crhs_gauss202 = crhs_gauss137*crhs_gauss45;
            const double crhs_gauss203 = 3.0*crhs_gauss45;
            const double crhs_gauss204 = crhs_gauss22*crhs_gauss45 + crhs_gauss22;
            const double crhs_gauss205 = 2*crhs_gauss23;
            const double crhs_gauss206 = -crhs_gauss39 - crhs_gauss40 - crhs_gauss41 - crhs_gauss42 + crhs_gauss43*crhs_gauss70;
            const double crhs_gauss207 = -crhs_gauss143*crhs_gauss68 - crhs_gauss15*crhs_gauss203*crhs_gauss29 - crhs_gauss17*(crhs_gauss179*crhs_gauss205 + crhs_gauss206) + crhs_gauss204*crhs_gauss72;
            const double crhs_gauss208 = -1.0*crhs_gauss105 - crhs_gauss167 + 2.0*crhs_gauss188;
            const double crhs_gauss209 = -crhs_gauss10*crhs_gauss203*crhs_gauss35 - crhs_gauss102*crhs_gauss143 + crhs_gauss104*crhs_gauss204 - crhs_gauss20*(crhs_gauss181*crhs_gauss205 + crhs_gauss206);
            const double crhs_gauss210 = crhs_gauss182*crhs_gauss23*crhs_gauss58;
            const double crhs_gauss211 = crhs_gauss171*crhs_gauss197;
            const double crhs_gauss212 = 2.0*crhs_gauss165 - 2.0*crhs_gauss31 - 2.0*crhs_gauss32 - 2.0*crhs_gauss33 - 2.0*crhs_gauss34;
            const double crhs_gauss213 = crhs_gauss23*(3.0*crhs_gauss172 + 3.0*crhs_gauss173 - 3.0*crhs_gauss175 - 3.0*crhs_gauss30 - 3.0*crhs_gauss36) + crhs_gauss43*crhs_gauss58;
            const double crhs_gauss214 = 2.0*crhs_gauss163 - 2.0*crhs_gauss25 - 2.0*crhs_gauss26 - 2.0*crhs_gauss27 - 2.0*crhs_gauss28;
            const double crhs_gauss215 = -crhs_gauss174*crhs_gauss58 - crhs_gauss177 - crhs_gauss180 + crhs_gauss30*crhs_gauss58 + crhs_gauss36*crhs_gauss58;
            const double crhs_gauss216 = -crhs_gauss107*crhs_gauss212 + crhs_gauss151*crhs_gauss213 + crhs_gauss29*crhs_gauss58*crhs_gauss72 - crhs_gauss61*(crhs_gauss214*crhs_gauss29 + crhs_gauss215);
            const double crhs_gauss217 = -crhs_gauss100*(crhs_gauss212*crhs_gauss35 + crhs_gauss215) + crhs_gauss104*crhs_gauss35*crhs_gauss58 + crhs_gauss134*crhs_gauss213 - crhs_gauss214*crhs_gauss79;
            const double crhs_gauss218 = N(1)*crhs_gauss4;
            const double crhs_gauss219 = DN_DX(1,1)*crhs_gauss82;
            const double crhs_gauss220 = DN_DX(1,0)*crhs_gauss82;
            const double crhs_gauss221 = N(1)*crhs_gauss51;
            const double crhs_gauss222 = DN_DX(1,1)*crhs_gauss29;
            const double crhs_gauss223 = crhs_gauss112*crhs_gauss222;
            const double crhs_gauss224 = N(1)*crhs_gauss82;
            const double crhs_gauss225 = 2*crhs_gauss224;
            const double crhs_gauss226 = DN_DX(1,0)*crhs_gauss35;
            const double crhs_gauss227 = N(1)*crhs_gauss144;
            const double crhs_gauss228 = N(1)*crhs_gauss147;
            const double crhs_gauss229 = DN_DX(1,0)*crhs_gauss29;
            const double crhs_gauss230 = N(1)*crhs_gauss152;
            const double crhs_gauss231 = DN_DX(1,1)*crhs_gauss35;
            const double crhs_gauss232 = N(1)*crhs_gauss155;
            const double crhs_gauss233 = crhs_gauss231 - crhs_gauss232;
            const double crhs_gauss234 = N(1)*crhs_gauss52;
            const double crhs_gauss235 = crhs_gauss112*crhs_gauss229;
            const double crhs_gauss236 = crhs_gauss229 - crhs_gauss230;
            const double crhs_gauss237 = crhs_gauss224*crhs_gauss45;
            const double crhs_gauss238 = N(2)*crhs_gauss4;
            const double crhs_gauss239 = DN_DX(2,1)*crhs_gauss82;
            const double crhs_gauss240 = DN_DX(2,0)*crhs_gauss82;
            const double crhs_gauss241 = N(2)*crhs_gauss51;
            const double crhs_gauss242 = DN_DX(2,1)*crhs_gauss29;
            const double crhs_gauss243 = crhs_gauss112*crhs_gauss242;
            const double crhs_gauss244 = N(2)*crhs_gauss82;
            const double crhs_gauss245 = 2*crhs_gauss244;
            const double crhs_gauss246 = DN_DX(2,0)*crhs_gauss35;
            const double crhs_gauss247 = N(2)*crhs_gauss144;
            const double crhs_gauss248 = N(2)*crhs_gauss147;
            const double crhs_gauss249 = DN_DX(2,0)*crhs_gauss29;
            const double crhs_gauss250 = N(2)*crhs_gauss152;
            const double crhs_gauss251 = DN_DX(2,1)*crhs_gauss35;
            const double crhs_gauss252 = N(2)*crhs_gauss155;
            const double crhs_gauss253 = crhs_gauss251 - crhs_gauss252;
            const double crhs_gauss254 = N(2)*crhs_gauss52;
            const double crhs_gauss255 = crhs_gauss112*crhs_gauss249;
            const double crhs_gauss256 = crhs_gauss249 - crhs_gauss250;
            const double crhs_gauss257 = crhs_gauss244*crhs_gauss45;
            const double crhs_gauss258 = N(3)*crhs_gauss4;
            const double crhs_gauss259 = DN_DX(3,1)*crhs_gauss82;
            const double crhs_gauss260 = DN_DX(3,0)*crhs_gauss82;
            const double crhs_gauss261 = N(3)*crhs_gauss51;
            const double crhs_gauss262 = DN_DX(3,1)*crhs_gauss29;
            const double crhs_gauss263 = crhs_gauss112*crhs_gauss262;
            const double crhs_gauss264 = N(3)*crhs_gauss82;
            const double crhs_gauss265 = 2*crhs_gauss264;
            const double crhs_gauss266 = DN_DX(3,0)*crhs_gauss35;
            const double crhs_gauss267 = N(3)*crhs_gauss144;
            const double crhs_gauss268 = N(3)*crhs_gauss147;
            const double crhs_gauss269 = DN_DX(3,0)*crhs_gauss29;
            const double crhs_gauss270 = N(3)*crhs_gauss152;
            const double crhs_gauss271 = DN_DX(3,1)*crhs_gauss35;
            const double crhs_gauss272 = N(3)*crhs_gauss155;
            const double crhs_gauss273 = crhs_gauss271 - crhs_gauss272;
            const double crhs_gauss274 = N(3)*crhs_gauss52;
            const double crhs_gauss275 = crhs_gauss112*crhs_gauss269;
            const double crhs_gauss276 = crhs_gauss269 - crhs_gauss270;
            const double crhs_gauss277 = crhs_gauss264*crhs_gauss45;
            rhs_gauss[0] = DN_DX(0,0)*crhs_gauss19 - DN_DX(0,0)*crhs_gauss98 - DN_DX(0,1)*crhs_gauss114 + DN_DX(0,1)*crhs_gauss21 - N(0)*crhs_gauss16 - crhs_gauss5*crhs_gauss56 + crhs_gauss5;
            rhs_gauss[1] = -DN_DX(0,0)*crhs_gauss183 - N(0)*crhs_gauss130 + N(0)*crhs_gauss57 - crhs_gauss115*crhs_gauss120 - crhs_gauss127*crhs_gauss128 - crhs_gauss149*(crhs_gauss132 - crhs_gauss142*crhs_gauss143 - crhs_gauss145 - crhs_gauss146*crhs_gauss148) - crhs_gauss158*(-crhs_gauss129*crhs_gauss150 - crhs_gauss153*crhs_gauss60 + crhs_gauss157) - crhs_gauss55*(DN_DX(0,0)*crhs_gauss87 + crhs_gauss131 - crhs_gauss133 - crhs_gauss136*crhs_gauss137 + crhs_gauss140*crhs_gauss141);
            rhs_gauss[2] = -DN_DX(0,1)*crhs_gauss183 - N(0)*crhs_gauss185 + N(0)*crhs_gauss99 - crhs_gauss115*crhs_gauss184 - crhs_gauss120*crhs_gauss128 - crhs_gauss149*(-crhs_gauss129*crhs_gauss154 - crhs_gauss156*crhs_gauss60 + crhs_gauss191) - crhs_gauss158*(-crhs_gauss132*crhs_gauss143 + crhs_gauss142 - crhs_gauss145*crhs_gauss146 - crhs_gauss148) - crhs_gauss55*(DN_DX(0,1)*crhs_gauss110 - crhs_gauss137*crhs_gauss189 + crhs_gauss141*crhs_gauss190 + crhs_gauss186 - crhs_gauss187);
            rhs_gauss[3] = -DN_DX(0,0)*crhs_gauss194 - DN_DX(0,1)*crhs_gauss195 + N(0)*crhs_gauss192 - N(0)*crhs_gauss200 - crhs_gauss114*(crhs_gauss115*crhs_gauss199 + crhs_gauss137*crhs_gauss209 - crhs_gauss143*crhs_gauss187 + crhs_gauss186 + crhs_gauss202*crhs_gauss208) - crhs_gauss210*(crhs_gauss157 + crhs_gauss191) - crhs_gauss55*(N(0)*crhs_gauss49 - crhs_gauss137*crhs_gauss216 - crhs_gauss137*crhs_gauss217 - crhs_gauss150*crhs_gauss211 - crhs_gauss154*crhs_gauss211) - crhs_gauss98*(crhs_gauss128*crhs_gauss198 + crhs_gauss131 - crhs_gauss133*crhs_gauss143 + crhs_gauss137*crhs_gauss207 + crhs_gauss201*crhs_gauss202);
            rhs_gauss[4] = DN_DX(1,0)*crhs_gauss19 - DN_DX(1,0)*crhs_gauss98 - DN_DX(1,1)*crhs_gauss114 + DN_DX(1,1)*crhs_gauss21 - N(1)*crhs_gauss16 - crhs_gauss218*crhs_gauss56 + crhs_gauss218;
            rhs_gauss[5] = -DN_DX(1,0)*crhs_gauss183 - N(1)*crhs_gauss130 + N(1)*crhs_gauss57 - crhs_gauss120*crhs_gauss219 - crhs_gauss127*crhs_gauss220 - crhs_gauss149*(-crhs_gauss143*crhs_gauss226 - crhs_gauss146*crhs_gauss228 + crhs_gauss222 - crhs_gauss227) - crhs_gauss158*(-crhs_gauss129*crhs_gauss229 - crhs_gauss230*crhs_gauss60 + crhs_gauss233) - crhs_gauss55*(DN_DX(1,0)*crhs_gauss87 - crhs_gauss136*crhs_gauss224 + crhs_gauss140*crhs_gauss225 + crhs_gauss221 - crhs_gauss223);
            rhs_gauss[6] = -DN_DX(1,1)*crhs_gauss183 - N(1)*crhs_gauss185 + N(1)*crhs_gauss99 - crhs_gauss120*crhs_gauss220 - crhs_gauss149*(-crhs_gauss129*crhs_gauss231 - crhs_gauss232*crhs_gauss60 + crhs_gauss236) - crhs_gauss158*(-crhs_gauss143*crhs_gauss222 - crhs_gauss146*crhs_gauss227 + crhs_gauss226 - crhs_gauss228) - crhs_gauss184*crhs_gauss219 - crhs_gauss55*(DN_DX(1,1)*crhs_gauss110 - crhs_gauss189*crhs_gauss224 + crhs_gauss190*crhs_gauss225 + crhs_gauss234 - crhs_gauss235);
            rhs_gauss[7] = -DN_DX(1,0)*crhs_gauss194 - DN_DX(1,1)*crhs_gauss195 + N(1)*crhs_gauss192 - N(1)*crhs_gauss200 - crhs_gauss114*(-crhs_gauss143*crhs_gauss235 + crhs_gauss199*crhs_gauss219 + crhs_gauss208*crhs_gauss237 + crhs_gauss209*crhs_gauss224 + crhs_gauss234) - crhs_gauss210*(crhs_gauss233 + crhs_gauss236) - crhs_gauss55*(N(1)*crhs_gauss49 - crhs_gauss211*crhs_gauss229 - crhs_gauss211*crhs_gauss231 - crhs_gauss216*crhs_gauss224 - crhs_gauss217*crhs_gauss224) - crhs_gauss98*(-crhs_gauss143*crhs_gauss223 + crhs_gauss198*crhs_gauss220 + crhs_gauss201*crhs_gauss237 + crhs_gauss207*crhs_gauss224 + crhs_gauss221);
            rhs_gauss[8] = DN_DX(2,0)*crhs_gauss19 - DN_DX(2,0)*crhs_gauss98 - DN_DX(2,1)*crhs_gauss114 + DN_DX(2,1)*crhs_gauss21 - N(2)*crhs_gauss16 - crhs_gauss238*crhs_gauss56 + crhs_gauss238;
            rhs_gauss[9] = -DN_DX(2,0)*crhs_gauss183 - N(2)*crhs_gauss130 + N(2)*crhs_gauss57 - crhs_gauss120*crhs_gauss239 - crhs_gauss127*crhs_gauss240 - crhs_gauss149*(-crhs_gauss143*crhs_gauss246 - crhs_gauss146*crhs_gauss248 + crhs_gauss242 - crhs_gauss247) - crhs_gauss158*(-crhs_gauss129*crhs_gauss249 - crhs_gauss250*crhs_gauss60 + crhs_gauss253) - crhs_gauss55*(DN_DX(2,0)*crhs_gauss87 - crhs_gauss136*crhs_gauss244 + crhs_gauss140*crhs_gauss245 + crhs_gauss241 - crhs_gauss243);
            rhs_gauss[10] = -DN_DX(2,1)*crhs_gauss183 - N(2)*crhs_gauss185 + N(2)*crhs_gauss99 - crhs_gauss120*crhs_gauss240 - crhs_gauss149*(-crhs_gauss129*crhs_gauss251 - crhs_gauss252*crhs_gauss60 + crhs_gauss256) - crhs_gauss158*(-crhs_gauss143*crhs_gauss242 - crhs_gauss146*crhs_gauss247 + crhs_gauss246 - crhs_gauss248) - crhs_gauss184*crhs_gauss239 - crhs_gauss55*(DN_DX(2,1)*crhs_gauss110 - crhs_gauss189*crhs_gauss244 + crhs_gauss190*crhs_gauss245 + crhs_gauss254 - crhs_gauss255);
            rhs_gauss[11] = -DN_DX(2,0)*crhs_gauss194 - DN_DX(2,1)*crhs_gauss195 + N(2)*crhs_gauss192 - N(2)*crhs_gauss200 - crhs_gauss114*(-crhs_gauss143*crhs_gauss255 + crhs_gauss199*crhs_gauss239 + crhs_gauss208*crhs_gauss257 + crhs_gauss209*crhs_gauss244 + crhs_gauss254) - crhs_gauss210*(crhs_gauss253 + crhs_gauss256) - crhs_gauss55*(N(2)*crhs_gauss49 - crhs_gauss211*crhs_gauss249 - crhs_gauss211*crhs_gauss251 - crhs_gauss216*crhs_gauss244 - crhs_gauss217*crhs_gauss244) - crhs_gauss98*(-crhs_gauss143*crhs_gauss243 + crhs_gauss198*crhs_gauss240 + crhs_gauss201*crhs_gauss257 + crhs_gauss207*crhs_gauss244 + crhs_gauss241);
            rhs_gauss[12] = DN_DX(3,0)*crhs_gauss19 - DN_DX(3,0)*crhs_gauss98 - DN_DX(3,1)*crhs_gauss114 + DN_DX(3,1)*crhs_gauss21 - N(3)*crhs_gauss16 - crhs_gauss258*crhs_gauss56 + crhs_gauss258;
            rhs_gauss[13] = -DN_DX(3,0)*crhs_gauss183 - N(3)*crhs_gauss130 + N(3)*crhs_gauss57 - crhs_gauss120*crhs_gauss259 - crhs_gauss127*crhs_gauss260 - crhs_gauss149*(-crhs_gauss143*crhs_gauss266 - crhs_gauss146*crhs_gauss268 + crhs_gauss262 - crhs_gauss267) - crhs_gauss158*(-crhs_gauss129*crhs_gauss269 - crhs_gauss270*crhs_gauss60 + crhs_gauss273) - crhs_gauss55*(DN_DX(3,0)*crhs_gauss87 - crhs_gauss136*crhs_gauss264 + crhs_gauss140*crhs_gauss265 + crhs_gauss261 - crhs_gauss263);
            rhs_gauss[14] = -DN_DX(3,1)*crhs_gauss183 - N(3)*crhs_gauss185 + N(3)*crhs_gauss99 - crhs_gauss120*crhs_gauss260 - crhs_gauss149*(-crhs_gauss129*crhs_gauss271 - crhs_gauss272*crhs_gauss60 + crhs_gauss276) - crhs_gauss158*(-crhs_gauss143*crhs_gauss262 - crhs_gauss146*crhs_gauss267 + crhs_gauss266 - crhs_gauss268) - crhs_gauss184*crhs_gauss259 - crhs_gauss55*(DN_DX(3,1)*crhs_gauss110 - crhs_gauss189*crhs_gauss264 + crhs_gauss190*crhs_gauss265 + crhs_gauss274 - crhs_gauss275);
            rhs_gauss[15] = -DN_DX(3,0)*crhs_gauss194 - DN_DX(3,1)*crhs_gauss195 + N(3)*crhs_gauss192 - N(3)*crhs_gauss200 - crhs_gauss114*(-crhs_gauss143*crhs_gauss275 + crhs_gauss199*crhs_gauss259 + crhs_gauss208*crhs_gauss277 + crhs_gauss209*crhs_gauss264 + crhs_gauss274) - crhs_gauss210*(crhs_gauss273 + crhs_gauss276) - crhs_gauss55*(N(3)*crhs_gauss49 - crhs_gauss211*crhs_gauss269 - crhs_gauss211*crhs_gauss271 - crhs_gauss216*crhs_gauss264 - crhs_gauss217*crhs_gauss264) - crhs_gauss98*(-crhs_gauss143*crhs_gauss263 + crhs_gauss198*crhs_gauss260 + crhs_gauss201*crhs_gauss277 + crhs_gauss207*crhs_gauss264 + crhs_gauss261);


            rRightHandSideBoundedVector += w * detJ * rhs_gauss;
        }
    }

    // Here we assume that all the weights of the gauss points are the same so we multiply at the end by Volume/NumNodes
    rRightHandSideBoundedVector *= data.volume / NumNodes;

    KRATOS_CATCH("")
}


template <>
void CompressibleNavierStokesExplicit<2,4>::CalculateMassMatrix(
    MatrixType &rMassMatrix,
    const ProcessInfo &rCurrentProcessInfo)
{
    const auto& r_geometry = GetGeometry();
    const auto& gauss_points = r_geometry.IntegrationPoints(GetIntegrationMethod());

    Vector N;
    Matrix J;
    Matrix Jinv;

    c_matrix<double, NumNodes, NumNodes> M = ZeroMatrix(NumNodes, NumNodes);
    for(const auto& gauss_point: gauss_points)
    {
        const double w = gauss_point.Weight();
        r_geometry.ShapeFunctionsValues(N, gauss_point.Coordinates());

        double detJ;
        r_geometry.Jacobian(J, gauss_point.Coordinates());
        MathUtils<double>::InvertMatrix(J, Jinv, detJ);

        noalias(M) += outer_prod(N, N) * detJ * w;
    }

    // Distributing 4x4 matrix to 16x16 matrix
    rMassMatrix = ZeroMatrix(DofSize, DofSize);
    for(std::size_t i_dof=0; i_dof < BlockSize; ++i_dof)
    {
        for(std::size_t i_node=0; i_node < NumNodes; ++i_node)
        {
            const std::size_t I = i_dof*BlockSize + i_node;
            for(std::size_t j_node=0; j_node < NumNodes; ++j_node)
            {
                const std::size_t J = i_dof*BlockSize + j_node;
                rMassMatrix(I, J) = M(i_node, j_node);
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Class template instantiation

template class CompressibleNavierStokesExplicit<2,4>;

}
