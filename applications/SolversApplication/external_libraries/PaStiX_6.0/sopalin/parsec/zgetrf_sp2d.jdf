extern "C" %{
/**
 *
 * @file zgetrf_sp2d.jdf
 *
 * PaRSEC 2D algorithm jdf for LU factorization.
 *
 * @copyright 2016-2018 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria,
 *                      Univ. Bordeaux. All rights reserved.
 *
 * @version 6.0.1
 * @author Mathieu Faverge
 * @date 2018-07-16
 * @precisions normal z -> s d c
 *
 **/
#include <parsec.h>
#include <parsec/data_distribution.h>
#include <parsec/private_mempool.h>
#include "common.h"
#include "solver.h"
#include "sopalin_data.h"
#include "pastix_zcores.h"
#include "pastix_zcuda.h"
#include "coeftab_z.h"

%}

/* Globals
 */
descA        [type = "parsec_sparse_matrix_desc_t *" ]
sopalin_data [type = "sopalin_data_t *" ]

forced_pushout [type = "int" hidden = on default = "(0)" ]
datacode  [type = "SolverMatrix*"         hidden = on default = "(sopalin_data->solvmtx)"       ]
cblknbr   [type = "pastix_int_t"          hidden = on default = "(datacode->cblknbr - 1)"       ]
bloknbr   [type = "pastix_int_t"          hidden = on default = "(datacode->bloknbr - 2)"       ]
cblkmax1d [type = "pastix_int_t"          hidden = on default = "(datacode->cblkmax1d)"         ]
cblkmin2d [type = "pastix_int_t"          hidden = on default = "(datacode->cblkmin2d)"         ]
blokmax1d [type = "pastix_int_t"          hidden = on default = "(((datacode->cblktab + cblkmax1d + 1)->fblokptr - datacode->bloktab) - 1)" ]
lowrank   [type = "pastix_lr_t"           hidden = on default = "(sopalin_data->solvmtx->lowrank)"]

p_work    [type = "parsec_memory_pool_t *"]
lwork     [type = "pastix_int_t"]

cpu1d_coefs [ type = "pastix_fixdbl_t *" hidden = on default = "&((*(sopalin_data->cpu_coefs))[PastixKernelGEMMCblk2d2d][0])" ]
gpu1d_coefs [ type = "pastix_fixdbl_t *" hidden = on default = "&((*(sopalin_data->gpu_coefs))[PastixKernelGEMMCblk2d2d][0])" ]
cpu2d_coefs [ type = "pastix_fixdbl_t *" hidden = on default = "&((*(sopalin_data->cpu_coefs))[PastixKernelGEMMBlok2d2d][0])" ]
gpu2d_coefs [ type = "pastix_fixdbl_t *" hidden = on default = "&((*(sopalin_data->gpu_coefs))[PastixKernelGEMMBlok2d2d][0])" ]

/**************************************************
 *                   GETRF                        *
 * panel factorization: do trf of diagonal and    *
 *                    : trsm on off-diagonal      *
 **************************************************/
GETRF(k) [high_priority = on]

// Execution space
k = 0 .. cblknbr

browk0    = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->brownum; %}
browk1    = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->brown2d; %}
lastbrow  = %{ if ( browk0 == browk1 ) return 0; else return datacode->browtab[ browk1 - 1 ]; %}

isTwoD    = %{ SolverCblk *cblk = datacode->cblktab + k;     return (cblk->cblktype & CBLK_TASKS_2D);         %}
firstblok = %{ SolverCblk *cblk = datacode->cblktab + k;     return (cblk->fblokptr - datacode->bloktab) + 1; %}
lastblok  = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return (cblk->fblokptr - datacode->bloktab) - 1; %}

// Parallel partitioning
:descA(0, k, 0)

// Parameters
/* C is A(k) if it's a leaf or get the cblk from the last update */
RW L <- ( browk0 == browk1 ) ? descA(0, k, 0) : C GEMM1D( 0, lastbrow )
     -> !isTwoD ? Al GEMM1D( 0 .. 1, firstblok .. lastblok )
     -> descA(0, k, 0)

RW U <- ( browk0 == browk1 ) ? descA(1, k, 0) : C GEMM1D( 1, lastbrow )
     -> !isTwoD ? Au GEMM1D( 0 .. 1, firstblok .. lastblok )
     -> descA(1, k, 0)

CTL ctl -> isTwoD ? ctl OneToTwoD(k, 0 .. (lastblok-firstblok+1), 0 .. 1)

; %{ return cblknbr - k; %}

BODY
{
    SolverCblk *cblk = datacode->cblktab + k;

    if (!isTwoD) {
        if (!(cblk->cblktype & CBLK_IN_SCHUR)) {
            cpucblk_zgetrfsp1d_panel( datacode, cblk, L, U );
        }
    }
    else {
        /* Compression between 1D and 2D updates */
        if ( lowrank.compress_when == PastixCompressWhenDuring ) {
            cpucblk_zcompress( PastixLUCoef, cblk, lowrank );
        }
    }
}
END

/**
 *       GEMM
 *
 * To have a contiguous range of GEMM to release in the getrf, they are numbered
 * with the indexes of the off-diagonal blocks, diagonal block included.
 * Thus, the diagonal block tasks which doesn't perfom computations are used as
 * DATA_IN tasks. This is mandatory when using the GPU, due to the versioning
 * bumped by the cpu version of the diagonal block that coccurs when computing
 * the diagonal blocks.
 *
 * For all off-diagonal blocks, it updates the trailing matrix with the panel
 * k-th block updating corresponding.
 *
 */
GEMM1D(s, bloknum)

// Execution space
s       = 0 .. 1
bloknum = 1 .. blokmax1d

lcblknm = %{ SolverBlok *blok = datacode->bloktab + bloknum; return blok->lcblknm; %}
fcblknm = %{ SolverBlok *blok = datacode->bloktab + bloknum; return blok->fcblknm; %}
first   = %{ SolverCblk *cblk = datacode->cblktab + fcblknm; return cblk->brownum; %}
last    = %{ SolverCblk *cblk = datacode->cblktab + fcblknm; return cblk->brown2d - 1; %}
isTwoD  = %{ SolverCblk *cblk = datacode->cblktab + lcblknm; return cblk->cblktype & CBLK_TASKS_2D; %}

brownum = %{ return datacode->bloktab[bloknum].browind; %} /* -1 if diagonal block */
prev    = %{
    assert( first >= 0 );
    /**
     * If bloknum is a diagonal block, or if it is the first one applied on C,
     * there is no previous
     */
    if ((brownum == -1) || (brownum == first) ) {
        return 0;
    }
    /**
     * Otherwise we return the previous block in the list of blocks facing fcblk
     */
    else {
        assert( brownum > first );
        return datacode->browtab[brownum-1];
    }
    %}
next    = %{
    /**
     * If we are on a diagonal blok, or if we are the last one, there is no next
     */
    if ((brownum == -1) || (brownum >= last) ){
        return 0;
    } else {
        return datacode->browtab[brownum+1];
    }
    %}

n  = %{ if (brownum == -1) return 0; else return blok_rownbr(datacode->bloktab + bloknum); %}
k  = %{ if (brownum == -1) return 0; else return cblk_colnbr(datacode->cblktab + lcblknm); %}
m  = %{ if (brownum == -1) return 0; else {
        if ((datacode->cblktab + lcblknm)->cblktype & CBLK_LAYOUT_2D) {
            return datacode->cblktab[lcblknm].stride - (datacode->bloktab[bloknum].coefind / k);
        } else {
            return datacode->cblktab[lcblknm].stride - datacode->bloktab[bloknum].coefind;
        }
    }%}

// Parallel partitioning
:descA(s, fcblknm, 0)

// Parameters
READ  Al <- (brownum != -1 && !isTwoD) ? L GETRF( lcblknm ) : NULL
READ  Au <- (brownum != -1 && !isTwoD) ? U GETRF( lcblknm ) : NULL

RW    C  <- (brownum == -1) || isTwoD ? NULL
         <- (brownum != -1) && !isTwoD && (brownum == first) ? descA( s, fcblknm, 0 )
         <- (brownum != -1) && !isTwoD && (brownum != first) ? C GEMM1D( s, prev )

         -> (brownum != -1) && (brownum == last) && (s == 0) ? L GETRF( fcblknm )
         -> (brownum != -1) && (brownum == last) && (s != 0) ? U GETRF( fcblknm )
         -> (brownum != -1) && (brownum != last)             ? C GEMM1D( s, next )

; %{ return cblknbr - ((fcblknm + lcblknm) / 2 ) + last - brownum; %}

BODY [ type=CUDA
       pushout=forced_pushout
       device=%{ SolverCblk *lcblk = datacode->cblktab + lcblknm;
                 SolverCblk *fcblk = datacode->cblktab + fcblknm;
                 if ( (brownum == -1) || isTwoD ||
                      (lcblk->cblktype & (CBLK_COMPRESSED | CBLK_IN_SCHUR)) ||
                      (fcblk->cblktype & CBLK_COMPRESSED) )
                 {
                     return -2;
                 } else {
                     return -1;
                 }
                 %}
       weight="(last-brownum+1)"
       cpu_cost="modelsGetCost3Param( cpu1d_coefs, m, n, k )"
       gpu_cost="modelsGetCost3Param( gpu1d_coefs, m, n, k )" ]
#if defined(PASTIX_WITH_CUDA)
{
    /* Never execute the 1D GPU kernel on diagonal blocks, and 2D cblks */
    if ((brownum != -1) && !isTwoD) {
        SolverCblk *lcblk = datacode->cblktab + lcblknm;
        SolverCblk *fcblk = datacode->cblktab + fcblknm;
        SolverBlok *blok  = datacode->bloktab + bloknum;

        assert( !(lcblk->cblktype & CBLK_COMPRESSED) &&
                !(fcblk->cblktype & CBLK_COMPRESSED) );

        if (!(lcblk->cblktype & CBLK_IN_SCHUR)) {
            if ( blok+s < lcblk[1].fblokptr ) {
                if ( s == 0 ) {
#if defined(PASTIX_CUDA_FERMI)
                    gpu_zgemmsp_fermi( datacode,
                                       PastixLower, PastixTrans,
                                       descA->d_blocktab[parsec_body.index],
                                       lcblk, blok, fcblk,
                                       Al, Au, C,
                                       parsec_body.stream );
#else
                    gpucblk_zgemmsp( PastixLCoef, PastixUCoef, PastixTrans,
                                     lcblk, blok, fcblk,
                                     Al, Au, C,
                                     &lowrank, parsec_body.stream );
#endif /* defined(PASTIX_CUDA_FERMI) */
                }
                else {
#if defined(PASTIX_CUDA_FERMI)
                    gpu_zgemmsp_fermi( datacode,
                                       PastixUpper, PastixTrans,
                                       descA->d_blocktab[parsec_body.index],
                                       lcblk, blok, fcblk,
                                       Au, Al, C,
                                       parsec_body.stream );
#else
                    gpucblk_zgemmsp( PastixUCoef, PastixLCoef, PastixTrans,
                                     lcblk, blok, fcblk,
                                     Au, Al, C,
                                     &lowrank, parsec_body.stream );
#endif /* defined(PASTIX_CUDA_FERMI) */
                }
            }
        }
    }
}
#endif
END

BODY
{
    /* If diagonal block, or 2D, we skip it */
    if ((brownum != -1) && !isTwoD) {
        SolverCblk *lcblk = datacode->cblktab + lcblknm;
        SolverCblk *fcblk = datacode->cblktab + fcblknm;
        SolverBlok *blok  = datacode->bloktab + bloknum;
        pastix_complex64_t *work = NULL;

        if (!(lcblk->cblktype & CBLK_IN_SCHUR)) {
            if ( blok+s < lcblk[1].fblokptr ) {
                if ( lwork > 0 ) {
                    work = (pastix_complex64_t *)parsec_private_memory_pop( p_work );
                }

                if (s == 0) {
                    cpucblk_zgemmsp( PastixLCoef, PastixUCoef, PastixTrans,
                                     lcblk, blok, fcblk,
                                     Al, Au, C,
                                     work, lwork, &lowrank );
                }
                else {
                    cpucblk_zgemmsp( PastixUCoef, PastixLCoef, PastixTrans,
                                     lcblk, blok, fcblk,
                                     Au, Al, C,
                                     work, lwork, &lowrank );
                }

                if ( work  ) {
                    parsec_private_memory_push( p_work, (void *)work );
                }
            }
        }
    }
}
END

OneToTwoD(k, m, s)

// Execution space
k    = cblkmin2d .. cblknbr

isTwoD  = %{ SolverCblk *cblk = datacode->cblktab + k;     return (cblk->cblktype & CBLK_TASKS_2D);         %}
fblokk  = %{ SolverCblk *cblk = datacode->cblktab + k;     return (cblk->fblokptr - datacode->bloktab);     %}
lblokk  = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return (cblk->fblokptr - datacode->bloktab) - 1; %}
m       = 0 .. (isTwoD ? (lblokk-fblokk) : -1 )
noskip  = %{ if (m == 0) {
                 return 1;
             }
             else {
                 SolverBlok *blok = datacode->bloktab + fblokk + m - 1;
                 return ( (blok[0].lcblknm == blok[1].lcblknm) &&
                          (blok[0].fcblknm == blok[1].fcblknm) ) ? 0 : 1+m;
             } %}

s       = 0 .. %{ return noskip ? 1 : -1; %}
first   = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->brown2d; %}
last    = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return cblk->brownum; %}

// Parallel partitioning
:descA(s, k, noskip)

// Parameters
/* C is A(k) if it's a leaf or get the cblk from the last update */
READ A <- isTwoD && noskip ? descA(s, k, noskip) : NULL
       /* This cblk is a leaf */
       -> isTwoD && noskip && (first == last) && (m == 0) && (s == 0) ? Al GETRF2D( k )
       -> isTwoD && noskip && (first == last) && (m == 0) && (s == 1) ? Au GETRF2D( k )
       -> isTwoD && noskip && (first == last) && (m != 0)             ? C  TRSM2D( k, m, s )

       /* This cblk must receive 2D updates */
       -> isTwoD && noskip && (first <  last) ? C GEMM2D( k, m, first, s )

CTL  ctl <- (isTwoD) ? ctl GETRF(k)

; %{ return cblknbr - k; %}

BODY
{
    /* Switch from 1D data handlers to 2D data handlers */
}
END

GETRF2D(k)

// Execution space
k       = cblkmin2d .. cblknbr
isTwoD  = %{ SolverCblk *cblk = datacode->cblktab + k;     return (cblk->cblktype & CBLK_TASKS_2D);         %}
fblokk  = %{ SolverCblk *cblk = datacode->cblktab + k;     return (cblk->fblokptr - datacode->bloktab);     %}
lblokk  = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return (cblk->fblokptr - datacode->bloktab) - 1; %}
first   = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->brown2d; %}
last    = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return cblk->brownum; %}

// Parallel partitioning
:descA(0, k, 1)

// Parameters
/* C is A(k) if it's a leaf or get the cblk from the last update */
RW   Al <-  isTwoD & (first == last) ? A OneToTwoD( k, 0, 0 )
        <-  isTwoD & (first <  last) ? C GEMM2D( k, 0, last-1, 0 )
        <- !isTwoD ? NULL

        ->  isTwoD ? A TRSM2D( k, 1 .. (lblokk-fblokk), 0 )
        ->  isTwoD ? descA(0, k, 1)

RW   Au <-  isTwoD & (first == last) ? A OneToTwoD( k, 0, 1 )
        <-  isTwoD & (first <  last) ? C GEMM2D( k, 0, last-1, 1 )
        <- !isTwoD ? NULL

        ->  isTwoD ? A TRSM2D( k, 1 .. (lblokk-fblokk), 1 )
        ->  isTwoD ? descA(1, k, 1)

; %{ return cblknbr - k; %}

BODY
{
    if (isTwoD) {
        SolverCblk *cblk = datacode->cblktab + k;
        /* pastix_int_t  nbpivot = */
        if (!(cblk->cblktype & CBLK_IN_SCHUR)) {
            cpucblk_zgetrfsp1d_getrf( datacode, cblk, Al, Au );
        }
    }
}
END

TRSM2D(k, m, s)

     /* On all the 2D cblk */
k       = cblkmin2d .. cblknbr-1

isTwoD  = %{ SolverCblk *cblk = datacode->cblktab + k;     return (cblk->cblktype & CBLK_TASKS_2D);         %}
fblokk  = %{ SolverCblk *cblk = datacode->cblktab + k;     return (cblk->fblokptr - datacode->bloktab);     %}
lblokk  = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return (cblk->fblokptr - datacode->bloktab) - 1; %}

m       = 1 .. (isTwoD ? (lblokk-fblokk) : 0 )
noskip  = %{ SolverBlok *blok = datacode->bloktab + fblokk + m - 1;
             return ( (blok[0].lcblknm == blok[1].lcblknm) &&
                      (blok[0].fcblknm == blok[1].fcblknm) ) ? 0 : 1+m; %}

s       = 0 .. %{ return noskip ? 1 : -1; %}
first   = %{ SolverCblk *cblk = datacode->cblktab + k;           return cblk->brown2d;                        %}
last    = %{ SolverCblk *cblk = datacode->cblktab + k + 1;       return cblk->brownum;                        %}
fcblknm = %{ SolverBlok *blok = datacode->bloktab + fblokk + m;  return blok->fcblknm;                        %}
browkb  = %{ SolverBlok *blok = datacode->bloktab + fblokk + m;  return blok->browind;                        %}
fblokn  = %{ SolverCblk *cblk = datacode->cblktab + fcblknm;     return cblk->fblokptr - datacode->bloktab;   %}
lblokn  = %{ SolverCblk *cblk = datacode->cblktab + fcblknm + 1; return cblk->fblokptr - datacode->bloktab-1; %}

// Parallel partitioning
:descA(s, k, noskip)

// Parameters
/* C is A(k) if it's a leaf or get the cblk from the last update */
READ  A   <-  isTwoD && (s == 0) ? Al GETRF2D( k )
          <-  isTwoD && (s == 1) ? Au GETRF2D( k )
          <- !isTwoD ? NULL

RW    C   <-  isTwoD & noskip & (first == last) ? A OneToTwoD( k, m, s )
          <-  isTwoD & noskip & (first <  last) ? C GEMM2D( k, m, last-1, s )
          <-(!isTwoD) | (!noskip) ? NULL
          ->  isTwoD & noskip ? A FWDTOGEMM2D( k, m, 1 .. m, s )
          ->  isTwoD & noskip ? B GEMM2D( fcblknm, 0 .. (lblokn-fblokn), browkb, 1-s )
          ->  isTwoD & noskip ? descA(s, k, noskip)

; %{ return cblknbr - k; %}

BODY [ type=CUDA
       device=%{ SolverCblk *lcblk = datacode->cblktab + k;
                 if( !isTwoD || !noskip ||
                     (lcblk->cblktype & (CBLK_COMPRESSED|CBLK_IN_SCHUR)) )
                 {
                     return -2;
                 } else {
                     return -1;
                 }
                 %}
       pushout=forced_pushout ]
#if defined(PASTIX_WITH_CUDA)
{
    if( isTwoD && noskip ) {
        SolverCblk *cblk  = datacode->cblktab + k;

        assert( !(cblk->cblktype & CBLK_COMPRESSED ) );

        if (!(cblk->cblktype & CBLK_IN_SCHUR)) {
            if (s == 0) {
                gpublok_ztrsmsp( PastixLCoef, PastixRight, PastixUpper,
                                 PastixNoTrans, PastixNonUnit,
                                 cblk, m, A, C, &lowrank,
                                 parsec_body.stream );
            }
            else {
                gpublok_ztrsmsp( PastixUCoef, PastixRight, PastixUpper,
                                 PastixNoTrans, PastixUnit,
                                 cblk, m, A, C, &lowrank,
                                 parsec_body.stream );
            }
        }
    }
}
#endif
END

BODY
{
    if (isTwoD && noskip) {
        SolverCblk *cblk = datacode->cblktab + k;

        if (!(cblk->cblktype & CBLK_IN_SCHUR)) {
            if (s == 0) {
                cpublok_ztrsmsp( PastixLCoef, PastixRight, PastixUpper,
                                 PastixNoTrans, PastixNonUnit,
                                 cblk, m, A, C, &lowrank );
            } else {
                cpublok_ztrsmsp( PastixUCoef, PastixRight, PastixUpper,
                                 PastixNoTrans, PastixUnit,
                                 cblk, m, A, C, &lowrank );
            }
        }
    }
}
END

FWDTOGEMM2D(k, m, n, s)

// Execution space
k       = cblkmin2d .. cblknbr-1
isTwoD  = %{ SolverCblk *cblk = datacode->cblktab + k;     return (cblk->cblktype & CBLK_TASKS_2D);         %}
fblokk  = %{ SolverCblk *cblk = datacode->cblktab + k;     return (cblk->fblokptr - datacode->bloktab);     %}
lblokk  = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return (cblk->fblokptr - datacode->bloktab) - 1; %}

m       = 1 .. (isTwoD ? (lblokk-fblokk) : 0 )
noskipM = %{ SolverBlok *blok = datacode->bloktab + fblokk + m - 1;
             return ( (blok[0].lcblknm == blok[1].lcblknm) &&
                      (blok[0].fcblknm == blok[1].fcblknm) ) ? 0 : 1+m; %}

n       = 1 .. %{ return noskipM ? m : 0; %}
noskipN = %{ SolverBlok *blok = datacode->bloktab + fblokk + n - 1;
             return ( (blok[0].lcblknm == blok[1].lcblknm) &&
                      (blok[0].fcblknm == blok[1].fcblknm) ) ? 0 : 1+n; %}

cblk_n  = %{ SolverBlok *blok = datacode->bloktab + fblokk + n;  return blok->fcblknm; %}
blok_mn = %{
    if( noskipM ) {
      SolverBlok *blokA = datacode->bloktab + fblokk + m;
      SolverCblk *cblkC = datacode->cblktab + cblk_n;
      SolverBlok *blokC = cblkC->fblokptr;
      pastix_int_t frownum = blokC->frownum;
      pastix_int_t lrownum = blokC->lrownum;
      pastix_int_t i = 0, j = 0;

      do {
          frownum = blokC->frownum;
          lrownum = blokC->lrownum;
          i += j;
          j = 1;

          while( (cblk_n < cblknbr) &&
                 (blokC[0].fcblknm == blokC[1].fcblknm) &&
                 (blokC[0].lcblknm == blokC[1].lcblknm) )
          {
              blokC++; j++;
              lrownum = blokC->lrownum;
          }
          blokC++;
      }
      while( !((blokA->frownum >= frownum) &&
               (blokA->lrownum <= lrownum)) );
      return i;
    }
    else
        return 0;
%}
browkb = %{ SolverBlok *blok = datacode->bloktab + fblokk + n;
            return blok->browind; %}

s       = 0 .. 1

// Parallel partitioning
:descA(s, cblk_n, blok_mn)

// Parameters
READ  A  <- noskipM ? C TRSM2D( k, m, s ) : NULL
         -> noskipM & noskipN ? A GEMM2D( cblk_n, blok_mn, browkb, s )

; %{ return cblknbr - k; %}

BODY
{
}
END

/**
 *       GEMM
 *
 * To have a contiguous range of GEMM to release in the getrf, they are numbered
 * with the indexes of the off-diagonal blocks, diagonal block included.
 * Thus, the diagonal block tasks which doesn't perfom computations are used as
 * DATA_IN tasks. This is mandatory when using the GPU, due to the versioning
 * bumped by the cpu version of the diagonal block that coccurs when computing
 * the diagonal blocks.
 *
 * For all off-diagonal blocks, it updates the trailing matrix with the panel
 * k-th block updating corresponding.
 *
 */
GEMM2D(cblk_n, blok_mn, k, s)

// Execution space
cblk_n  = cblkmin2d+1 .. cblknbr

is2dC   = %{ SolverCblk *cblk = datacode->cblktab + cblk_n;     return (cblk->cblktype & CBLK_TASKS_2D);         %}
fblokn  = %{ SolverCblk *cblk = datacode->cblktab + cblk_n;     return (cblk->fblokptr - datacode->bloktab);     %}
lblokn  = %{ SolverCblk *cblk = datacode->cblktab + cblk_n + 1; return (cblk->fblokptr - datacode->bloktab) - 1; %}

blok_mn = 0 .. (is2dC ? (lblokn-fblokn) : -1)
noskipC = %{ SolverBlok *blok = datacode->bloktab + fblokn + blok_mn - 1;
             return ( (blok[0].lcblknm == blok[1].lcblknm) &&
                      (blok[0].fcblknm == blok[1].fcblknm) ) ? 0 : 1+blok_mn; %}

first   = %{ if (noskipC) { SolverCblk *cblk = datacode->cblktab + cblk_n;     return cblk->brown2d;     }
             else { return 1; }%}
last    = %{ if (noskipC) { SolverCblk *cblk = datacode->cblktab + cblk_n + 1; return cblk->brownum - 1; }
             else { return 0; }%}

k       = first .. last
blok_nk = %{ pastix_int_t nk = datacode->browtab[ k ];
             SolverBlok *blok = datacode->bloktab + nk - 1;
             return ( (blok[0].lcblknm == blok[1].lcblknm) &&
                      (blok[0].fcblknm == blok[1].fcblknm) ) ? 0 : nk; %}

cblk_k  = %{ SolverBlok *blok = datacode->bloktab + blok_nk; return blok->lcblknm; %}
fblokk  = %{ SolverCblk *cblk = datacode->cblktab + cblk_k;  return cblk->fblokptr - datacode->bloktab; %}

is2dA   = %{ SolverCblk *cblk = datacode->cblktab + cblk_k; return (cblk->cblktype & CBLK_TASKS_2D); %}

blok_mk = %{
    if ( blok_nk == 0 ) {
       return 0;
    }
    else {
      SolverBlok *blokA = datacode->bloktab + blok_nk;
      SolverBlok *blokC = datacode->bloktab + fblokn + blok_mn;
      pastix_int_t i = (blokA - datacode->bloktab) - fblokk;

      /* Look for the first blokA that starts after the first blokC */
      while( (blokC->frownum > blokA->lrownum) && (blokA[0].lcblknm == blokA[1].lcblknm) )
      {
         blokA++; i++;
      }
      /* Check if blokA is matching any of the blokC considered together */
      while( (blokA->frownum > blokC->lrownum) &&
             (blokC[0].fcblknm == blokC[1].fcblknm) &&
             (blokC[0].lcblknm == blokC[1].lcblknm))
      {
         blokC++;
      }
      return is_block_inside_fblock( blokA, blokC ) ? i : 0;
    }
%}

s    = 0 .. 1
todo = (is2dA && is2dC && noskipC && blok_nk && blok_mk)

dimm = %{ if (!todo) return 0; else return blok_rownbr(datacode->bloktab + fblokk + blok_mk);  %}
dimn = %{ if (!todo) return 0; else return blok_rownbr(datacode->bloktab + blok_nk); %}
dimk = %{ if (!todo) return 0; else return cblk_colnbr(datacode->cblktab + cblk_k);  %}

// Parallel partitioning
:descA(s, cblk_n, noskipC)

// Parameters
READ  A  <-  is2dA & (blok_mk > 0) ? A FWDTOGEMM2D( cblk_k, blok_mk, blok_nk-fblokk, s ) : NULL
READ  B  <-  is2dA & (blok_nk > 0) ? C TRSM2D( cblk_k, blok_nk-fblokk, 1-s ) : NULL

RW    C  <- (k == first) ? A OneToTwoD( cblk_n, blok_mn, s )
         <- (k != first) ? C GEMM2D( cblk_n, blok_mn, k-1, s )

         -> (last == k) & (blok_mn == 0) && (s == 0) ? Al GETRF2D( cblk_n )
         -> (last == k) & (blok_mn == 0) && (s == 1) ? Au GETRF2D( cblk_n )
         -> (last == k) & (blok_mn != 0) ? C TRSM2D( cblk_n, blok_mn, s )
         -> (last != k) ? C GEMM2D( cblk_n, blok_mn, k+1, s )

; %{ return cblknbr - ( ((k-first) * (cblk_n - cblk_k)) / (last-first+1) ) - cblk_n; %}

BODY [ type=CUDA
       pushout=forced_pushout
       device=%{ SolverCblk *lcblk = datacode->cblktab + cblk_k;
                 SolverCblk *fcblk = datacode->cblktab + cblk_n;
                 if ( (!todo) ||
                      (lcblk->cblktype & (CBLK_COMPRESSED|CBLK_IN_SCHUR)) ||
                      (fcblk->cblktype & CBLK_COMPRESSED) )
                 {
                     return -2;
                 } else {
                     return -1;
                 }
                 %}
       weight="(last-k+1)"
       cpu_cost="modelsGetCost3Param( cpu2d_coefs, dimm, dimn, dimk )"
       gpu_cost="modelsGetCost3Param( gpu2d_coefs, dimm, dimn, dimk )" ]
#if defined(PASTIX_WITH_CUDA)
{
    /* is2dA && is2dC && noskipC && blok_nk && blok_mk */
    /* Skip the update on diagonal block if upper part */
    if( todo ) {
        SolverCblk *cblk  = datacode->cblktab + cblk_k;
        SolverCblk *fcblk = datacode->cblktab + cblk_n;
        pastix_int_t nk = blok_nk - fblokk;

        assert( !(cblk->cblktype  & CBLK_COMPRESSED ) &&
                !(fcblk->cblktype & CBLK_COMPRESSED ) );

        if (!(cblk->cblktype & CBLK_IN_SCHUR)) {
            if ( s == 0 ) {
                gpublok_zgemmsp( PastixLCoef, PastixUCoef, PastixTrans,
                                 cblk, fcblk, blok_mk, nk, blok_mn,
                                 A, B, C, &lowrank,
                                 parsec_body.stream );
            }
            else if ( (s == 1) && (blok_mk != nk) ) {
                gpublok_zgemmsp( PastixUCoef, PastixLCoef, PastixTrans,
                                 cblk, fcblk, blok_mk, nk, blok_mn,
                                 A, B, C, &lowrank,
                                 parsec_body.stream );
            }
        }
    }
}
#endif
END

BODY
{
    /* is2dA && is2dC && noskipC && blok_nk && blok_mk */
    if (todo) {
        SolverCblk  *cblk  = datacode->cblktab + cblk_k;
        SolverCblk  *fcblk = datacode->cblktab + cblk_n;
        pastix_int_t nk = blok_nk - fblokk;

        if (!(cblk->cblktype & CBLK_IN_SCHUR)) {
            /* Skip the update on diagonal block if upper part */
            if ( s == 0 ) {
                cpublok_zgemmsp( PastixLCoef, PastixUCoef, PastixTrans,
                                 cblk, fcblk, blok_mk, nk, blok_mn,
                                 A, B, C, &lowrank );
            }
            else if ( (s == 1) && (blok_mk != nk) ) {
                cpublok_zgemmsp( PastixUCoef, PastixLCoef, PastixTrans,
                                 cblk, fcblk, blok_mk, nk, blok_mn,
                                 A, B, C, &lowrank );
            }
        }
    }
}
END
