/**
 *
 * @file pastix/config.h.in
 *
 * PaStiX configuration parameters
 *
 * @copyright 2016-2018 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria,
 *                      Univ. Bordeaux. All rights reserved.
 *
 * @version 6.0.1
 * @author Pierre Ramet
 * @author Mathieu Faverge
 * @date 2018-07-16
 *
 **/
#ifndef _pastix_config_h_
#define _pastix_config_h_

#define PASTIX_VERSION_MAJOR @PASTIX_VERSION_MAJOR@
#define PASTIX_VERSION_MINOR @PASTIX_VERSION_MINOR@
#define PASTIX_VERSION_MICRO @PASTIX_VERSION_MICRO@

#cmakedefine PASTIX_WITH_FORTRAN
#cmakedefine PASTIX_WITH_MPI
#cmakedefine PASTIX_WITH_CUDA
#cmakedefine PASTIX_WITH_EZTRACE

/* system */
#cmakedefine HAVE_PTHREAD
#cmakedefine HAVE_SCHED_SETAFFINITY
#cmakedefine HAVE_CLOCK_GETTIME
/* #cmakedefine HAVE_ASPRINTF */
/* #cmakedefine HAVE_VASPRINTF */
#cmakedefine HAVE_ATOMIC_GCC_32_BUILTINS
#cmakedefine HAVE_ATOMIC_GCC_64_BUILTINS
#cmakedefine HAVE_ATOMIC_GCC_128_BUILTINS
#cmakedefine HAVE_ATOMIC_XLC_32_BUILTINS
#cmakedefine HAVE_ATOMIC_XLC_64_BUILTINS
#cmakedefine HAVE_ATOMIC_MIPOSPRO_32_BUILTINS
#cmakedefine HAVE_ATOMIC_MIPOSPRO_64_BUILTINS
#cmakedefine HAVE_ATOMIC_SUN_32
#cmakedefine HAVE_ATOMIC_SUN_64
#cmakedefine HAVE_STDARG_H
#cmakedefine HAVE_UNISTD_H
#cmakedefine HAVE_VA_COPY
#cmakedefine HAVE_UNDERSCORE_VA_COPY
#cmakedefine HAVE_GETOPT_LONG
#cmakedefine HAVE_GETRUSAGE
#cmakedefine HAVE_GETOPT_H
#cmakedefine HAVE_ERRNO_H
#cmakedefine HAVE_STDDEF_H
#cmakedefine HAVE_LIMITS_H
#cmakedefine HAVE_STRING_H
#cmakedefine HAVE_COMPLEX_H
#cmakedefine HAVE_FALLTHROUGH

/* Architecture */
#cmakedefine PASTIX_ARCH_X86
#cmakedefine PASTIX_ARCH_X86_64
#cmakedefine PASTIX_ARCH_PPC
#cmakedefine PASTIX_OS_MACOS

/* Optional packages */
#cmakedefine HAVE_HWLOC
#cmakedefine HAVE_HWLOC_BITMAP
#cmakedefine HAVE_HWLOC_PARENT_MEMBER
#cmakedefine HAVE_HWLOC_CACHE_ATTR
#cmakedefine HAVE_HWLOC_OBJ_PU

/* Ordering options */
#cmakedefine PASTIX_ORDERING_SCOTCH
#cmakedefine PASTIX_ORDERING_METIS
#cmakedefine PASTIX_ORDERING_PTSCOTCH

/* Symbolic factorization options */
#cmakedefine PASTIX_SYMBOL_DUMP_SYMBMTX

/* Analyze options */
#cmakedefine PASTIX_BLEND_GENTRACE
#cmakedefine PASTIX_BLEND_DEEPEST_DISTRIB

#cmakedefine FORGET_PARTITION
#cmakedefine COMPACT_SMX

/* Numerical factorization options */
#cmakedefine PASTIX_NUMFACT_DUMP_SOLVER
#cmakedefine PASTIX_SUPERNODE_STATS

/* Scheduling options */
#cmakedefine PASTIX_WITH_PARSEC
#cmakedefine PASTIX_WITH_STARPU

/* Models */
#cmakedefine PASTIX_GENERATE_MODEL

#cmakedefine PASTIX_CUDA_FERMI

#cmakedefine PASTIX_FUNNELED
#cmakedefine PASTIX_DISTRIBUTED
#cmakedefine PASTIX_THREAD_COMM

/* Debug */
#cmakedefine PASTIX_DEBUG_GRAPH
#cmakedefine PASTIX_DEBUG_ORDERING
#cmakedefine PASTIX_DEBUG_SYMBOL
#cmakedefine PASTIX_DEBUG_BLEND
#cmakedefine PASTIX_DEBUG_DUMP_COEFTAB
#cmakedefine PASTIX_DEBUG_FACTO
#cmakedefine PASTIX_DEBUG_PARSEC
#cmakedefine PASTIX_DEBUG_LR
#cmakedefine PASTIX_DEBUG_LR_NANCHECK
#cmakedefine PASTIX_DEBUG_GMRES
#cmakedefine PASTIX_DEBUG_EXIT_ON_SIGSEGV

/* Datatypes used */
#cmakedefine PASTIX_INT64

#if defined(HAVE_FALLTHROUGH)
#define pastix_attr_fallthrough __attribute__((fallthrough))
#else
#define pastix_attr_fallthrough do {} while(0)
#endif

/*
 * BEGIN_C_DECLS should be used at the beginning of your declarations,
 * so that C++ compilers don't mangle their names.  Use END_C_DECLS at
 * the end of C declarations.
 */
#undef BEGIN_C_DECLS
#undef END_C_DECLS
#if defined(c_plusplus) || defined(__cplusplus)
# define BEGIN_C_DECLS extern "C" {
# define END_C_DECLS }
#else
#define BEGIN_C_DECLS          /* empty */
#define END_C_DECLS            /* empty */
#endif

#endif /* _pastix_config_h_ */
