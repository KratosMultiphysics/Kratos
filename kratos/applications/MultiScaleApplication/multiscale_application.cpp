//
//   Project Name:        Kratos
//   Last Modified by:    $Author: Massimo Petracca $
//   Date:                $Date: 2013-10-03 19:37:00 $
//   Revision:            $Revision: 1.00 $
//
//



// System includes


// External includes


// Project includes
#include "includes/define.h"
#include "includes/serializer.h"

#include "geometries/point_3d.h"
#include "geometries/triangle_2d_3.h"
#include "geometries/quadrilateral_interface_2d_4.h"
#include "geometries/quadrilateral_2d_4.h"
#include "geometries/quadrilateral_2d_8.h"
#include "geometries/quadrilateral_2d_9.h"
#include "geometries/prism_interface_3d_6.h"
#include "geometries/hexahedra_interface_3d_8.h"
#include "geometries/line_2d_2.h"
#include "geometries/hexahedra_3d_8.h"
#include "geometries/tetrahedra_3d_4.h"

#include "includes/variables.h"
#include "includes/constitutive_law.h"

#include "multiscale_application.h"

namespace Kratos
{

// for rve
KRATOS_CREATE_VARIABLE( int, RVE_CONSTITUTIVE_LAW_FLAG )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( RVE_FULL_DISPLACEMENT )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( RVE_WPC_LAGRANGIAN_DOF )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( RVE_WPC_LAGRANGIAN_REACTION )
KRATOS_CREATE_VARIABLE( double, RVE_WPR_LAGRANGIAN_DOF )
KRATOS_CREATE_VARIABLE( double, RVE_WPR_LAGRANGIAN_REACTION )

// for lagrange multipliers
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( DISPLACEMENT_LAGRANGE )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( ROTATION_LAGRANGE )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( REACTION_DISPLACEMENT_LAGRANGE )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( REACTION_ROTATION_LAGRANGE )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( DISPLACEMENT_DOUBLE_LAGRANGE_1 )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( DISPLACEMENT_DOUBLE_LAGRANGE_2 )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( ROTATION_DOUBLE_LAGRANGE_1 )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( ROTATION_DOUBLE_LAGRANGE_2 )
KRATOS_CREATE_VARIABLE( double, DOUBLE_LAGRANGE_SCALE_FACTOR_ALPHA )
KRATOS_CREATE_VARIABLE( double, DOUBLE_LAGRANGE_SCALE_FACTOR_BETA )

// for strategies
KRATOS_CREATE_VARIABLE( int, STRATEGY_SOLUTION_STEP_SOLVED )
KRATOS_CREATE_VARIABLE( int, STRATEGY_FINALIZE_SOLUTION_STEP_LEVEL )
KRATOS_CREATE_VARIABLE( double, CONSTITUTIVE_INTEGRATION_ERROR_CODE )
KRATOS_CREATE_VARIABLE( int, ITERATION_CONVERGENCE_FLAG )
KRATOS_CREATE_VARIABLE( double, SUGGESTED_TIME_STEP )

// for damage constitutive law
KRATOS_CREATE_VARIABLE( double, DAMAGE_T )
KRATOS_CREATE_VARIABLE( double, DAMAGE_C )
KRATOS_CREATE_VARIABLE( double, FRACTURE_ENERGY_T )
KRATOS_CREATE_VARIABLE( double, FRACTURE_ENERGY_C )
KRATOS_CREATE_VARIABLE( double, YIELD_STRESS_T )
KRATOS_CREATE_VARIABLE( double, YIELD_STRESS_C )
KRATOS_CREATE_VARIABLE( double, DAMAGE_STRESS_T_0 )
KRATOS_CREATE_VARIABLE( double, DAMAGE_STRESS_C_0 )
KRATOS_CREATE_VARIABLE( double, DAMAGE_STRESS_C_P )
KRATOS_CREATE_VARIABLE( double, DAMAGE_STRESS_C_M )
KRATOS_CREATE_VARIABLE( double, DAMAGE_STRESS_C_R )
KRATOS_CREATE_VARIABLE( double, DAMAGE_STRAIN_C_P )
KRATOS_CREATE_VARIABLE( double, DAMAGE_STRAIN_C_M )
KRATOS_CREATE_VARIABLE( double, DAMAGE_COMPRESSIVE_LAW_C1 )
KRATOS_CREATE_VARIABLE( double, DAMAGE_COMPRESSIVE_LAW_C2 )
KRATOS_CREATE_VARIABLE( double, DAMAGE_COMPRESSIVE_LAW_C3 )
KRATOS_CREATE_VARIABLE( double, BIAXIAL_COMPRESSION_MULTIPLIER )
KRATOS_CREATE_VARIABLE( double, SHEAR_COMPRESSION_REDUCTION )
KRATOS_CREATE_VARIABLE( double, DAMAGE_TENSILE_SURFACE_S1 )
KRATOS_CREATE_VARIABLE( double, LUBLINER_SURFACE_PARAM_KC )
KRATOS_CREATE_VARIABLE( double, GENRANKINE_SURFACE_PARAM_A )
KRATOS_CREATE_VARIABLE( double, GENRANKINE_SURFACE_PARAM_B )
KRATOS_CREATE_VARIABLE( double, GENRANKINE_SURFACE_PARAM_C )
KRATOS_CREATE_VARIABLE( int, DAMAGE_SECANT_MATRIX )
KRATOS_CREATE_VARIABLE( int, DAMAGE_MODEL )
KRATOS_CREATE_VARIABLE( int, DAMAGE_TENSILE_MODEL )

// for interface constitutive law
KRATOS_CREATE_VARIABLE( double, NORMAL_STIFFNESS )
KRATOS_CREATE_VARIABLE( double, TANGENTIAL_STIFFNESS )
KRATOS_CREATE_VARIABLE( double, NORMAL_STIFFNESS_COMPRESSION_MULTIPLIER )
KRATOS_CREATE_VARIABLE( double, FRACTURE_ENERGY_MODE_I )
KRATOS_CREATE_VARIABLE( double, FRACTURE_ENERGY_MODE_II )
KRATOS_CREATE_VARIABLE( double, FRACTURE_ENERGY_MODE_III )
KRATOS_CREATE_VARIABLE( double, EQUIVALENT_PLASTIC_DISPLACEMENT_JUMP_MODE_I )
KRATOS_CREATE_VARIABLE( double, EQUIVALENT_PLASTIC_DISPLACEMENT_JUMP_MODE_II )
KRATOS_CREATE_VARIABLE( double, EQUIVALENT_PLASTIC_DISPLACEMENT_JUMP_MODE_III )
KRATOS_CREATE_VARIABLE( double, INITIAL_COHESION )
KRATOS_CREATE_VARIABLE( double, INITIAL_FRICTION_ANGLE )
KRATOS_CREATE_VARIABLE( double, RESIDUAL_FRICTION_ANGLE )
KRATOS_CREATE_VARIABLE( double, INITIAL_DILATANCY_ANGLE )
KRATOS_CREATE_VARIABLE( double, RESIDUAL_DILATANCY_ANGLE )
KRATOS_CREATE_VARIABLE( double, INTERFACE_TENSILE_LAW_S0 )
KRATOS_CREATE_VARIABLE( double, INTERFACE_COMPRESSIVE_LAW_S0 )
KRATOS_CREATE_VARIABLE( double, INTERFACE_COMPRESSIVE_LAW_SP )
KRATOS_CREATE_VARIABLE( double, INTERFACE_COMPRESSIVE_LAW_SR )
KRATOS_CREATE_VARIABLE( double, INTERFACE_COMPRESSIVE_LAW_EP )
KRATOS_CREATE_VARIABLE( double, INTERFACE_COMPRESSIVE_LAW_C1 )
KRATOS_CREATE_VARIABLE( double, INTERFACE_COMPRESSIVE_LAW_C2 )
KRATOS_CREATE_VARIABLE( double, INTERFACE_COMPRESSIVE_LAW_C3 )
KRATOS_CREATE_VARIABLE( double, INTERFACE_COMPRESSIVE_LAW_C4 )
KRATOS_CREATE_VARIABLE( double, INTERFACE_PLASTIC_DAMAGE_FACTOR_T )
KRATOS_CREATE_VARIABLE( double, INTERFACE_PLASTIC_DAMAGE_FACTOR_C )
KRATOS_CREATE_VARIABLE( double, INTERFACE_CAP_VALUE )
KRATOS_CREATE_VARIABLE( Vector, INTERFACE_TRACTION )
KRATOS_CREATE_VARIABLE( Vector, INTERFACE_DISPLACEMENT_JUMP )
KRATOS_CREATE_VARIABLE( Vector, INTERFACE_PLASTIC_DISPLACEMENT_JUMP )
KRATOS_CREATE_VARIABLE( double, YIELD_FUNCTION_VALUE )
KRATOS_CREATE_VARIABLE( int, INTERFACE_REDUCED_INTEGRATION )

// for plots
KRATOS_CREATE_VARIABLE( Vector, YIELD_SURFACE_DATA_2D_X )
KRATOS_CREATE_VARIABLE( Vector, YIELD_SURFACE_DATA_2D_Y )
KRATOS_CREATE_VARIABLE( Vector, YIELD_SURFACE_DATA_3D_X )
KRATOS_CREATE_VARIABLE( Vector, YIELD_SURFACE_DATA_3D_Y )
KRATOS_CREATE_VARIABLE( Vector, YIELD_SURFACE_DATA_3D_Z )

// for plastic law
KRATOS_CREATE_VARIABLE( double, ISOTROPIC_HARDENING )
KRATOS_CREATE_VARIABLE( double, KINEMATIC_HARDENING )
KRATOS_CREATE_VARIABLE( double, YIELD_STRESS_INFINITY )
KRATOS_CREATE_VARIABLE( double, ISOTROPIC_HARDENING_EXPONENT )
KRATOS_CREATE_VARIABLE( double, EQUIVALENT_PLASTIC_STRAIN )
KRATOS_CREATE_VARIABLE( Matrix, PLASTIC_STRAIN_TENSOR )

// for stabilized reduced integration
KRATOS_CREATE_VARIABLE( double, RI_STABILIZATION )
KRATOS_CREATE_VARIABLE( double, RI_STABILIZATION_RESIDUAL )

// for enhanced strain elements
KRATOS_CREATE_VARIABLE( double, ENH_STRAIN_PARAM_1 )
KRATOS_CREATE_VARIABLE( double, ENH_STRAIN_PARAM_2 )
KRATOS_CREATE_VARIABLE( double, ENH_STRAIN_PARAM_3 )
KRATOS_CREATE_VARIABLE( double, ENH_STRAIN_PARAM_4 )
KRATOS_CREATE_VARIABLE( double, ENH_STRAIN_PARAM_5 )

// misc
KRATOS_CREATE_VARIABLE( double, RANDOM_IMPERFECTION_FACTOR )
KRATOS_CREATE_VARIABLE( Vector, DISCONTINUITY_DIRECTION )
KRATOS_CREATE_VARIABLE( double, LAMBDA_OUTPUT )

KratosMultiScaleApplication::KratosMultiScaleApplication()
	: mSmallDisplacementInterfaceElement2D4N( 0, Element::GeometryType::Pointer( new QuadrilateralInterface2D4 <Node<3> >( Element::GeometryType::PointsArrayType( 4, Node<3>() ) ) ) )
    , mSmallDisplacementInterfaceElement3D6N( 0, Element::GeometryType::Pointer( new PrismInterface3D6 <Node<3> >( Element::GeometryType::PointsArrayType( 6, Node<3>() ) ) ) )
    , mSmallDisplacementInterfaceElement3D8N( 0, Element::GeometryType::Pointer( new HexahedraInterface3D8 <Node<3> >( Element::GeometryType::PointsArrayType( 8, Node<3>() ) ) ) )
	, mOptTriangleElement2D3N( 0, Element::GeometryType::Pointer( new Triangle2D3 <Node<3> >( Element::GeometryType::PointsArrayType( 3, Node<3>() ) ) ) )
	, mEASQuadElementV22D4N( 0, Element::GeometryType::Pointer( new Quadrilateral2D4 <Node<3> >( Element::GeometryType::PointsArrayType( 4, Node<3>() ) ) ) )
	, mQ4RIStabElement2D4N( 0, Element::GeometryType::Pointer( new Quadrilateral2D4 <Node<3> >( Element::GeometryType::PointsArrayType( 4, Node<3>() ) ) ) )
	, mEBSTElement2D3N( 0, Element::GeometryType::Pointer( new Triangle3D3 <Node<3> >( Element::GeometryType::PointsArrayType( 3, Node<3>() ) ) ) )
	, mAGQ4Element2D4N( 0, Element::GeometryType::Pointer( new Quadrilateral2D4 <Node<3> >( Element::GeometryType::PointsArrayType( 4, Node<3>() ) ) ) )
	, mPeriodicConditionLM2D2N( 0, Condition::GeometryType::Pointer( new Line2D2 <Node<3> >( Condition::GeometryType::PointsArrayType( 2, Node<3>() ) ) ) )
{}

void KratosMultiScaleApplication::Register()
{
	// calling base class register to register Kratos components
	KratosApplication::Register();
	std::cout << "Initializing KratosMultiScaleApplication... " << std::endl;

	// Register variables

	// for rve
	KRATOS_REGISTER_VARIABLE( RVE_CONSTITUTIVE_LAW_FLAG )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( RVE_FULL_DISPLACEMENT )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( RVE_WPC_LAGRANGIAN_DOF )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( RVE_WPC_LAGRANGIAN_REACTION )
	KRATOS_REGISTER_VARIABLE( RVE_WPR_LAGRANGIAN_DOF )
	KRATOS_REGISTER_VARIABLE( RVE_WPR_LAGRANGIAN_REACTION )

	// for lagrange multipliers
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( DISPLACEMENT_LAGRANGE )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( ROTATION_LAGRANGE )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( REACTION_DISPLACEMENT_LAGRANGE )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( REACTION_ROTATION_LAGRANGE )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( DISPLACEMENT_DOUBLE_LAGRANGE_1 )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( DISPLACEMENT_DOUBLE_LAGRANGE_2 )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( ROTATION_DOUBLE_LAGRANGE_1 )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( ROTATION_DOUBLE_LAGRANGE_2 )
	KRATOS_REGISTER_VARIABLE( DOUBLE_LAGRANGE_SCALE_FACTOR_ALPHA )
	KRATOS_REGISTER_VARIABLE( DOUBLE_LAGRANGE_SCALE_FACTOR_BETA )

	// for strategies
	KRATOS_REGISTER_VARIABLE( STRATEGY_SOLUTION_STEP_SOLVED )
	KRATOS_REGISTER_VARIABLE( STRATEGY_FINALIZE_SOLUTION_STEP_LEVEL )
	KRATOS_REGISTER_VARIABLE( CONSTITUTIVE_INTEGRATION_ERROR_CODE )
	KRATOS_REGISTER_VARIABLE( ITERATION_CONVERGENCE_FLAG )
	KRATOS_REGISTER_VARIABLE( SUGGESTED_TIME_STEP )

	// for damage constitutive law
	KRATOS_REGISTER_VARIABLE( DAMAGE_T )
	KRATOS_REGISTER_VARIABLE( DAMAGE_C )
	KRATOS_REGISTER_VARIABLE( FRACTURE_ENERGY_T )
	KRATOS_REGISTER_VARIABLE( FRACTURE_ENERGY_C )
	KRATOS_REGISTER_VARIABLE( YIELD_STRESS_T )
	KRATOS_REGISTER_VARIABLE( YIELD_STRESS_C )
	KRATOS_REGISTER_VARIABLE( DAMAGE_STRESS_T_0 )
	KRATOS_REGISTER_VARIABLE( DAMAGE_STRESS_C_0 )
	KRATOS_REGISTER_VARIABLE( DAMAGE_STRESS_C_P )
	KRATOS_REGISTER_VARIABLE( DAMAGE_STRESS_C_M )
	KRATOS_REGISTER_VARIABLE( DAMAGE_STRESS_C_R )
	KRATOS_REGISTER_VARIABLE( DAMAGE_STRAIN_C_P )
	KRATOS_REGISTER_VARIABLE( DAMAGE_STRAIN_C_M )
	KRATOS_REGISTER_VARIABLE( DAMAGE_COMPRESSIVE_LAW_C1 )
	KRATOS_REGISTER_VARIABLE( DAMAGE_COMPRESSIVE_LAW_C2 )
	KRATOS_REGISTER_VARIABLE( DAMAGE_COMPRESSIVE_LAW_C3 )
	KRATOS_REGISTER_VARIABLE( BIAXIAL_COMPRESSION_MULTIPLIER )
	KRATOS_REGISTER_VARIABLE( SHEAR_COMPRESSION_REDUCTION )
	KRATOS_REGISTER_VARIABLE( DAMAGE_TENSILE_SURFACE_S1 )
	KRATOS_REGISTER_VARIABLE( LUBLINER_SURFACE_PARAM_KC )
	KRATOS_REGISTER_VARIABLE( GENRANKINE_SURFACE_PARAM_A )
	KRATOS_REGISTER_VARIABLE( GENRANKINE_SURFACE_PARAM_B )
	KRATOS_REGISTER_VARIABLE( GENRANKINE_SURFACE_PARAM_C )
	KRATOS_REGISTER_VARIABLE( DAMAGE_SECANT_MATRIX )
	KRATOS_REGISTER_VARIABLE( DAMAGE_MODEL )
	KRATOS_REGISTER_VARIABLE( DAMAGE_TENSILE_MODEL )

	// for interface constitutive law
	KRATOS_REGISTER_VARIABLE( NORMAL_STIFFNESS )
	KRATOS_REGISTER_VARIABLE( TANGENTIAL_STIFFNESS )
	KRATOS_REGISTER_VARIABLE( NORMAL_STIFFNESS_COMPRESSION_MULTIPLIER )
	KRATOS_REGISTER_VARIABLE( FRACTURE_ENERGY_MODE_I )
	KRATOS_REGISTER_VARIABLE( FRACTURE_ENERGY_MODE_II )
	KRATOS_REGISTER_VARIABLE( FRACTURE_ENERGY_MODE_III )
	KRATOS_REGISTER_VARIABLE( EQUIVALENT_PLASTIC_DISPLACEMENT_JUMP_MODE_I )
	KRATOS_REGISTER_VARIABLE( EQUIVALENT_PLASTIC_DISPLACEMENT_JUMP_MODE_II )
	KRATOS_REGISTER_VARIABLE( EQUIVALENT_PLASTIC_DISPLACEMENT_JUMP_MODE_III )
	KRATOS_REGISTER_VARIABLE( INITIAL_COHESION )
	KRATOS_REGISTER_VARIABLE( INITIAL_FRICTION_ANGLE )
	KRATOS_REGISTER_VARIABLE( RESIDUAL_FRICTION_ANGLE )
	KRATOS_REGISTER_VARIABLE( INITIAL_DILATANCY_ANGLE )
	KRATOS_REGISTER_VARIABLE( RESIDUAL_DILATANCY_ANGLE )
	KRATOS_REGISTER_VARIABLE( INTERFACE_TENSILE_LAW_S0 )
	KRATOS_REGISTER_VARIABLE( INTERFACE_COMPRESSIVE_LAW_S0 )
	KRATOS_REGISTER_VARIABLE( INTERFACE_COMPRESSIVE_LAW_SP )
	KRATOS_REGISTER_VARIABLE( INTERFACE_COMPRESSIVE_LAW_SR )
	KRATOS_REGISTER_VARIABLE( INTERFACE_COMPRESSIVE_LAW_EP )
	KRATOS_REGISTER_VARIABLE( INTERFACE_COMPRESSIVE_LAW_C1 )
	KRATOS_REGISTER_VARIABLE( INTERFACE_COMPRESSIVE_LAW_C2 )
	KRATOS_REGISTER_VARIABLE( INTERFACE_COMPRESSIVE_LAW_C3 )
	KRATOS_REGISTER_VARIABLE( INTERFACE_COMPRESSIVE_LAW_C4 )
	KRATOS_REGISTER_VARIABLE( INTERFACE_PLASTIC_DAMAGE_FACTOR_T )
	KRATOS_REGISTER_VARIABLE( INTERFACE_PLASTIC_DAMAGE_FACTOR_C )
	KRATOS_REGISTER_VARIABLE( INTERFACE_CAP_VALUE )
	KRATOS_REGISTER_VARIABLE( INTERFACE_TRACTION )
	KRATOS_REGISTER_VARIABLE( INTERFACE_DISPLACEMENT_JUMP )
	KRATOS_REGISTER_VARIABLE( INTERFACE_PLASTIC_DISPLACEMENT_JUMP )
	KRATOS_REGISTER_VARIABLE( YIELD_FUNCTION_VALUE )
	KRATOS_REGISTER_VARIABLE( INTERFACE_REDUCED_INTEGRATION )

	// for plots
	KRATOS_REGISTER_VARIABLE( YIELD_SURFACE_DATA_2D_X )
	KRATOS_REGISTER_VARIABLE( YIELD_SURFACE_DATA_2D_Y )
	KRATOS_REGISTER_VARIABLE( YIELD_SURFACE_DATA_3D_X )
	KRATOS_REGISTER_VARIABLE( YIELD_SURFACE_DATA_3D_Y )
	KRATOS_REGISTER_VARIABLE( YIELD_SURFACE_DATA_3D_Z )

	// for plastic constitutive law
	KRATOS_REGISTER_VARIABLE( ISOTROPIC_HARDENING )
	KRATOS_REGISTER_VARIABLE( KINEMATIC_HARDENING )
	KRATOS_REGISTER_VARIABLE( YIELD_STRESS_INFINITY )
	KRATOS_REGISTER_VARIABLE( ISOTROPIC_HARDENING_EXPONENT )
	KRATOS_REGISTER_VARIABLE( EQUIVALENT_PLASTIC_STRAIN )
	KRATOS_REGISTER_VARIABLE( PLASTIC_STRAIN_TENSOR )

	// for stabilized reduced integration
	KRATOS_REGISTER_VARIABLE( RI_STABILIZATION )
	KRATOS_REGISTER_VARIABLE( RI_STABILIZATION_RESIDUAL )

	// for enhanced strain elements
	KRATOS_REGISTER_VARIABLE( ENH_STRAIN_PARAM_1 )
	KRATOS_REGISTER_VARIABLE( ENH_STRAIN_PARAM_2 )
	KRATOS_REGISTER_VARIABLE( ENH_STRAIN_PARAM_3 )
	KRATOS_REGISTER_VARIABLE( ENH_STRAIN_PARAM_4 )
	KRATOS_REGISTER_VARIABLE( ENH_STRAIN_PARAM_5 )

	// misc
	KRATOS_REGISTER_VARIABLE( RANDOM_IMPERFECTION_FACTOR )
	KRATOS_REGISTER_VARIABLE( DISCONTINUITY_DIRECTION )
	KRATOS_REGISTER_VARIABLE( LAMBDA_OUTPUT )

	// Register Elements

	KRATOS_REGISTER_ELEMENT( "SmallDisplacementInterfaceElement2D4N", mSmallDisplacementInterfaceElement2D4N )
	KRATOS_REGISTER_ELEMENT( "SmallDisplacementInterfaceElement3D6N", mSmallDisplacementInterfaceElement3D6N )
	KRATOS_REGISTER_ELEMENT( "SmallDisplacementInterfaceElement3D8N", mSmallDisplacementInterfaceElement3D8N )
	KRATOS_REGISTER_ELEMENT( "OptTriangleElement2D3N", mOptTriangleElement2D3N )
	KRATOS_REGISTER_ELEMENT( "EASQuadElementV22D4N", mEASQuadElementV22D4N )
	KRATOS_REGISTER_ELEMENT( "Q4RIStabElement2D4N", mQ4RIStabElement2D4N )
	KRATOS_REGISTER_ELEMENT( "EBSTElement2D3N", mEBSTElement2D3N )
	KRATOS_REGISTER_ELEMENT( "AGQ4Element2D4N", mAGQ4Element2D4N )
	KRATOS_REGISTER_CONDITION( "PeriodicConditionLM2D2N", mPeriodicConditionLM2D2N )
}

}  // namespace Kratos.

