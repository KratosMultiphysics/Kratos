//
//   Project Name:        Kratos
//   Last Modified by:    $Author: Massimo Petracca $
//   Date:                $Date: 2013-10-03 19:37:00 $
//   Revision:            $Revision: 1.00 $
//
//



// System includes


// External includes


// Project includes
#include "includes/define.h"
#include "includes/serializer.h"

#include "geometries/point_3d.h"
#include "geometries/quadrilateral_interface_2d_4.h"
#include "geometries/quadrilateral_2d_4.h"
#include "geometries/prism_interface_3d_6.h"
#include "geometries/hexahedra_interface_3d_8.h"

#include "includes/variables.h"
#include "includes/constitutive_law.h"

#include "multiscale_application.h"

namespace Kratos
{

// for rve
KRATOS_CREATE_VARIABLE( int, RVE_CONSTITUTIVE_LAW_FLAG )

// for lagrange multipliers
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( DISPLACEMENT_LAGRANGE )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( ROTATION_LAGRANGE )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( DISPLACEMENT_DOUBLE_LAGRANGE_1 )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( DISPLACEMENT_DOUBLE_LAGRANGE_2 )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( ROTATION_DOUBLE_LAGRANGE_1 )
KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS( ROTATION_DOUBLE_LAGRANGE_2 )
KRATOS_CREATE_VARIABLE( double, DOUBLE_LAGRANGE_SCALE_FACTOR )

// for strategies
KRATOS_CREATE_VARIABLE( int, STRATEGY_SOLUTION_STEP_SOLVED )
KRATOS_CREATE_VARIABLE( int, STRATEGY_FINALIZE_SOLUTION_STEP_LEVEL )
KRATOS_CREATE_VARIABLE( double, CONSTITUTIVE_INTAGRATION_ERROR_CODE )

// for damage constitutive law
KRATOS_CREATE_VARIABLE( double, DAMAGE_T )
KRATOS_CREATE_VARIABLE( double, DAMAGE_C )
KRATOS_CREATE_VARIABLE( double, FRACTURE_ENERGY_T )
KRATOS_CREATE_VARIABLE( double, FRACTURE_ENERGY_C )
KRATOS_CREATE_VARIABLE( double, YIELD_STRESS_T )
KRATOS_CREATE_VARIABLE( double, YIELD_STRESS_C )
KRATOS_CREATE_VARIABLE( int, DAMAGE_SECANT_MATRIX )
KRATOS_CREATE_VARIABLE( int, DAMAGE_MODEL )

// for custom fracture-energy-based regularization
KRATOS_CREATE_VARIABLE( double, CHARACTERISTIC_LENGTH_MULTIPLIER )

// for interface constitutive law
KRATOS_CREATE_VARIABLE( double, NORMAL_STIFFNESS )
KRATOS_CREATE_VARIABLE( double, TANGENTIAL_STIFFNESS )
KRATOS_CREATE_VARIABLE( double, NORMAL_STIFFNESS_COMPRESSION_MULTIPLIER )
KRATOS_CREATE_VARIABLE( double, INITIAL_COHESION )
KRATOS_CREATE_VARIABLE( double, FRACTURE_ENERGY_MODE_I )
KRATOS_CREATE_VARIABLE( double, FRACTURE_ENERGY_MODE_II )
KRATOS_CREATE_VARIABLE( double, YIELD_FUNCTION_VALUE )

// for plots
KRATOS_CREATE_VARIABLE( Vector, YIELD_SURFACE_DATA_2D_X )
KRATOS_CREATE_VARIABLE( Vector, YIELD_SURFACE_DATA_2D_Y )
KRATOS_CREATE_VARIABLE( Vector, YIELD_SURFACE_DATA_3D_X )
KRATOS_CREATE_VARIABLE( Vector, YIELD_SURFACE_DATA_3D_Y )
KRATOS_CREATE_VARIABLE( Vector, YIELD_SURFACE_DATA_3D_Z )

// for plastic law
KRATOS_CREATE_VARIABLE( double, ISOTROPIC_HARDENING )
KRATOS_CREATE_VARIABLE( double, KINEMATIC_HARDENING )
KRATOS_CREATE_VARIABLE( double, YIELD_STRESS_INFINITY )
KRATOS_CREATE_VARIABLE( double, ISOTROPIC_HARDENING_EXPONENT )
KRATOS_CREATE_VARIABLE( double, EQUIVALENT_PLASTIC_STRAIN )
KRATOS_CREATE_VARIABLE( Matrix, PLASTIC_STRAIN_TENSOR )


KratosMultiScaleApplication::KratosMultiScaleApplication()
	: mSmallDisplacementInterfaceElement2D4N( 0, Element::GeometryType::Pointer( new QuadrilateralInterface2D4 <Node<3> >( Element::GeometryType::PointsArrayType( 4, Node<3>() ) ) ) )
    , mSmallDisplacementInterfaceElement3D6N( 0, Element::GeometryType::Pointer( new PrismInterface3D6 <Node<3> >( Element::GeometryType::PointsArrayType( 6, Node<3>() ) ) ) )
    , mSmallDisplacementInterfaceElement3D8N( 0, Element::GeometryType::Pointer( new HexahedraInterface3D8 <Node<3> >( Element::GeometryType::PointsArrayType( 8, Node<3>() ) ) ) )
{}

void KratosMultiScaleApplication::Register()
{
    // calling base class register to register Kratos components
    KratosApplication::Register();
    std::cout << "Initializing KratosMultiScaleApplication... " << std::endl;

	// Register variables

	// for rve
	KRATOS_REGISTER_VARIABLE( RVE_CONSTITUTIVE_LAW_FLAG )

	// for lagrange multipliers
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( DISPLACEMENT_LAGRANGE )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( ROTATION_LAGRANGE )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( DISPLACEMENT_DOUBLE_LAGRANGE_1 )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( DISPLACEMENT_DOUBLE_LAGRANGE_2 )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( ROTATION_DOUBLE_LAGRANGE_1 )
	KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS( ROTATION_DOUBLE_LAGRANGE_2 )
	KRATOS_REGISTER_VARIABLE( DOUBLE_LAGRANGE_SCALE_FACTOR )

	// for strategies
	KRATOS_REGISTER_VARIABLE( STRATEGY_SOLUTION_STEP_SOLVED )
	KRATOS_REGISTER_VARIABLE( STRATEGY_FINALIZE_SOLUTION_STEP_LEVEL )
	KRATOS_REGISTER_VARIABLE( CONSTITUTIVE_INTAGRATION_ERROR_CODE )

	// for damage constitutive law
	KRATOS_REGISTER_VARIABLE( DAMAGE_T )
	KRATOS_REGISTER_VARIABLE( DAMAGE_C )
	KRATOS_REGISTER_VARIABLE( FRACTURE_ENERGY_T )
	KRATOS_REGISTER_VARIABLE( FRACTURE_ENERGY_C )
	KRATOS_REGISTER_VARIABLE( YIELD_STRESS_T )
    KRATOS_REGISTER_VARIABLE( YIELD_STRESS_C )
	KRATOS_REGISTER_VARIABLE( DAMAGE_SECANT_MATRIX )
	KRATOS_REGISTER_VARIABLE( DAMAGE_MODEL )

	// for custom fracture-energy-based regularization
	KRATOS_REGISTER_VARIABLE( CHARACTERISTIC_LENGTH_MULTIPLIER )

	// for interface constitutive law
	KRATOS_REGISTER_VARIABLE( NORMAL_STIFFNESS )
	KRATOS_REGISTER_VARIABLE( TANGENTIAL_STIFFNESS )
	KRATOS_REGISTER_VARIABLE( NORMAL_STIFFNESS_COMPRESSION_MULTIPLIER )
	KRATOS_REGISTER_VARIABLE( INITIAL_COHESION )
	KRATOS_REGISTER_VARIABLE( FRACTURE_ENERGY_MODE_I )
	KRATOS_REGISTER_VARIABLE( FRACTURE_ENERGY_MODE_II )
	KRATOS_REGISTER_VARIABLE( YIELD_FUNCTION_VALUE )

	// for plots
	KRATOS_REGISTER_VARIABLE( YIELD_SURFACE_DATA_2D_X )
	KRATOS_REGISTER_VARIABLE( YIELD_SURFACE_DATA_2D_Y )
	KRATOS_REGISTER_VARIABLE( YIELD_SURFACE_DATA_3D_X )
	KRATOS_REGISTER_VARIABLE( YIELD_SURFACE_DATA_3D_Y )
	KRATOS_REGISTER_VARIABLE( YIELD_SURFACE_DATA_3D_Z )

	// for plastic constitutive law
	KRATOS_REGISTER_VARIABLE( ISOTROPIC_HARDENING )
	KRATOS_REGISTER_VARIABLE( KINEMATIC_HARDENING )
	KRATOS_REGISTER_VARIABLE( YIELD_STRESS_INFINITY )
	KRATOS_REGISTER_VARIABLE( ISOTROPIC_HARDENING_EXPONENT )
	KRATOS_REGISTER_VARIABLE( EQUIVALENT_PLASTIC_STRAIN )
	KRATOS_REGISTER_VARIABLE( PLASTIC_STRAIN_TENSOR )

	// Register Elements

	KRATOS_REGISTER_ELEMENT( "SmallDisplacementInterfaceElement2D4N", mSmallDisplacementInterfaceElement2D4N )
	KRATOS_REGISTER_ELEMENT( "SmallDisplacementInterfaceElement3D6N", mSmallDisplacementInterfaceElement3D6N )
	KRATOS_REGISTER_ELEMENT( "SmallDisplacementInterfaceElement3D8N", mSmallDisplacementInterfaceElement3D8N )
}

}  // namespace Kratos.

