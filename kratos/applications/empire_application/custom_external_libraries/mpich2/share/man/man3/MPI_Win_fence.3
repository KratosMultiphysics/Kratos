.TH MPI_Win_fence 3 "9/20/2012" " " "MPI"
.SH NAME
MPI_Win_fence \-  Perform an MPI fence synchronization on a MPI window 
.SH SYNOPSIS
.nf
int MPI_Win_fence(int assert, MPI_Win win)
.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B assert 
- program assertion (integer) 
.PD 1
.PD 0
.TP
.B win 
- window object (handle) 
.PD 1

.SH NOTES
The 
.I assert
argument is used to indicate special conditions for the
fence that an implementation may use to optimize the 
.I MPI_Win_fence
operation.  The value zero is always correct.  Other assertion values
may be or'ed together.  Assertions that are valid for 
.I MPI_Win_fence
are:

.PD 0
.TP
.B MPI_MODE_NOSTORE 
- the local window was not updated by local stores 
(or local get or receive calls) since last synchronization. 
.PD 1
.PD 0
.TP
.B MPI_MODE_NOPUT 
- the local window will not be updated by put or accumulate 
calls after the fence call, until the ensuing (fence) synchronization. 
.PD 1
.PD 0
.TP
.B MPI_MODE_NOPRECEDE 
- the fence does not complete any sequence of locally 
issued RMA calls. If this assertion is given by any process in the window 
group, then it must be given by all processes in the group. 
.PD 1
.PD 0
.TP
.B MPI_MODE_NOSUCCEED 
- the fence does not start any sequence of locally 
issued RMA calls. If the assertion is given by any process in the window 
group, then it must be given by all processes in the group. 
.PD 1

.SH THREAD AND INTERRUPT SAFETY

This routine is thread-safe.  This means that this routine may be
safely used by multiple threads without the need for any user-provided
thread locks.  However, the routine is not interrupt safe.  Typically,
this is due to the use of memory allocation routines such as 
.I malloc
or other non-MPICH runtime routines that are themselves not interrupt-safe.

.SH NOTES FOR FORTRAN
All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
) have
an additional argument 
.I ierr
at the end of the argument list.  
.I ierr
is an integer and has the same meaning as the return value of the routine
in C.  In Fortran, MPI routines are subroutines, and are invoked with the
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type 
.I INTEGER
in Fortran.

.SH ERRORS

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error value;
C routines as the value of the function and Fortran routines in the last
argument.  Before the value is returned, the current MPI error handler is
called.  By default, this error handler aborts the MPI job.  The error handler
may be changed with 
.I MPI_Comm_set_errhandler
(for communicators),
.I MPI_File_set_errhandler
(for files), and 
.I MPI_Win_set_errhandler
(for
RMA windows).  The MPI-1 routine 
.I MPI_Errhandler_set
may be used but
its use is deprecated.  The predefined error handler
.I MPI_ERRORS_RETURN
may be used to cause error values to be returned.
Note that MPI does 
.B not
guarentee that an MPI program can continue past
an error; however, MPI implementations will attempt to continue whenever
possible.

.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.PD 0
.TP
.B MPI_ERR_OTHER 
- Other error; use 
.I MPI_Error_string
to get more information
about this error code. 
.PD 1
.PD 0
.TP
.B MPI_ERR_WIN 
- Invalid MPI window object
.PD 1
.SH LOCATION
src/mpi/rma/win_fence.c
