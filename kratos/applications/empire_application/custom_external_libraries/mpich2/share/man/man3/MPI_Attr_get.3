.TH MPI_Attr_get 3 "9/20/2012" " " "MPI"
.SH NAME
MPI_Attr_get \-  Retrieves attribute value by key 
.SH SYNOPSIS
.nf
int MPI_Attr_get(MPI_Comm comm, int keyval, void *attr_value, int *flag)
.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B comm 
- communicator to which attribute is attached (handle) 
.PD 1
.PD 0
.TP
.B keyval 
- key value (integer) 
.PD 1

.SH OUTPUT PARAMETERS
.PD 0
.TP
.B attr_value 
- attribute value, unless 
.I flag
= false 
.PD 1
.PD 0
.TP
.B flag 
- true if an attribute value was extracted;  false if no attribute is
associated with the key 
.PD 1

.SH NOTES
Attributes must be extracted from the same language as they were inserted
in with 
.I MPI_ATTR_PUT
\&.
The notes for C and Fortran below explain why.

.SH NOTES FOR C
Even though the 
.I attr_value
arguement is declared as 
.I void *
, it is
really the address of a void pointer (i.e., a 
.I void **
).  Using
a 
.I void *
, however, is more in keeping with C idiom and allows the
pointer to be passed without additional casts.


.SH THREAD AND INTERRUPT SAFETY

This routine is thread-safe.  This means that this routine may be
safely used by multiple threads without the need for any user-provided
thread locks.  However, the routine is not interrupt safe.  Typically,
this is due to the use of memory allocation routines such as 
.I malloc
or other non-MPICH runtime routines that are themselves not interrupt-safe.

.SH DEPRECATED FUNCTION
The MPI-2 standard deprecated a number of routines because MPI-2 provides
better versions.  This routine is one of those that was deprecated.  The
routine may continue to be used, but new code should use the replacement
routine.
The replacement for this routine is 
.I MPI_Comm_get_attr
\&.


.SH NOTES FOR FORTRAN
All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
) have
an additional argument 
.I ierr
at the end of the argument list.  
.I ierr
is an integer and has the same meaning as the return value of the routine
in C.  In Fortran, MPI routines are subroutines, and are invoked with the
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type 
.I INTEGER
in Fortran.

The 
.I attr_value
in Fortran is a pointer to a Fortran integer, not
a pointer to a 
.I void *
\&.


.SH ERRORS

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error value;
C routines as the value of the function and Fortran routines in the last
argument.  Before the value is returned, the current MPI error handler is
called.  By default, this error handler aborts the MPI job.  The error handler
may be changed with 
.I MPI_Comm_set_errhandler
(for communicators),
.I MPI_File_set_errhandler
(for files), and 
.I MPI_Win_set_errhandler
(for
RMA windows).  The MPI-1 routine 
.I MPI_Errhandler_set
may be used but
its use is deprecated.  The predefined error handler
.I MPI_ERRORS_RETURN
may be used to cause error values to be returned.
Note that MPI does 
.B not
guarentee that an MPI program can continue past
an error; however, MPI implementations will attempt to continue whenever
possible.

.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.PD 0
.TP
.B MPI_ERR_COMM 
- Invalid communicator.  A common error is to use a null
communicator in a call (not even allowed in 
.I MPI_Comm_rank
).
.PD 1
.PD 0
.TP
.B MPI_ERR_KEYVAL 
- Invalid keyval
.PD 1

.SH SEE ALSO
MPI_Attr_put, MPI_Keyval_create, MPI_Attr_delete, MPI_Comm_get_attr
.br
.SH LOCATION
src/mpi/attr/attr_get.c
