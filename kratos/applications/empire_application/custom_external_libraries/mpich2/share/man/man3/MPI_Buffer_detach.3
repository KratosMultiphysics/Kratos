.TH MPI_Buffer_detach 3 "9/20/2012" " " "MPI"
.SH NAME
MPI_Buffer_detach \-  Removes an existing buffer (for use in MPI_Bsend etc) 
.SH SYNOPSIS
.nf
int MPI_Buffer_detach(void *buffer, int *size)
.fi
.SH OUTPUT PARAMETERS
.PD 0
.TP
.B buffer 
- initial buffer address (choice) 
.PD 1
.PD 0
.TP
.B size 
- buffer size, in bytes (integer) 
.PD 1

.SH NOTES
The reason that 
.I MPI_Buffer_detach
returns the address and size of the
buffer being detached is to allow nested libraries to replace and restore
the buffer.  For example, consider

.nf
int size, mysize, idummy;
void *ptr, *myptr, *dummy;     
MPI_Buffer_detach( &ptr, &size );
MPI_Buffer_attach( myptr, mysize );
\&.
\&.
\&.
\&.
\&.
\&.
library code ...
\&.
\&.
\&.
MPI_Buffer_detach( &dummy, &idummy );
MPI_Buffer_attach( ptr, size );
.fi


This is much like the action of the Unix signal routine and has the same
strengths (it is simple) and weaknesses (it only works for nested usages).

Note that for this approach to work, MPI_Buffer_detach must return MPI_SUCCESS
even when there is no buffer to detach.  In that case, it returns a size of
zero.  The MPI 1.1 standard for 
.I MPI_BUFFER_DETACH
contains the text

.nf
The statements made in this section describe the behavior of MPI for
buffered-mode sends. When no buffer is currently associated, MPI behaves 
as if a zero-sized buffer is associated with the process.
.fi


This could be read as applying only to the various Bsend routines.  This
implementation takes the position that this applies to 
.I MPI_BUFFER_DETACH
as well.

.SH THREAD AND INTERRUPT SAFETY

The user is responsible for ensuring that multiple threads do not try to
update the same MPI object from different threads.  This routine should
not be used from within a signal handler.

The MPI standard defined a thread-safe interface but this does not
mean that all routines may be called without any thread locks.  For
example, two threads must not attempt to change the contents of the
same 
.I MPI_Info
object concurrently.  The user is responsible in this
case for using some mechanism, such as thread locks, to ensure that
only one thread at a time makes use of this routine.
Because the buffer for buffered sends (e.g., 
.I MPI_Bsend
) is shared by all
threads in a process, the user is responsible for ensuring that only
one thread at a time calls this routine or 
.I MPI_Buffer_attach
\&.


.SH NOTES FOR FORTRAN
All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
) have
an additional argument 
.I ierr
at the end of the argument list.  
.I ierr
is an integer and has the same meaning as the return value of the routine
in C.  In Fortran, MPI routines are subroutines, and are invoked with the
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type 
.I INTEGER
in Fortran.

The Fortran binding for this routine is different.  Because Fortran
does not have pointers, it is impossible to provide a way to use the
output of this routine to exchange buffers.  In this case, only the
size field is set.

.SH NOTES FOR C
Even though the 
.I bufferptr
argument is declared as 
.I void *
, it is
really the address of a void pointer.  See the rationale in the
standard for more details.

.SH SEE ALSO
MPI_Buffer_attach
.br
.SH LOCATION
src/mpi/pt2pt/buffree.c
