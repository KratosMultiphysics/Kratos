.TH MPIX_Win_lock_all 3 "9/20/2012" " " "MPI"
.SH NAME
MPIX_Win_lock_all \-  Begin an RMA access epoch at all processes on the  given window. 
.SH SYNOPSIS
.nf
int MPIX_Win_lock_all(int assert, MPI_Win win)
.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B assert 
- Used to optimize this call; zero may be used as a default.
See notes. (integer) 
.PD 1
.PD 0
.TP
.B win 
- window object (handle) 
.PD 1

.SH NOTES

The name of this routine is misleading.  In particular, this
routine need not block, except when the target process is the calling
process.

Implementations may restrict the use of RMA communication that is
synchronized
by lock calls to windows in memory allocated by 
.I MPI_Alloc_mem
\&.
Locks can
be used portably only in such memory.

The 
.I assert
argument is used to indicate special conditions for the
fence that an implementation may use to optimize the 
.I MPIX_Win_lock_all
operation.  The value zero is always correct.  Other assertion values
may be or'ed together.  Assertions that are valid for 
.I MPIX_Win_lock_all
are:

.PD 0
.TP
.B MPI_MODE_NOCHECK 
- no other process holds, or will attempt to acquire a 
conflicting lock, while the caller holds the window lock. This is useful 
when mutual exclusion is achieved by other means, but the coherence 
operations that may be attached to the lock and unlock calls are still 
required. 
.PD 1

.SH THREAD AND INTERRUPT SAFETY

This routine is thread-safe.  This means that this routine may be
safely used by multiple threads without the need for any user-provided
thread locks.  However, the routine is not interrupt safe.  Typically,
this is due to the use of memory allocation routines such as 
.I malloc
or other non-MPICH runtime routines that are themselves not interrupt-safe.

.SH NOTES FOR FORTRAN
All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
) have
an additional argument 
.I ierr
at the end of the argument list.  
.I ierr
is an integer and has the same meaning as the return value of the routine
in C.  In Fortran, MPI routines are subroutines, and are invoked with the
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type 
.I INTEGER
in Fortran.

.SH ERRORS

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error value;
C routines as the value of the function and Fortran routines in the last
argument.  Before the value is returned, the current MPI error handler is
called.  By default, this error handler aborts the MPI job.  The error handler
may be changed with 
.I MPI_Comm_set_errhandler
(for communicators),
.I MPI_File_set_errhandler
(for files), and 
.I MPI_Win_set_errhandler
(for
RMA windows).  The MPI-1 routine 
.I MPI_Errhandler_set
may be used but
its use is deprecated.  The predefined error handler
.I MPI_ERRORS_RETURN
may be used to cause error values to be returned.
Note that MPI does 
.B not
guarentee that an MPI program can continue past
an error; however, MPI implementations will attempt to continue whenever
possible.

.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.PD 0
.TP
.B MPI_ERR_RANK 
- Invalid source or destination rank.  Ranks must be between
zero and the size of the communicator minus one; ranks in a receive
(
.I MPI_Recv
, 
.I MPI_Irecv
, 
.I MPI_Sendrecv
, etc.) may also be 
.I MPI_ANY_SOURCE
\&.

.PD 1
.PD 0
.TP
.B MPI_ERR_WIN 
- Invalid MPI window object
.PD 1
.PD 0
.TP
.B MPI_ERR_OTHER 
- Other error; use 
.I MPI_Error_string
to get more information
about this error code. 
.PD 1
.SH LOCATION
src/mpi/rma/win_lock_all.c
