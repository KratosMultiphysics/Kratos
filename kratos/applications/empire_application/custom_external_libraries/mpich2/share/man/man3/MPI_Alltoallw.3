.TH MPI_Alltoallw 3 "9/20/2012" " " "MPI"
.SH NAME
MPI_Alltoallw \-  Generalized all-to-all communication allowing different datatypes, counts, and displacements for each partner 
.SH SYNOPSIS
.nf
int MPI_Alltoallw(MPICH2_CONST void *sendbuf, MPICH2_CONST int *sendcnts,
                  MPICH2_CONST int *sdispls, MPICH2_CONST MPI_Datatype *sendtypes,
                  void *recvbuf, MPICH2_CONST int *recvcnts, MPICH2_CONST int *rdispls,
                  MPICH2_CONST MPI_Datatype *recvtypes, MPI_Comm comm)
.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B sendbuf 
- starting address of send buffer (choice) 
.PD 1
.PD 0
.TP
.B sendcounts 
- integer array equal to the group size specifying the number of 
elements to send to each processor (integer) 
.PD 1
.PD 0
.TP
.B sdispls 
- integer array (of length group size). Entry j specifies the 
displacement in bytes (relative to sendbuf) from which to take the outgoing 
data destined for process j 
.PD 1
.PD 0
.TP
.B sendtypes 
- array of datatypes (of length group size). Entry j specifies the 
type of data to send to process j (handle) 
.PD 1
.PD 0
.TP
.B recvcounts 
- integer array equal to the group size specifying the number of
elements that can be received from each processor (integer) 
.PD 1
.PD 0
.TP
.B rdispls 
- integer array (of length group size). Entry i specifies the 
displacement in bytes (relative to recvbuf) at which to place the incoming 
data from process i 
.PD 1
.PD 0
.TP
.B recvtypes 
- array of datatypes (of length group size). Entry i specifies 
the type of data received from process i (handle) 
.PD 1
.PD 0
.TP
.B comm 
- communicator (handle) 
.PD 1

.SH OUTPUT PARAMETER
.PD 0
.TP
.B recvbuf 
- address of receive buffer (choice) 
.PD 1

.SH THREAD AND INTERRUPT SAFETY

This routine is thread-safe.  This means that this routine may be
safely used by multiple threads without the need for any user-provided
thread locks.  However, the routine is not interrupt safe.  Typically,
this is due to the use of memory allocation routines such as 
.I malloc
or other non-MPICH runtime routines that are themselves not interrupt-safe.

.SH NOTES FOR FORTRAN
All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
) have
an additional argument 
.I ierr
at the end of the argument list.  
.I ierr
is an integer and has the same meaning as the return value of the routine
in C.  In Fortran, MPI routines are subroutines, and are invoked with the
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type 
.I INTEGER
in Fortran.

.SH ERRORS

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error value;
C routines as the value of the function and Fortran routines in the last
argument.  Before the value is returned, the current MPI error handler is
called.  By default, this error handler aborts the MPI job.  The error handler
may be changed with 
.I MPI_Comm_set_errhandler
(for communicators),
.I MPI_File_set_errhandler
(for files), and 
.I MPI_Win_set_errhandler
(for
RMA windows).  The MPI-1 routine 
.I MPI_Errhandler_set
may be used but
its use is deprecated.  The predefined error handler
.I MPI_ERRORS_RETURN
may be used to cause error values to be returned.
Note that MPI does 
.B not
guarentee that an MPI program can continue past
an error; however, MPI implementations will attempt to continue whenever
possible.

.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.PD 0
.TP
.B MPI_ERR_COMM 
- Invalid communicator.  A common error is to use a null
communicator in a call (not even allowed in 
.I MPI_Comm_rank
).
.PD 1
.PD 0
.TP
.B MPI_ERR_ARG 
- Invalid argument.  Some argument is invalid and is not
identified by a specific error class (e.g., 
.I MPI_ERR_RANK
).
.PD 1
.PD 0
.TP
.B MPI_ERR_COUNT 
- Invalid count argument.  Count arguments must be 
non-negative; a count of zero is often valid.
.PD 1
.PD 0
.TP
.B MPI_ERR_TYPE 
- Invalid datatype argument.  May be an uncommitted 
MPI_Datatype (see 
.I MPI_Type_commit
).
.PD 1
.SH LOCATION
src/mpi/coll/alltoallw.c
