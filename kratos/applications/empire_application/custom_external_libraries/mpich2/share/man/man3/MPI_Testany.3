.TH MPI_Testany 3 "9/20/2012" " " "MPI"
.SH NAME
MPI_Testany \-  Tests for completion of any previdously initiated  requests 
.SH SYNOPSIS
.nf
int MPI_Testany(int count, MPI_Request array_of_requests[], int *index, 
               int *flag, MPI_Status *status)
.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B count 
- list length (integer) 
.PD 1
.PD 0
.TP
.B array_of_requests 
- array of requests (array of handles) 
.PD 1

.SH OUTPUT PARAMETERS
.PD 0
.TP
.B index 
- index of operation that completed, or 
.I MPI_UNDEFINED
if none 
completed (integer) 
.PD 1
.PD 0
.TP
.B flag 
- true if one of the operations is complete (logical) 
.PD 1
.PD 0
.TP
.B status 
- status object (Status).  May be 
.I MPI_STATUS_IGNORE
\&.

.PD 1

.SH NOTES

While it is possible to list a request handle more than once in the
.I array_of_requests
, such an action is considered erroneous and may cause the
program to unexecpectedly terminate or produce incorrect results.

.SH THREAD AND INTERRUPT SAFETY

This routine is thread-safe.  This means that this routine may be
safely used by multiple threads without the need for any user-provided
thread locks.  However, the routine is not interrupt safe.  Typically,
this is due to the use of memory allocation routines such as 
.I malloc
or other non-MPICH runtime routines that are themselves not interrupt-safe.

.SH NOTES ON THE MPI_STATUS ARGUMENT

The 
.I MPI_ERROR
field of the status return is only set if
the return from the MPI routine is 
.I MPI_ERR_IN_STATUS
\&.
That error class
is only returned by the routines that take an array of status arguments
(
.I MPI_Testall
, 
.I MPI_Testsome
, 
.I MPI_Waitall
, and 
.I MPI_Waitsome
).  In
all other cases, the value of the 
.I MPI_ERROR
field in the status is
unchanged.  See section 3.2.5 in the MPI-1.1 specification for the
exact text.

For send operations, the only use of status is for 
.I MPI_Test_cancelled
or
in the case that there is an error in one of the four routines that
may return the error class 
.I MPI_ERR_IN_STATUS
, in which case the
.I MPI_ERROR
field of status will be set.  In that case, the value
will be set to 
.I MPI_SUCCESS
for any send or receive operation that completed
successfully, or 
.I MPI_ERR_PENDING
for any operation which has neither
failed nor completed.

.SH NOTES FOR FORTRAN
All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
) have
an additional argument 
.I ierr
at the end of the argument list.  
.I ierr
is an integer and has the same meaning as the return value of the routine
in C.  In Fortran, MPI routines are subroutines, and are invoked with the
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type 
.I INTEGER
in Fortran.

.SH ERRORS

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error value;
C routines as the value of the function and Fortran routines in the last
argument.  Before the value is returned, the current MPI error handler is
called.  By default, this error handler aborts the MPI job.  The error handler
may be changed with 
.I MPI_Comm_set_errhandler
(for communicators),
.I MPI_File_set_errhandler
(for files), and 
.I MPI_Win_set_errhandler
(for
RMA windows).  The MPI-1 routine 
.I MPI_Errhandler_set
may be used but
its use is deprecated.  The predefined error handler
.I MPI_ERRORS_RETURN
may be used to cause error values to be returned.
Note that MPI does 
.B not
guarentee that an MPI program can continue past
an error; however, MPI implementations will attempt to continue whenever
possible.

.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.SH LOCATION
src/mpi/pt2pt/testany.c
