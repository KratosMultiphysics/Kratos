set(CMAKE_INCLUDE_CURRENT_DIR ON)

message("**** configuring KratosMKLSolversApplication ****")
 
include_directories( ${CMAKE_SOURCE_DIR}/kratos )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/external_includes )

#hbui added to find mkl libraries 2013
if(${USE_INTEL_GREATER_THAN_13} MATCHES TRUE)
  message("***************************************************************************")
  message("****** kratos configured for using the mkl shipped with intel >= 2013 *****")
  message("***************************************************************************")
  find_package(MKLSOLVER13 REQUIRED)
elseif(${USE_INTEL_GREATER_THAN_12} MATCHES TRUE)
  message("***************************************************************************")
  message("****** kratos configured for using the mkl shipped with intel <= 2013 *****")
  message("****** set USE_INTEL_GREATER_THAN_13 to TRUE to use a more modern version *")
  message("***************************************************************************")
  find_package(MKLSOLVER12 REQUIRED)
else(${USE_INTEL_GREATER_THAN_13} MATCHES TRUE)
  message("***************************************************************************")
  message("****** kratos configured for using the mkl shipped with intel <= 11********")
  message("****** set USE_INTEL_GREATER_THAN_13 to TRUE to use a more modern version *")
  message("***************************************************************************")
  find_package(MKLSOLVER REQUIRED)
endif(${USE_INTEL_GREATER_THAN_13} MATCHES TRUE)

include_directories(${MKLSOLVER_INCLUDE_DIR})
link_directories(${MKLSOLVER_LIBRARIES})
message("mkl include dir ${MKLSOLVER_INCLUDE_DIR}")
message("mkl libs ${MKLSOLVER_LIBRARIES}")

##add definitions needed
add_definitions(-DMKL_ILP64)
		  
## generate variables with the sources
set( KRATOS_MKL_SOLVERS_APPLICATION_SOURCES    
	${CMAKE_CURRENT_SOURCE_DIR}/mkl_solvers_application.cpp 
	${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_linear_solvers_to_python.cpp 
	${CMAKE_CURRENT_SOURCE_DIR}/custom_python/mkl_solvers_python_application.cpp 
)


# ###############################################################
add_library(KratosMKLSolversApplication SHARED ${KRATOS_MKL_SOLVERS_APPLICATION_SOURCES})
target_link_libraries(KratosMKLSolversApplication KratosCore ${MKLSOLVER_LIBRARIES} )
set_target_properties(KratosMKLSolversApplication PROPERTIES PREFIX "")

# changing the .dll suffix to .pyd 
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	set_target_properties(KratosMKLSolversApplication PROPERTIES SUFFIX .pyd)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

# changing the .dylib suffix to .so 
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	set_target_properties(KratosMKLSolversApplication PROPERTIES SUFFIX .so)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

install(TARGETS KratosMKLSolversApplication DESTINATION libs )

if(${INSTALL_PYTHON_FILES} MATCHES ON)
  get_filename_component (CURRENT_DIR_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/python_scripts DESTINATION applications/${CURRENT_DIR_NAME}  FILES_MATCHING PATTERN "*.py"  PATTERN ".svn" EXCLUDE)
endif(${INSTALL_PYTHON_FILES} MATCHES ON)

# Add to the KratosMultiphisics Python module
install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/MKLSolversApplication.py" DESTINATION KratosMultiphysics )


