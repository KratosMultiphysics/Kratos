// KRATOS  ___|  |       |       |
//       \___ \  __|  __| |   |  __| __| |   |  __| _` | |
//           | |   |    |   | (    |   |   | |   (   | |
//       _____/ \__|_|   \__,_|\___|\__|\__,_|_|  \__,_|_| MECHANICS
//
//  License: BSD License
//   license: structural_mechanics_application/license.txt
//
//  Main authors:    Vicente Mataix Ferr√°ndiz
//

#if !defined(KRATOS_CONTACT3D3N3N)
#define KRATOS_CONTACT3D3N3N

// System includes

// External includes

// Project includes
#include "custom_conditions/mortar_contact_condition.h"
#include "custom_utilities/contact_utilities.h"
#include "structural_mechanics_application.h"
#include "structural_mechanics_application_variables.h"
#include <boost/math/special_functions/sign.hpp>

namespace Kratos 
{
    ///@name Kratos Globals
    ///@{

    ///@}
    ///@name Type Definitions
    ///@{
        
    typedef Point<3>                                  PointType;
    typedef Node<3>                                    NodeType;
    typedef Geometry<NodeType>                     GeometryType;
        
    ///@}
    ///@name  Enum's
    ///@{

    ///@}
    ///@name  Functions
    ///@{

    ///@}
    ///@name Kratos Classes
    ///@{
        
class Contact3D3N3N
{
public:
    
    static inline bounded_matrix<double,27,27> ComputeGaussPointActiveLHS(
        const array_1d<double,3> N1, 
        const array_1d<double,3> N2, 
        const array_1d<double,3> Phi, 
        const double detJ, 
        const ContactData<3,3>& rContactData
        )
{
    bounded_matrix<double,27,27> lhs;
    
    const double integration_point_gap = inner_prod(rContactData.Gaps,N1);
    const bounded_matrix<double, 3,3> normalslave = rContactData.Normal_s;
    const bounded_matrix<double, 3,3> tan1slave   = rContactData.Tangent_xi_s;
    const bounded_matrix<double, 3,3> tan2slave   = rContactData.Tangent_eta_s;
    const bounded_matrix<double, 3,3> lm          = rContactData.LagrangeMultipliers;
    
    const std::vector<double> DeltaJs  = rContactData.DeltaJ_s;
    const std::vector<double> DeltaGap = rContactData.DeltaGap;
    const std::vector<array_1d<double,3>> DeltaPhi = rContactData.DeltaPhi;
    const std::vector<array_1d<double,3>> DeltaN2  = rContactData.DeltaN2;
    const std::vector<bounded_matrix<double, 3, 3>> DeltaNormals = rContactData.Delta_Normal_s;

    const double clhs0 =     N2[0]; // N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double clhs1 =     DeltaN2[9][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
    const double clhs2 =     detJ; // DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs3 =     Phi[0]; // PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs4 =     Phi[1]; // PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs5 =     Phi[2]; // PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs6 =     clhs3*lm(0,0) + clhs4*lm(1,0) + clhs5*lm(2,0);
    const double clhs7 =     clhs2*clhs6;
    const double clhs8 =     DeltaN2[10][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
    const double clhs9 =     DeltaN2[11][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
    const double clhs10 =     DeltaN2[12][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
    const double clhs11 =     DeltaN2[13][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
    const double clhs12 =     DeltaN2[14][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
    const double clhs13 =     DeltaN2[15][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
    const double clhs14 =     DeltaN2[16][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
    const double clhs15 =     DeltaN2[17][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
    const double clhs16 =     DeltaJs[0]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs17 =     clhs16*clhs6;
    const double clhs18 =     DeltaN2[0][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
    const double clhs19 =     clhs0*clhs2;
    const double clhs20 =     DeltaPhi[0][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs21 =     DeltaPhi[0][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs22 =     DeltaPhi[0][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs23 =     clhs20*lm(0,0) + clhs21*lm(1,0) + clhs22*lm(2,0);
    const double clhs24 =     DeltaJs[1]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs25 =     clhs24*clhs6;
    const double clhs26 =     DeltaN2[1][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
    const double clhs27 =     DeltaPhi[1][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs28 =     DeltaPhi[1][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs29 =     DeltaPhi[1][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs30 =     clhs27*lm(0,0) + clhs28*lm(1,0) + clhs29*lm(2,0);
    const double clhs31 =     DeltaJs[2]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs32 =     clhs31*clhs6;
    const double clhs33 =     DeltaN2[2][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
    const double clhs34 =     DeltaPhi[2][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs35 =     DeltaPhi[2][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs36 =     DeltaPhi[2][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs37 =     clhs34*lm(0,0) + clhs35*lm(1,0) + clhs36*lm(2,0);
    const double clhs38 =     DeltaJs[3]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs39 =     clhs38*clhs6;
    const double clhs40 =     DeltaN2[3][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
    const double clhs41 =     DeltaPhi[3][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs42 =     DeltaPhi[3][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs43 =     DeltaPhi[3][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs44 =     clhs41*lm(0,0) + clhs42*lm(1,0) + clhs43*lm(2,0);
    const double clhs45 =     DeltaJs[4]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs46 =     clhs45*clhs6;
    const double clhs47 =     DeltaN2[4][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
    const double clhs48 =     DeltaPhi[4][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs49 =     DeltaPhi[4][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs50 =     DeltaPhi[4][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs51 =     clhs48*lm(0,0) + clhs49*lm(1,0) + clhs50*lm(2,0);
    const double clhs52 =     DeltaJs[5]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs53 =     clhs52*clhs6;
    const double clhs54 =     DeltaN2[5][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
    const double clhs55 =     DeltaPhi[5][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs56 =     DeltaPhi[5][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs57 =     DeltaPhi[5][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs58 =     clhs55*lm(0,0) + clhs56*lm(1,0) + clhs57*lm(2,0);
    const double clhs59 =     DeltaJs[6]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs60 =     clhs59*clhs6;
    const double clhs61 =     DeltaN2[6][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
    const double clhs62 =     DeltaPhi[6][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs63 =     DeltaPhi[6][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs64 =     DeltaPhi[6][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs65 =     clhs62*lm(0,0) + clhs63*lm(1,0) + clhs64*lm(2,0);
    const double clhs66 =     DeltaJs[7]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs67 =     clhs6*clhs66;
    const double clhs68 =     DeltaN2[7][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
    const double clhs69 =     DeltaPhi[7][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs70 =     DeltaPhi[7][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs71 =     DeltaPhi[7][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs72 =     clhs69*lm(0,0) + clhs70*lm(1,0) + clhs71*lm(2,0);
    const double clhs73 =     DeltaJs[8]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs74 =     clhs6*clhs73;
    const double clhs75 =     DeltaN2[8][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
    const double clhs76 =     DeltaPhi[8][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs77 =     DeltaPhi[8][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs78 =     DeltaPhi[8][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs79 =     clhs76*lm(0,0) + clhs77*lm(1,0) + clhs78*lm(2,0);
    const double clhs80 =     clhs19*clhs3;
    const double clhs81 =     clhs19*clhs4;
    const double clhs82 =     clhs19*clhs5;
    const double clhs83 =     clhs3*lm(0,1) + clhs4*lm(1,1) + clhs5*lm(2,1);
    const double clhs84 =     clhs2*clhs83;
    const double clhs85 =     clhs16*clhs83;
    const double clhs86 =     clhs20*lm(0,1) + clhs21*lm(1,1) + clhs22*lm(2,1);
    const double clhs87 =     clhs24*clhs83;
    const double clhs88 =     clhs27*lm(0,1) + clhs28*lm(1,1) + clhs29*lm(2,1);
    const double clhs89 =     clhs31*clhs83;
    const double clhs90 =     clhs34*lm(0,1) + clhs35*lm(1,1) + clhs36*lm(2,1);
    const double clhs91 =     clhs38*clhs83;
    const double clhs92 =     clhs41*lm(0,1) + clhs42*lm(1,1) + clhs43*lm(2,1);
    const double clhs93 =     clhs45*clhs83;
    const double clhs94 =     clhs48*lm(0,1) + clhs49*lm(1,1) + clhs50*lm(2,1);
    const double clhs95 =     clhs52*clhs83;
    const double clhs96 =     clhs55*lm(0,1) + clhs56*lm(1,1) + clhs57*lm(2,1);
    const double clhs97 =     clhs59*clhs83;
    const double clhs98 =     clhs62*lm(0,1) + clhs63*lm(1,1) + clhs64*lm(2,1);
    const double clhs99 =     clhs66*clhs83;
    const double clhs100 =     clhs69*lm(0,1) + clhs70*lm(1,1) + clhs71*lm(2,1);
    const double clhs101 =     clhs73*clhs83;
    const double clhs102 =     clhs76*lm(0,1) + clhs77*lm(1,1) + clhs78*lm(2,1);
    const double clhs103 =     clhs3*lm(0,2) + clhs4*lm(1,2) + clhs5*lm(2,2);
    const double clhs104 =     clhs103*clhs2;
    const double clhs105 =     clhs103*clhs16;
    const double clhs106 =     clhs20*lm(0,2) + clhs21*lm(1,2) + clhs22*lm(2,2);
    const double clhs107 =     clhs103*clhs24;
    const double clhs108 =     clhs27*lm(0,2) + clhs28*lm(1,2) + clhs29*lm(2,2);
    const double clhs109 =     clhs103*clhs31;
    const double clhs110 =     clhs34*lm(0,2) + clhs35*lm(1,2) + clhs36*lm(2,2);
    const double clhs111 =     clhs103*clhs38;
    const double clhs112 =     clhs41*lm(0,2) + clhs42*lm(1,2) + clhs43*lm(2,2);
    const double clhs113 =     clhs103*clhs45;
    const double clhs114 =     clhs48*lm(0,2) + clhs49*lm(1,2) + clhs50*lm(2,2);
    const double clhs115 =     clhs103*clhs52;
    const double clhs116 =     clhs55*lm(0,2) + clhs56*lm(1,2) + clhs57*lm(2,2);
    const double clhs117 =     clhs103*clhs59;
    const double clhs118 =     clhs62*lm(0,2) + clhs63*lm(1,2) + clhs64*lm(2,2);
    const double clhs119 =     clhs103*clhs66;
    const double clhs120 =     clhs69*lm(0,2) + clhs70*lm(1,2) + clhs71*lm(2,2);
    const double clhs121 =     clhs103*clhs73;
    const double clhs122 =     clhs76*lm(0,2) + clhs77*lm(1,2) + clhs78*lm(2,2);
    const double clhs123 =     N2[1]; // N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double clhs124 =     DeltaN2[9][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
    const double clhs125 =     DeltaN2[10][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
    const double clhs126 =     DeltaN2[11][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
    const double clhs127 =     DeltaN2[12][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
    const double clhs128 =     DeltaN2[13][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
    const double clhs129 =     DeltaN2[14][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
    const double clhs130 =     DeltaN2[15][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
    const double clhs131 =     DeltaN2[16][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
    const double clhs132 =     DeltaN2[17][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
    const double clhs133 =     DeltaN2[0][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
    const double clhs134 =     clhs123*clhs2;
    const double clhs135 =     DeltaN2[1][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
    const double clhs136 =     DeltaN2[2][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
    const double clhs137 =     DeltaN2[3][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
    const double clhs138 =     DeltaN2[4][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
    const double clhs139 =     DeltaN2[5][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
    const double clhs140 =     DeltaN2[6][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
    const double clhs141 =     DeltaN2[7][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
    const double clhs142 =     DeltaN2[8][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
    const double clhs143 =     clhs134*clhs3;
    const double clhs144 =     clhs134*clhs4;
    const double clhs145 =     clhs134*clhs5;
    const double clhs146 =     N2[2]; // N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double clhs147 =     DeltaN2[9][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
    const double clhs148 =     DeltaN2[10][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
    const double clhs149 =     DeltaN2[11][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
    const double clhs150 =     DeltaN2[12][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
    const double clhs151 =     DeltaN2[13][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
    const double clhs152 =     DeltaN2[14][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
    const double clhs153 =     DeltaN2[15][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
    const double clhs154 =     DeltaN2[16][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
    const double clhs155 =     DeltaN2[17][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
    const double clhs156 =     DeltaN2[0][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
    const double clhs157 =     clhs146*clhs2;
    const double clhs158 =     DeltaN2[1][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
    const double clhs159 =     DeltaN2[2][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
    const double clhs160 =     DeltaN2[3][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
    const double clhs161 =     DeltaN2[4][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
    const double clhs162 =     DeltaN2[5][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
    const double clhs163 =     DeltaN2[6][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
    const double clhs164 =     DeltaN2[7][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
    const double clhs165 =     DeltaN2[8][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
    const double clhs166 =     clhs157*clhs3;
    const double clhs167 =     clhs157*clhs4;
    const double clhs168 =     clhs157*clhs5;
    const double clhs169 =     clhs17 + clhs2*clhs23;
    const double clhs170 =     clhs2*clhs30 + clhs25;
    const double clhs171 =     clhs2*clhs37 + clhs32;
    const double clhs172 =     clhs2*clhs44 + clhs39;
    const double clhs173 =     clhs2*clhs51 + clhs46;
    const double clhs174 =     clhs2*clhs58 + clhs53;
    const double clhs175 =     clhs2*clhs65 + clhs60;
    const double clhs176 =     clhs2*clhs72 + clhs67;
    const double clhs177 =     clhs2*clhs79 + clhs74;
    const double clhs178 =     N1[0]*clhs2;
    const double clhs179 =     -clhs178*clhs3;
    const double clhs180 =     -clhs178*clhs4;
    const double clhs181 =     -clhs178*clhs5;
    const double clhs182 =     clhs2*clhs86 + clhs85;
    const double clhs183 =     clhs2*clhs88 + clhs87;
    const double clhs184 =     clhs2*clhs90 + clhs89;
    const double clhs185 =     clhs2*clhs92 + clhs91;
    const double clhs186 =     clhs2*clhs94 + clhs93;
    const double clhs187 =     clhs2*clhs96 + clhs95;
    const double clhs188 =     clhs2*clhs98 + clhs97;
    const double clhs189 =     clhs100*clhs2 + clhs99;
    const double clhs190 =     clhs101 + clhs102*clhs2;
    const double clhs191 =     clhs105 + clhs106*clhs2;
    const double clhs192 =     clhs107 + clhs108*clhs2;
    const double clhs193 =     clhs109 + clhs110*clhs2;
    const double clhs194 =     clhs111 + clhs112*clhs2;
    const double clhs195 =     clhs113 + clhs114*clhs2;
    const double clhs196 =     clhs115 + clhs116*clhs2;
    const double clhs197 =     clhs117 + clhs118*clhs2;
    const double clhs198 =     clhs119 + clhs120*clhs2;
    const double clhs199 =     clhs121 + clhs122*clhs2;
    const double clhs200 =     N1[1]*clhs2;
    const double clhs201 =     -clhs200*clhs3;
    const double clhs202 =     -clhs200*clhs4;
    const double clhs203 =     -clhs200*clhs5;
    const double clhs204 =     N1[2]*clhs2;
    const double clhs205 =     -clhs204*clhs3;
    const double clhs206 =     -clhs204*clhs4;
    const double clhs207 =     -clhs204*clhs5;
    const double clhs208 =     integration_point_gap; // GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double clhs209 =     DeltaGap[9]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
    const double clhs210 =     normalslave(0,0); // NORMALSLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs211 =     clhs2*clhs210*clhs3;
    const double clhs212 =     DeltaGap[10]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
    const double clhs213 =     DeltaGap[11]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
    const double clhs214 =     DeltaGap[12]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
    const double clhs215 =     DeltaGap[13]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
    const double clhs216 =     DeltaGap[14]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
    const double clhs217 =     DeltaGap[15]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
    const double clhs218 =     DeltaGap[16]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
    const double clhs219 =     DeltaGap[17]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
    const double clhs220 =     clhs2*clhs208*clhs3;
    const double clhs221 =     DeltaGap[0]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
    const double clhs222 =     clhs208*clhs210*clhs3;
    const double clhs223 =     clhs2*clhs208*clhs210;
    const double clhs224 =     DeltaGap[1]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
    const double clhs225 =     DeltaGap[2]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
    const double clhs226 =     DeltaGap[3]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
    const double clhs227 =     DeltaGap[4]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
    const double clhs228 =     DeltaGap[5]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
    const double clhs229 =     DeltaGap[6]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
    const double clhs230 =     DeltaGap[7]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
    const double clhs231 =     DeltaGap[8]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
    const double clhs232 =     normalslave(0,1); // NORMALSLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs233 =     clhs2*clhs232*clhs3;
    const double clhs234 =     clhs208*clhs232*clhs3;
    const double clhs235 =     clhs2*clhs208*clhs232;
    const double clhs236 =     normalslave(0,2); // NORMALSLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs237 =     clhs2*clhs236*clhs3;
    const double clhs238 =     clhs208*clhs236*clhs3;
    const double clhs239 =     clhs2*clhs208*clhs236;
    const double clhs240 =     normalslave(1,0); // NORMALSLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs241 =     clhs2*clhs240*clhs4;
    const double clhs242 =     clhs2*clhs208*clhs4;
    const double clhs243 =     clhs208*clhs240*clhs4;
    const double clhs244 =     clhs2*clhs208*clhs240;
    const double clhs245 =     normalslave(1,1); // NORMALSLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs246 =     clhs2*clhs245*clhs4;
    const double clhs247 =     clhs208*clhs245*clhs4;
    const double clhs248 =     clhs2*clhs208*clhs245;
    const double clhs249 =     normalslave(1,2); // NORMALSLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs250 =     clhs2*clhs249*clhs4;
    const double clhs251 =     clhs208*clhs249*clhs4;
    const double clhs252 =     clhs2*clhs208*clhs249;
    const double clhs253 =     normalslave(2,0); // NORMALSLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs254 =     clhs2*clhs253*clhs5;
    const double clhs255 =     clhs2*clhs208*clhs5;
    const double clhs256 =     clhs208*clhs253*clhs5;
    const double clhs257 =     clhs2*clhs208*clhs253;
    const double clhs258 =     normalslave(2,1); // NORMALSLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs259 =     clhs2*clhs258*clhs5;
    const double clhs260 =     clhs208*clhs258*clhs5;
    const double clhs261 =     clhs2*clhs208*clhs258;
    const double clhs262 =     normalslave(2,2); // NORMALSLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs263 =     clhs2*clhs262*clhs5;
    const double clhs264 =     clhs208*clhs262*clhs5;
    const double clhs265 =     clhs2*clhs208*clhs262;

    lhs(0,0)=clhs1*clhs7;
    lhs(0,1)=clhs7*clhs8;
    lhs(0,2)=clhs7*clhs9;
    lhs(0,3)=clhs10*clhs7;
    lhs(0,4)=clhs11*clhs7;
    lhs(0,5)=clhs12*clhs7;
    lhs(0,6)=clhs13*clhs7;
    lhs(0,7)=clhs14*clhs7;
    lhs(0,8)=clhs15*clhs7;
    lhs(0,9)=clhs0*clhs17 + clhs18*clhs7 + clhs19*clhs23;
    lhs(0,10)=clhs0*clhs25 + clhs19*clhs30 + clhs26*clhs7;
    lhs(0,11)=clhs0*clhs32 + clhs19*clhs37 + clhs33*clhs7;
    lhs(0,12)=clhs0*clhs39 + clhs19*clhs44 + clhs40*clhs7;
    lhs(0,13)=clhs0*clhs46 + clhs19*clhs51 + clhs47*clhs7;
    lhs(0,14)=clhs0*clhs53 + clhs19*clhs58 + clhs54*clhs7;
    lhs(0,15)=clhs0*clhs60 + clhs19*clhs65 + clhs61*clhs7;
    lhs(0,16)=clhs0*clhs67 + clhs19*clhs72 + clhs68*clhs7;
    lhs(0,17)=clhs0*clhs74 + clhs19*clhs79 + clhs7*clhs75;
    lhs(0,18)=clhs80;
    lhs(0,19)=0;
    lhs(0,20)=0;
    lhs(0,21)=clhs81;
    lhs(0,22)=0;
    lhs(0,23)=0;
    lhs(0,24)=clhs82;
    lhs(0,25)=0;
    lhs(0,26)=0;
    lhs(1,0)=clhs1*clhs84;
    lhs(1,1)=clhs8*clhs84;
    lhs(1,2)=clhs84*clhs9;
    lhs(1,3)=clhs10*clhs84;
    lhs(1,4)=clhs11*clhs84;
    lhs(1,5)=clhs12*clhs84;
    lhs(1,6)=clhs13*clhs84;
    lhs(1,7)=clhs14*clhs84;
    lhs(1,8)=clhs15*clhs84;
    lhs(1,9)=clhs0*clhs85 + clhs18*clhs84 + clhs19*clhs86;
    lhs(1,10)=clhs0*clhs87 + clhs19*clhs88 + clhs26*clhs84;
    lhs(1,11)=clhs0*clhs89 + clhs19*clhs90 + clhs33*clhs84;
    lhs(1,12)=clhs0*clhs91 + clhs19*clhs92 + clhs40*clhs84;
    lhs(1,13)=clhs0*clhs93 + clhs19*clhs94 + clhs47*clhs84;
    lhs(1,14)=clhs0*clhs95 + clhs19*clhs96 + clhs54*clhs84;
    lhs(1,15)=clhs0*clhs97 + clhs19*clhs98 + clhs61*clhs84;
    lhs(1,16)=clhs0*clhs99 + clhs100*clhs19 + clhs68*clhs84;
    lhs(1,17)=clhs0*clhs101 + clhs102*clhs19 + clhs75*clhs84;
    lhs(1,18)=0;
    lhs(1,19)=clhs80;
    lhs(1,20)=0;
    lhs(1,21)=0;
    lhs(1,22)=clhs81;
    lhs(1,23)=0;
    lhs(1,24)=0;
    lhs(1,25)=clhs82;
    lhs(1,26)=0;
    lhs(2,0)=clhs1*clhs104;
    lhs(2,1)=clhs104*clhs8;
    lhs(2,2)=clhs104*clhs9;
    lhs(2,3)=clhs10*clhs104;
    lhs(2,4)=clhs104*clhs11;
    lhs(2,5)=clhs104*clhs12;
    lhs(2,6)=clhs104*clhs13;
    lhs(2,7)=clhs104*clhs14;
    lhs(2,8)=clhs104*clhs15;
    lhs(2,9)=clhs0*clhs105 + clhs104*clhs18 + clhs106*clhs19;
    lhs(2,10)=clhs0*clhs107 + clhs104*clhs26 + clhs108*clhs19;
    lhs(2,11)=clhs0*clhs109 + clhs104*clhs33 + clhs110*clhs19;
    lhs(2,12)=clhs0*clhs111 + clhs104*clhs40 + clhs112*clhs19;
    lhs(2,13)=clhs0*clhs113 + clhs104*clhs47 + clhs114*clhs19;
    lhs(2,14)=clhs0*clhs115 + clhs104*clhs54 + clhs116*clhs19;
    lhs(2,15)=clhs0*clhs117 + clhs104*clhs61 + clhs118*clhs19;
    lhs(2,16)=clhs0*clhs119 + clhs104*clhs68 + clhs120*clhs19;
    lhs(2,17)=clhs0*clhs121 + clhs104*clhs75 + clhs122*clhs19;
    lhs(2,18)=0;
    lhs(2,19)=0;
    lhs(2,20)=clhs80;
    lhs(2,21)=0;
    lhs(2,22)=0;
    lhs(2,23)=clhs81;
    lhs(2,24)=0;
    lhs(2,25)=0;
    lhs(2,26)=clhs82;
    lhs(3,0)=clhs124*clhs7;
    lhs(3,1)=clhs125*clhs7;
    lhs(3,2)=clhs126*clhs7;
    lhs(3,3)=clhs127*clhs7;
    lhs(3,4)=clhs128*clhs7;
    lhs(3,5)=clhs129*clhs7;
    lhs(3,6)=clhs130*clhs7;
    lhs(3,7)=clhs131*clhs7;
    lhs(3,8)=clhs132*clhs7;
    lhs(3,9)=clhs123*clhs17 + clhs133*clhs7 + clhs134*clhs23;
    lhs(3,10)=clhs123*clhs25 + clhs134*clhs30 + clhs135*clhs7;
    lhs(3,11)=clhs123*clhs32 + clhs134*clhs37 + clhs136*clhs7;
    lhs(3,12)=clhs123*clhs39 + clhs134*clhs44 + clhs137*clhs7;
    lhs(3,13)=clhs123*clhs46 + clhs134*clhs51 + clhs138*clhs7;
    lhs(3,14)=clhs123*clhs53 + clhs134*clhs58 + clhs139*clhs7;
    lhs(3,15)=clhs123*clhs60 + clhs134*clhs65 + clhs140*clhs7;
    lhs(3,16)=clhs123*clhs67 + clhs134*clhs72 + clhs141*clhs7;
    lhs(3,17)=clhs123*clhs74 + clhs134*clhs79 + clhs142*clhs7;
    lhs(3,18)=clhs143;
    lhs(3,19)=0;
    lhs(3,20)=0;
    lhs(3,21)=clhs144;
    lhs(3,22)=0;
    lhs(3,23)=0;
    lhs(3,24)=clhs145;
    lhs(3,25)=0;
    lhs(3,26)=0;
    lhs(4,0)=clhs124*clhs84;
    lhs(4,1)=clhs125*clhs84;
    lhs(4,2)=clhs126*clhs84;
    lhs(4,3)=clhs127*clhs84;
    lhs(4,4)=clhs128*clhs84;
    lhs(4,5)=clhs129*clhs84;
    lhs(4,6)=clhs130*clhs84;
    lhs(4,7)=clhs131*clhs84;
    lhs(4,8)=clhs132*clhs84;
    lhs(4,9)=clhs123*clhs85 + clhs133*clhs84 + clhs134*clhs86;
    lhs(4,10)=clhs123*clhs87 + clhs134*clhs88 + clhs135*clhs84;
    lhs(4,11)=clhs123*clhs89 + clhs134*clhs90 + clhs136*clhs84;
    lhs(4,12)=clhs123*clhs91 + clhs134*clhs92 + clhs137*clhs84;
    lhs(4,13)=clhs123*clhs93 + clhs134*clhs94 + clhs138*clhs84;
    lhs(4,14)=clhs123*clhs95 + clhs134*clhs96 + clhs139*clhs84;
    lhs(4,15)=clhs123*clhs97 + clhs134*clhs98 + clhs140*clhs84;
    lhs(4,16)=clhs100*clhs134 + clhs123*clhs99 + clhs141*clhs84;
    lhs(4,17)=clhs101*clhs123 + clhs102*clhs134 + clhs142*clhs84;
    lhs(4,18)=0;
    lhs(4,19)=clhs143;
    lhs(4,20)=0;
    lhs(4,21)=0;
    lhs(4,22)=clhs144;
    lhs(4,23)=0;
    lhs(4,24)=0;
    lhs(4,25)=clhs145;
    lhs(4,26)=0;
    lhs(5,0)=clhs104*clhs124;
    lhs(5,1)=clhs104*clhs125;
    lhs(5,2)=clhs104*clhs126;
    lhs(5,3)=clhs104*clhs127;
    lhs(5,4)=clhs104*clhs128;
    lhs(5,5)=clhs104*clhs129;
    lhs(5,6)=clhs104*clhs130;
    lhs(5,7)=clhs104*clhs131;
    lhs(5,8)=clhs104*clhs132;
    lhs(5,9)=clhs104*clhs133 + clhs105*clhs123 + clhs106*clhs134;
    lhs(5,10)=clhs104*clhs135 + clhs107*clhs123 + clhs108*clhs134;
    lhs(5,11)=clhs104*clhs136 + clhs109*clhs123 + clhs110*clhs134;
    lhs(5,12)=clhs104*clhs137 + clhs111*clhs123 + clhs112*clhs134;
    lhs(5,13)=clhs104*clhs138 + clhs113*clhs123 + clhs114*clhs134;
    lhs(5,14)=clhs104*clhs139 + clhs115*clhs123 + clhs116*clhs134;
    lhs(5,15)=clhs104*clhs140 + clhs117*clhs123 + clhs118*clhs134;
    lhs(5,16)=clhs104*clhs141 + clhs119*clhs123 + clhs120*clhs134;
    lhs(5,17)=clhs104*clhs142 + clhs121*clhs123 + clhs122*clhs134;
    lhs(5,18)=0;
    lhs(5,19)=0;
    lhs(5,20)=clhs143;
    lhs(5,21)=0;
    lhs(5,22)=0;
    lhs(5,23)=clhs144;
    lhs(5,24)=0;
    lhs(5,25)=0;
    lhs(5,26)=clhs145;
    lhs(6,0)=clhs147*clhs7;
    lhs(6,1)=clhs148*clhs7;
    lhs(6,2)=clhs149*clhs7;
    lhs(6,3)=clhs150*clhs7;
    lhs(6,4)=clhs151*clhs7;
    lhs(6,5)=clhs152*clhs7;
    lhs(6,6)=clhs153*clhs7;
    lhs(6,7)=clhs154*clhs7;
    lhs(6,8)=clhs155*clhs7;
    lhs(6,9)=clhs146*clhs17 + clhs156*clhs7 + clhs157*clhs23;
    lhs(6,10)=clhs146*clhs25 + clhs157*clhs30 + clhs158*clhs7;
    lhs(6,11)=clhs146*clhs32 + clhs157*clhs37 + clhs159*clhs7;
    lhs(6,12)=clhs146*clhs39 + clhs157*clhs44 + clhs160*clhs7;
    lhs(6,13)=clhs146*clhs46 + clhs157*clhs51 + clhs161*clhs7;
    lhs(6,14)=clhs146*clhs53 + clhs157*clhs58 + clhs162*clhs7;
    lhs(6,15)=clhs146*clhs60 + clhs157*clhs65 + clhs163*clhs7;
    lhs(6,16)=clhs146*clhs67 + clhs157*clhs72 + clhs164*clhs7;
    lhs(6,17)=clhs146*clhs74 + clhs157*clhs79 + clhs165*clhs7;
    lhs(6,18)=clhs166;
    lhs(6,19)=0;
    lhs(6,20)=0;
    lhs(6,21)=clhs167;
    lhs(6,22)=0;
    lhs(6,23)=0;
    lhs(6,24)=clhs168;
    lhs(6,25)=0;
    lhs(6,26)=0;
    lhs(7,0)=clhs147*clhs84;
    lhs(7,1)=clhs148*clhs84;
    lhs(7,2)=clhs149*clhs84;
    lhs(7,3)=clhs150*clhs84;
    lhs(7,4)=clhs151*clhs84;
    lhs(7,5)=clhs152*clhs84;
    lhs(7,6)=clhs153*clhs84;
    lhs(7,7)=clhs154*clhs84;
    lhs(7,8)=clhs155*clhs84;
    lhs(7,9)=clhs146*clhs85 + clhs156*clhs84 + clhs157*clhs86;
    lhs(7,10)=clhs146*clhs87 + clhs157*clhs88 + clhs158*clhs84;
    lhs(7,11)=clhs146*clhs89 + clhs157*clhs90 + clhs159*clhs84;
    lhs(7,12)=clhs146*clhs91 + clhs157*clhs92 + clhs160*clhs84;
    lhs(7,13)=clhs146*clhs93 + clhs157*clhs94 + clhs161*clhs84;
    lhs(7,14)=clhs146*clhs95 + clhs157*clhs96 + clhs162*clhs84;
    lhs(7,15)=clhs146*clhs97 + clhs157*clhs98 + clhs163*clhs84;
    lhs(7,16)=clhs100*clhs157 + clhs146*clhs99 + clhs164*clhs84;
    lhs(7,17)=clhs101*clhs146 + clhs102*clhs157 + clhs165*clhs84;
    lhs(7,18)=0;
    lhs(7,19)=clhs166;
    lhs(7,20)=0;
    lhs(7,21)=0;
    lhs(7,22)=clhs167;
    lhs(7,23)=0;
    lhs(7,24)=0;
    lhs(7,25)=clhs168;
    lhs(7,26)=0;
    lhs(8,0)=clhs104*clhs147;
    lhs(8,1)=clhs104*clhs148;
    lhs(8,2)=clhs104*clhs149;
    lhs(8,3)=clhs104*clhs150;
    lhs(8,4)=clhs104*clhs151;
    lhs(8,5)=clhs104*clhs152;
    lhs(8,6)=clhs104*clhs153;
    lhs(8,7)=clhs104*clhs154;
    lhs(8,8)=clhs104*clhs155;
    lhs(8,9)=clhs104*clhs156 + clhs105*clhs146 + clhs106*clhs157;
    lhs(8,10)=clhs104*clhs158 + clhs107*clhs146 + clhs108*clhs157;
    lhs(8,11)=clhs104*clhs159 + clhs109*clhs146 + clhs110*clhs157;
    lhs(8,12)=clhs104*clhs160 + clhs111*clhs146 + clhs112*clhs157;
    lhs(8,13)=clhs104*clhs161 + clhs113*clhs146 + clhs114*clhs157;
    lhs(8,14)=clhs104*clhs162 + clhs115*clhs146 + clhs116*clhs157;
    lhs(8,15)=clhs104*clhs163 + clhs117*clhs146 + clhs118*clhs157;
    lhs(8,16)=clhs104*clhs164 + clhs119*clhs146 + clhs120*clhs157;
    lhs(8,17)=clhs104*clhs165 + clhs121*clhs146 + clhs122*clhs157;
    lhs(8,18)=0;
    lhs(8,19)=0;
    lhs(8,20)=clhs166;
    lhs(8,21)=0;
    lhs(8,22)=0;
    lhs(8,23)=clhs167;
    lhs(8,24)=0;
    lhs(8,25)=0;
    lhs(8,26)=clhs168;
    lhs(9,0)=0;
    lhs(9,1)=0;
    lhs(9,2)=0;
    lhs(9,3)=0;
    lhs(9,4)=0;
    lhs(9,5)=0;
    lhs(9,6)=0;
    lhs(9,7)=0;
    lhs(9,8)=0;
    lhs(9,9)=-N1[0]*clhs169;
    lhs(9,10)=-N1[0]*clhs170;
    lhs(9,11)=-N1[0]*clhs171;
    lhs(9,12)=-N1[0]*clhs172;
    lhs(9,13)=-N1[0]*clhs173;
    lhs(9,14)=-N1[0]*clhs174;
    lhs(9,15)=-N1[0]*clhs175;
    lhs(9,16)=-N1[0]*clhs176;
    lhs(9,17)=-N1[0]*clhs177;
    lhs(9,18)=clhs179;
    lhs(9,19)=0;
    lhs(9,20)=0;
    lhs(9,21)=clhs180;
    lhs(9,22)=0;
    lhs(9,23)=0;
    lhs(9,24)=clhs181;
    lhs(9,25)=0;
    lhs(9,26)=0;
    lhs(10,0)=0;
    lhs(10,1)=0;
    lhs(10,2)=0;
    lhs(10,3)=0;
    lhs(10,4)=0;
    lhs(10,5)=0;
    lhs(10,6)=0;
    lhs(10,7)=0;
    lhs(10,8)=0;
    lhs(10,9)=-N1[0]*clhs182;
    lhs(10,10)=-N1[0]*clhs183;
    lhs(10,11)=-N1[0]*clhs184;
    lhs(10,12)=-N1[0]*clhs185;
    lhs(10,13)=-N1[0]*clhs186;
    lhs(10,14)=-N1[0]*clhs187;
    lhs(10,15)=-N1[0]*clhs188;
    lhs(10,16)=-N1[0]*clhs189;
    lhs(10,17)=-N1[0]*clhs190;
    lhs(10,18)=0;
    lhs(10,19)=clhs179;
    lhs(10,20)=0;
    lhs(10,21)=0;
    lhs(10,22)=clhs180;
    lhs(10,23)=0;
    lhs(10,24)=0;
    lhs(10,25)=clhs181;
    lhs(10,26)=0;
    lhs(11,0)=0;
    lhs(11,1)=0;
    lhs(11,2)=0;
    lhs(11,3)=0;
    lhs(11,4)=0;
    lhs(11,5)=0;
    lhs(11,6)=0;
    lhs(11,7)=0;
    lhs(11,8)=0;
    lhs(11,9)=-N1[0]*clhs191;
    lhs(11,10)=-N1[0]*clhs192;
    lhs(11,11)=-N1[0]*clhs193;
    lhs(11,12)=-N1[0]*clhs194;
    lhs(11,13)=-N1[0]*clhs195;
    lhs(11,14)=-N1[0]*clhs196;
    lhs(11,15)=-N1[0]*clhs197;
    lhs(11,16)=-N1[0]*clhs198;
    lhs(11,17)=-N1[0]*clhs199;
    lhs(11,18)=0;
    lhs(11,19)=0;
    lhs(11,20)=clhs179;
    lhs(11,21)=0;
    lhs(11,22)=0;
    lhs(11,23)=clhs180;
    lhs(11,24)=0;
    lhs(11,25)=0;
    lhs(11,26)=clhs181;
    lhs(12,0)=0;
    lhs(12,1)=0;
    lhs(12,2)=0;
    lhs(12,3)=0;
    lhs(12,4)=0;
    lhs(12,5)=0;
    lhs(12,6)=0;
    lhs(12,7)=0;
    lhs(12,8)=0;
    lhs(12,9)=-N1[1]*clhs169;
    lhs(12,10)=-N1[1]*clhs170;
    lhs(12,11)=-N1[1]*clhs171;
    lhs(12,12)=-N1[1]*clhs172;
    lhs(12,13)=-N1[1]*clhs173;
    lhs(12,14)=-N1[1]*clhs174;
    lhs(12,15)=-N1[1]*clhs175;
    lhs(12,16)=-N1[1]*clhs176;
    lhs(12,17)=-N1[1]*clhs177;
    lhs(12,18)=clhs201;
    lhs(12,19)=0;
    lhs(12,20)=0;
    lhs(12,21)=clhs202;
    lhs(12,22)=0;
    lhs(12,23)=0;
    lhs(12,24)=clhs203;
    lhs(12,25)=0;
    lhs(12,26)=0;
    lhs(13,0)=0;
    lhs(13,1)=0;
    lhs(13,2)=0;
    lhs(13,3)=0;
    lhs(13,4)=0;
    lhs(13,5)=0;
    lhs(13,6)=0;
    lhs(13,7)=0;
    lhs(13,8)=0;
    lhs(13,9)=-N1[1]*clhs182;
    lhs(13,10)=-N1[1]*clhs183;
    lhs(13,11)=-N1[1]*clhs184;
    lhs(13,12)=-N1[1]*clhs185;
    lhs(13,13)=-N1[1]*clhs186;
    lhs(13,14)=-N1[1]*clhs187;
    lhs(13,15)=-N1[1]*clhs188;
    lhs(13,16)=-N1[1]*clhs189;
    lhs(13,17)=-N1[1]*clhs190;
    lhs(13,18)=0;
    lhs(13,19)=clhs201;
    lhs(13,20)=0;
    lhs(13,21)=0;
    lhs(13,22)=clhs202;
    lhs(13,23)=0;
    lhs(13,24)=0;
    lhs(13,25)=clhs203;
    lhs(13,26)=0;
    lhs(14,0)=0;
    lhs(14,1)=0;
    lhs(14,2)=0;
    lhs(14,3)=0;
    lhs(14,4)=0;
    lhs(14,5)=0;
    lhs(14,6)=0;
    lhs(14,7)=0;
    lhs(14,8)=0;
    lhs(14,9)=-N1[1]*clhs191;
    lhs(14,10)=-N1[1]*clhs192;
    lhs(14,11)=-N1[1]*clhs193;
    lhs(14,12)=-N1[1]*clhs194;
    lhs(14,13)=-N1[1]*clhs195;
    lhs(14,14)=-N1[1]*clhs196;
    lhs(14,15)=-N1[1]*clhs197;
    lhs(14,16)=-N1[1]*clhs198;
    lhs(14,17)=-N1[1]*clhs199;
    lhs(14,18)=0;
    lhs(14,19)=0;
    lhs(14,20)=clhs201;
    lhs(14,21)=0;
    lhs(14,22)=0;
    lhs(14,23)=clhs202;
    lhs(14,24)=0;
    lhs(14,25)=0;
    lhs(14,26)=clhs203;
    lhs(15,0)=0;
    lhs(15,1)=0;
    lhs(15,2)=0;
    lhs(15,3)=0;
    lhs(15,4)=0;
    lhs(15,5)=0;
    lhs(15,6)=0;
    lhs(15,7)=0;
    lhs(15,8)=0;
    lhs(15,9)=-N1[2]*clhs169;
    lhs(15,10)=-N1[2]*clhs170;
    lhs(15,11)=-N1[2]*clhs171;
    lhs(15,12)=-N1[2]*clhs172;
    lhs(15,13)=-N1[2]*clhs173;
    lhs(15,14)=-N1[2]*clhs174;
    lhs(15,15)=-N1[2]*clhs175;
    lhs(15,16)=-N1[2]*clhs176;
    lhs(15,17)=-N1[2]*clhs177;
    lhs(15,18)=clhs205;
    lhs(15,19)=0;
    lhs(15,20)=0;
    lhs(15,21)=clhs206;
    lhs(15,22)=0;
    lhs(15,23)=0;
    lhs(15,24)=clhs207;
    lhs(15,25)=0;
    lhs(15,26)=0;
    lhs(16,0)=0;
    lhs(16,1)=0;
    lhs(16,2)=0;
    lhs(16,3)=0;
    lhs(16,4)=0;
    lhs(16,5)=0;
    lhs(16,6)=0;
    lhs(16,7)=0;
    lhs(16,8)=0;
    lhs(16,9)=-N1[2]*clhs182;
    lhs(16,10)=-N1[2]*clhs183;
    lhs(16,11)=-N1[2]*clhs184;
    lhs(16,12)=-N1[2]*clhs185;
    lhs(16,13)=-N1[2]*clhs186;
    lhs(16,14)=-N1[2]*clhs187;
    lhs(16,15)=-N1[2]*clhs188;
    lhs(16,16)=-N1[2]*clhs189;
    lhs(16,17)=-N1[2]*clhs190;
    lhs(16,18)=0;
    lhs(16,19)=clhs205;
    lhs(16,20)=0;
    lhs(16,21)=0;
    lhs(16,22)=clhs206;
    lhs(16,23)=0;
    lhs(16,24)=0;
    lhs(16,25)=clhs207;
    lhs(16,26)=0;
    lhs(17,0)=0;
    lhs(17,1)=0;
    lhs(17,2)=0;
    lhs(17,3)=0;
    lhs(17,4)=0;
    lhs(17,5)=0;
    lhs(17,6)=0;
    lhs(17,7)=0;
    lhs(17,8)=0;
    lhs(17,9)=-N1[2]*clhs191;
    lhs(17,10)=-N1[2]*clhs192;
    lhs(17,11)=-N1[2]*clhs193;
    lhs(17,12)=-N1[2]*clhs194;
    lhs(17,13)=-N1[2]*clhs195;
    lhs(17,14)=-N1[2]*clhs196;
    lhs(17,15)=-N1[2]*clhs197;
    lhs(17,16)=-N1[2]*clhs198;
    lhs(17,17)=-N1[2]*clhs199;
    lhs(17,18)=0;
    lhs(17,19)=0;
    lhs(17,20)=clhs205;
    lhs(17,21)=0;
    lhs(17,22)=0;
    lhs(17,23)=clhs206;
    lhs(17,24)=0;
    lhs(17,25)=0;
    lhs(17,26)=clhs207;
    lhs(18,0)=-clhs209*clhs211;
    lhs(18,1)=-clhs211*clhs212;
    lhs(18,2)=-clhs211*clhs213;
    lhs(18,3)=-clhs211*clhs214;
    lhs(18,4)=-clhs211*clhs215;
    lhs(18,5)=-clhs211*clhs216;
    lhs(18,6)=-clhs211*clhs217;
    lhs(18,7)=-clhs211*clhs218;
    lhs(18,8)=-clhs211*clhs219;
    lhs(18,9)=-clhs16*clhs222 - clhs20*clhs223 - clhs211*clhs221 - clhs220*DeltaNormals[0](0,0);
    lhs(18,10)=-clhs211*clhs224 - clhs220*DeltaNormals[1](0,0) - clhs222*clhs24 - clhs223*clhs27;
    lhs(18,11)=-clhs211*clhs225 - clhs220*DeltaNormals[2](0,0) - clhs222*clhs31 - clhs223*clhs34;
    lhs(18,12)=-clhs211*clhs226 - clhs220*DeltaNormals[3](0,0) - clhs222*clhs38 - clhs223*clhs41;
    lhs(18,13)=-clhs211*clhs227 - clhs220*DeltaNormals[4](0,0) - clhs222*clhs45 - clhs223*clhs48;
    lhs(18,14)=-clhs211*clhs228 - clhs220*DeltaNormals[5](0,0) - clhs222*clhs52 - clhs223*clhs55;
    lhs(18,15)=-clhs211*clhs229 - clhs220*DeltaNormals[6](0,0) - clhs222*clhs59 - clhs223*clhs62;
    lhs(18,16)=-clhs211*clhs230 - clhs220*DeltaNormals[7](0,0) - clhs222*clhs66 - clhs223*clhs69;
    lhs(18,17)=-clhs211*clhs231 - clhs220*DeltaNormals[8](0,0) - clhs222*clhs73 - clhs223*clhs76;
    lhs(18,18)=0;
    lhs(18,19)=0;
    lhs(18,20)=0;
    lhs(18,21)=0;
    lhs(18,22)=0;
    lhs(18,23)=0;
    lhs(18,24)=0;
    lhs(18,25)=0;
    lhs(18,26)=0;
    lhs(19,0)=-clhs209*clhs233;
    lhs(19,1)=-clhs212*clhs233;
    lhs(19,2)=-clhs213*clhs233;
    lhs(19,3)=-clhs214*clhs233;
    lhs(19,4)=-clhs215*clhs233;
    lhs(19,5)=-clhs216*clhs233;
    lhs(19,6)=-clhs217*clhs233;
    lhs(19,7)=-clhs218*clhs233;
    lhs(19,8)=-clhs219*clhs233;
    lhs(19,9)=-clhs16*clhs234 - clhs20*clhs235 - clhs220*DeltaNormals[0](0,1) - clhs221*clhs233;
    lhs(19,10)=-clhs220*DeltaNormals[1](0,1) - clhs224*clhs233 - clhs234*clhs24 - clhs235*clhs27;
    lhs(19,11)=-clhs220*DeltaNormals[2](0,1) - clhs225*clhs233 - clhs234*clhs31 - clhs235*clhs34;
    lhs(19,12)=-clhs220*DeltaNormals[3](0,1) - clhs226*clhs233 - clhs234*clhs38 - clhs235*clhs41;
    lhs(19,13)=-clhs220*DeltaNormals[4](0,1) - clhs227*clhs233 - clhs234*clhs45 - clhs235*clhs48;
    lhs(19,14)=-clhs220*DeltaNormals[5](0,1) - clhs228*clhs233 - clhs234*clhs52 - clhs235*clhs55;
    lhs(19,15)=-clhs220*DeltaNormals[6](0,1) - clhs229*clhs233 - clhs234*clhs59 - clhs235*clhs62;
    lhs(19,16)=-clhs220*DeltaNormals[7](0,1) - clhs230*clhs233 - clhs234*clhs66 - clhs235*clhs69;
    lhs(19,17)=-clhs220*DeltaNormals[8](0,1) - clhs231*clhs233 - clhs234*clhs73 - clhs235*clhs76;
    lhs(19,18)=0;
    lhs(19,19)=0;
    lhs(19,20)=0;
    lhs(19,21)=0;
    lhs(19,22)=0;
    lhs(19,23)=0;
    lhs(19,24)=0;
    lhs(19,25)=0;
    lhs(19,26)=0;
    lhs(20,0)=-clhs209*clhs237;
    lhs(20,1)=-clhs212*clhs237;
    lhs(20,2)=-clhs213*clhs237;
    lhs(20,3)=-clhs214*clhs237;
    lhs(20,4)=-clhs215*clhs237;
    lhs(20,5)=-clhs216*clhs237;
    lhs(20,6)=-clhs217*clhs237;
    lhs(20,7)=-clhs218*clhs237;
    lhs(20,8)=-clhs219*clhs237;
    lhs(20,9)=-clhs16*clhs238 - clhs20*clhs239 - clhs220*DeltaNormals[0](0,2) - clhs221*clhs237;
    lhs(20,10)=-clhs220*DeltaNormals[1](0,2) - clhs224*clhs237 - clhs238*clhs24 - clhs239*clhs27;
    lhs(20,11)=-clhs220*DeltaNormals[2](0,2) - clhs225*clhs237 - clhs238*clhs31 - clhs239*clhs34;
    lhs(20,12)=-clhs220*DeltaNormals[3](0,2) - clhs226*clhs237 - clhs238*clhs38 - clhs239*clhs41;
    lhs(20,13)=-clhs220*DeltaNormals[4](0,2) - clhs227*clhs237 - clhs238*clhs45 - clhs239*clhs48;
    lhs(20,14)=-clhs220*DeltaNormals[5](0,2) - clhs228*clhs237 - clhs238*clhs52 - clhs239*clhs55;
    lhs(20,15)=-clhs220*DeltaNormals[6](0,2) - clhs229*clhs237 - clhs238*clhs59 - clhs239*clhs62;
    lhs(20,16)=-clhs220*DeltaNormals[7](0,2) - clhs230*clhs237 - clhs238*clhs66 - clhs239*clhs69;
    lhs(20,17)=-clhs220*DeltaNormals[8](0,2) - clhs231*clhs237 - clhs238*clhs73 - clhs239*clhs76;
    lhs(20,18)=0;
    lhs(20,19)=0;
    lhs(20,20)=0;
    lhs(20,21)=0;
    lhs(20,22)=0;
    lhs(20,23)=0;
    lhs(20,24)=0;
    lhs(20,25)=0;
    lhs(20,26)=0;
    lhs(21,0)=-clhs209*clhs241;
    lhs(21,1)=-clhs212*clhs241;
    lhs(21,2)=-clhs213*clhs241;
    lhs(21,3)=-clhs214*clhs241;
    lhs(21,4)=-clhs215*clhs241;
    lhs(21,5)=-clhs216*clhs241;
    lhs(21,6)=-clhs217*clhs241;
    lhs(21,7)=-clhs218*clhs241;
    lhs(21,8)=-clhs219*clhs241;
    lhs(21,9)=-clhs16*clhs243 - clhs21*clhs244 - clhs221*clhs241 - clhs242*DeltaNormals[0](1,0);
    lhs(21,10)=-clhs224*clhs241 - clhs24*clhs243 - clhs242*DeltaNormals[1](1,0) - clhs244*clhs28;
    lhs(21,11)=-clhs225*clhs241 - clhs242*DeltaNormals[2](1,0) - clhs243*clhs31 - clhs244*clhs35;
    lhs(21,12)=-clhs226*clhs241 - clhs242*DeltaNormals[3](1,0) - clhs243*clhs38 - clhs244*clhs42;
    lhs(21,13)=-clhs227*clhs241 - clhs242*DeltaNormals[4](1,0) - clhs243*clhs45 - clhs244*clhs49;
    lhs(21,14)=-clhs228*clhs241 - clhs242*DeltaNormals[5](1,0) - clhs243*clhs52 - clhs244*clhs56;
    lhs(21,15)=-clhs229*clhs241 - clhs242*DeltaNormals[6](1,0) - clhs243*clhs59 - clhs244*clhs63;
    lhs(21,16)=-clhs230*clhs241 - clhs242*DeltaNormals[7](1,0) - clhs243*clhs66 - clhs244*clhs70;
    lhs(21,17)=-clhs231*clhs241 - clhs242*DeltaNormals[8](1,0) - clhs243*clhs73 - clhs244*clhs77;
    lhs(21,18)=0;
    lhs(21,19)=0;
    lhs(21,20)=0;
    lhs(21,21)=0;
    lhs(21,22)=0;
    lhs(21,23)=0;
    lhs(21,24)=0;
    lhs(21,25)=0;
    lhs(21,26)=0;
    lhs(22,0)=-clhs209*clhs246;
    lhs(22,1)=-clhs212*clhs246;
    lhs(22,2)=-clhs213*clhs246;
    lhs(22,3)=-clhs214*clhs246;
    lhs(22,4)=-clhs215*clhs246;
    lhs(22,5)=-clhs216*clhs246;
    lhs(22,6)=-clhs217*clhs246;
    lhs(22,7)=-clhs218*clhs246;
    lhs(22,8)=-clhs219*clhs246;
    lhs(22,9)=-clhs16*clhs247 - clhs21*clhs248 - clhs221*clhs246 - clhs242*DeltaNormals[0](1,1);
    lhs(22,10)=-clhs224*clhs246 - clhs24*clhs247 - clhs242*DeltaNormals[1](1,1) - clhs248*clhs28;
    lhs(22,11)=-clhs225*clhs246 - clhs242*DeltaNormals[2](1,1) - clhs247*clhs31 - clhs248*clhs35;
    lhs(22,12)=-clhs226*clhs246 - clhs242*DeltaNormals[3](1,1) - clhs247*clhs38 - clhs248*clhs42;
    lhs(22,13)=-clhs227*clhs246 - clhs242*DeltaNormals[4](1,1) - clhs247*clhs45 - clhs248*clhs49;
    lhs(22,14)=-clhs228*clhs246 - clhs242*DeltaNormals[5](1,1) - clhs247*clhs52 - clhs248*clhs56;
    lhs(22,15)=-clhs229*clhs246 - clhs242*DeltaNormals[6](1,1) - clhs247*clhs59 - clhs248*clhs63;
    lhs(22,16)=-clhs230*clhs246 - clhs242*DeltaNormals[7](1,1) - clhs247*clhs66 - clhs248*clhs70;
    lhs(22,17)=-clhs231*clhs246 - clhs242*DeltaNormals[8](1,1) - clhs247*clhs73 - clhs248*clhs77;
    lhs(22,18)=0;
    lhs(22,19)=0;
    lhs(22,20)=0;
    lhs(22,21)=0;
    lhs(22,22)=0;
    lhs(22,23)=0;
    lhs(22,24)=0;
    lhs(22,25)=0;
    lhs(22,26)=0;
    lhs(23,0)=-clhs209*clhs250;
    lhs(23,1)=-clhs212*clhs250;
    lhs(23,2)=-clhs213*clhs250;
    lhs(23,3)=-clhs214*clhs250;
    lhs(23,4)=-clhs215*clhs250;
    lhs(23,5)=-clhs216*clhs250;
    lhs(23,6)=-clhs217*clhs250;
    lhs(23,7)=-clhs218*clhs250;
    lhs(23,8)=-clhs219*clhs250;
    lhs(23,9)=-clhs16*clhs251 - clhs21*clhs252 - clhs221*clhs250 - clhs242*DeltaNormals[0](1,2);
    lhs(23,10)=-clhs224*clhs250 - clhs24*clhs251 - clhs242*DeltaNormals[1](1,2) - clhs252*clhs28;
    lhs(23,11)=-clhs225*clhs250 - clhs242*DeltaNormals[2](1,2) - clhs251*clhs31 - clhs252*clhs35;
    lhs(23,12)=-clhs226*clhs250 - clhs242*DeltaNormals[3](1,2) - clhs251*clhs38 - clhs252*clhs42;
    lhs(23,13)=-clhs227*clhs250 - clhs242*DeltaNormals[4](1,2) - clhs251*clhs45 - clhs252*clhs49;
    lhs(23,14)=-clhs228*clhs250 - clhs242*DeltaNormals[5](1,2) - clhs251*clhs52 - clhs252*clhs56;
    lhs(23,15)=-clhs229*clhs250 - clhs242*DeltaNormals[6](1,2) - clhs251*clhs59 - clhs252*clhs63;
    lhs(23,16)=-clhs230*clhs250 - clhs242*DeltaNormals[7](1,2) - clhs251*clhs66 - clhs252*clhs70;
    lhs(23,17)=-clhs231*clhs250 - clhs242*DeltaNormals[8](1,2) - clhs251*clhs73 - clhs252*clhs77;
    lhs(23,18)=0;
    lhs(23,19)=0;
    lhs(23,20)=0;
    lhs(23,21)=0;
    lhs(23,22)=0;
    lhs(23,23)=0;
    lhs(23,24)=0;
    lhs(23,25)=0;
    lhs(23,26)=0;
    lhs(24,0)=-clhs209*clhs254;
    lhs(24,1)=-clhs212*clhs254;
    lhs(24,2)=-clhs213*clhs254;
    lhs(24,3)=-clhs214*clhs254;
    lhs(24,4)=-clhs215*clhs254;
    lhs(24,5)=-clhs216*clhs254;
    lhs(24,6)=-clhs217*clhs254;
    lhs(24,7)=-clhs218*clhs254;
    lhs(24,8)=-clhs219*clhs254;
    lhs(24,9)=-clhs16*clhs256 - clhs22*clhs257 - clhs221*clhs254 - clhs255*DeltaNormals[0](2,0);
    lhs(24,10)=-clhs224*clhs254 - clhs24*clhs256 - clhs255*DeltaNormals[1](2,0) - clhs257*clhs29;
    lhs(24,11)=-clhs225*clhs254 - clhs255*DeltaNormals[2](2,0) - clhs256*clhs31 - clhs257*clhs36;
    lhs(24,12)=-clhs226*clhs254 - clhs255*DeltaNormals[3](2,0) - clhs256*clhs38 - clhs257*clhs43;
    lhs(24,13)=-clhs227*clhs254 - clhs255*DeltaNormals[4](2,0) - clhs256*clhs45 - clhs257*clhs50;
    lhs(24,14)=-clhs228*clhs254 - clhs255*DeltaNormals[5](2,0) - clhs256*clhs52 - clhs257*clhs57;
    lhs(24,15)=-clhs229*clhs254 - clhs255*DeltaNormals[6](2,0) - clhs256*clhs59 - clhs257*clhs64;
    lhs(24,16)=-clhs230*clhs254 - clhs255*DeltaNormals[7](2,0) - clhs256*clhs66 - clhs257*clhs71;
    lhs(24,17)=-clhs231*clhs254 - clhs255*DeltaNormals[8](2,0) - clhs256*clhs73 - clhs257*clhs78;
    lhs(24,18)=0;
    lhs(24,19)=0;
    lhs(24,20)=0;
    lhs(24,21)=0;
    lhs(24,22)=0;
    lhs(24,23)=0;
    lhs(24,24)=0;
    lhs(24,25)=0;
    lhs(24,26)=0;
    lhs(25,0)=-clhs209*clhs259;
    lhs(25,1)=-clhs212*clhs259;
    lhs(25,2)=-clhs213*clhs259;
    lhs(25,3)=-clhs214*clhs259;
    lhs(25,4)=-clhs215*clhs259;
    lhs(25,5)=-clhs216*clhs259;
    lhs(25,6)=-clhs217*clhs259;
    lhs(25,7)=-clhs218*clhs259;
    lhs(25,8)=-clhs219*clhs259;
    lhs(25,9)=-clhs16*clhs260 - clhs22*clhs261 - clhs221*clhs259 - clhs255*DeltaNormals[0](2,1);
    lhs(25,10)=-clhs224*clhs259 - clhs24*clhs260 - clhs255*DeltaNormals[1](2,1) - clhs261*clhs29;
    lhs(25,11)=-clhs225*clhs259 - clhs255*DeltaNormals[2](2,1) - clhs260*clhs31 - clhs261*clhs36;
    lhs(25,12)=-clhs226*clhs259 - clhs255*DeltaNormals[3](2,1) - clhs260*clhs38 - clhs261*clhs43;
    lhs(25,13)=-clhs227*clhs259 - clhs255*DeltaNormals[4](2,1) - clhs260*clhs45 - clhs261*clhs50;
    lhs(25,14)=-clhs228*clhs259 - clhs255*DeltaNormals[5](2,1) - clhs260*clhs52 - clhs261*clhs57;
    lhs(25,15)=-clhs229*clhs259 - clhs255*DeltaNormals[6](2,1) - clhs260*clhs59 - clhs261*clhs64;
    lhs(25,16)=-clhs230*clhs259 - clhs255*DeltaNormals[7](2,1) - clhs260*clhs66 - clhs261*clhs71;
    lhs(25,17)=-clhs231*clhs259 - clhs255*DeltaNormals[8](2,1) - clhs260*clhs73 - clhs261*clhs78;
    lhs(25,18)=0;
    lhs(25,19)=0;
    lhs(25,20)=0;
    lhs(25,21)=0;
    lhs(25,22)=0;
    lhs(25,23)=0;
    lhs(25,24)=0;
    lhs(25,25)=0;
    lhs(25,26)=0;
    lhs(26,0)=-clhs209*clhs263;
    lhs(26,1)=-clhs212*clhs263;
    lhs(26,2)=-clhs213*clhs263;
    lhs(26,3)=-clhs214*clhs263;
    lhs(26,4)=-clhs215*clhs263;
    lhs(26,5)=-clhs216*clhs263;
    lhs(26,6)=-clhs217*clhs263;
    lhs(26,7)=-clhs218*clhs263;
    lhs(26,8)=-clhs219*clhs263;
    lhs(26,9)=-clhs16*clhs264 - clhs22*clhs265 - clhs221*clhs263 - clhs255*DeltaNormals[0](2,2);
    lhs(26,10)=-clhs224*clhs263 - clhs24*clhs264 - clhs255*DeltaNormals[1](2,2) - clhs265*clhs29;
    lhs(26,11)=-clhs225*clhs263 - clhs255*DeltaNormals[2](2,2) - clhs264*clhs31 - clhs265*clhs36;
    lhs(26,12)=-clhs226*clhs263 - clhs255*DeltaNormals[3](2,2) - clhs264*clhs38 - clhs265*clhs43;
    lhs(26,13)=-clhs227*clhs263 - clhs255*DeltaNormals[4](2,2) - clhs264*clhs45 - clhs265*clhs50;
    lhs(26,14)=-clhs228*clhs263 - clhs255*DeltaNormals[5](2,2) - clhs264*clhs52 - clhs265*clhs57;
    lhs(26,15)=-clhs229*clhs263 - clhs255*DeltaNormals[6](2,2) - clhs264*clhs59 - clhs265*clhs64;
    lhs(26,16)=-clhs230*clhs263 - clhs255*DeltaNormals[7](2,2) - clhs264*clhs66 - clhs265*clhs71;
    lhs(26,17)=-clhs231*clhs263 - clhs255*DeltaNormals[8](2,2) - clhs264*clhs73 - clhs265*clhs78;
    lhs(26,18)=0;
    lhs(26,19)=0;
    lhs(26,20)=0;
    lhs(26,21)=0;
    lhs(26,22)=0;
    lhs(26,23)=0;
    lhs(26,24)=0;
    lhs(26,25)=0;
    lhs(26,26)=0;

    
    return lhs;
}

    /***********************************************************************************/
    /***********************************************************************************/
    
    static inline bounded_matrix<double,27,27> ComputeGaussPointStickLHS(
        const array_1d<double,3> N1, 
        const array_1d<double,3> N2, 
        const array_1d<double,3> Phi, 
        const double detJ, 
        const double mu, 
        const ContactData<3,3>& rContactData
        )
{
    bounded_matrix<double,27,27> lhs;
    
    const bounded_matrix<double, 3,3> normalslave = rContactData.Normal_s;
    const bounded_matrix<double, 3,3> tan1slave   = rContactData.Tangent_xi_s;
    const bounded_matrix<double, 3,3> tan2slave   = rContactData.Tangent_eta_s;
    const bounded_matrix<double, 3,3> lm          = rContactData.LagrangeMultipliers;
    const double Dt              = rContactData.Dt;
    
    const bounded_matrix<double, 3,3> v1 = rContactData.v1;
    const bounded_matrix<double, 3,3> v2 = rContactData.v2;
    
    const std::vector<double> DeltaJs = rContactData.DeltaJ_s;
    const std::vector<array_1d<double,3>> DeltaPhi = rContactData.DeltaPhi;
    const std::vector<array_1d<double,3>> DeltaN2  = rContactData.DeltaN2;
    const std::vector<bounded_matrix<double, 3, 3>> DeltaNormals     = rContactData.Delta_Normal_s;
    const std::vector<bounded_matrix<double, 3, 3>> Deltatangentxis  = rContactData.Delta_Tangent_xi_s;
    const std::vector<bounded_matrix<double, 3, 3>> Deltatangentetas = rContactData.Delta_Tangent_eta_s;

    const double clhs0 =     1.0/Dt;
    const double clhs1 =     Phi[0]; // PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs2 =     detJ; // DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs3 =     clhs0*clhs1*clhs2;
    const double clhs4 =     tan1slave(0,0); // TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs5 =     tan1slave(0,1); // TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs6 =     tan1slave(1,1); // TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs7 =     tan1slave(2,1); // TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs8 =     N1[0]*clhs5 + N1[1]*clhs6 + N1[2]*clhs7;
    const double clhs9 =     Dt*v2(0,1);
    const double clhs10 =     N2[0]; // N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double clhs11 =     DeltaN2[9][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
    const double clhs12 =     Dt*v2(1,1);
    const double clhs13 =     N2[1]; // N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double clhs14 =     DeltaN2[9][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
    const double clhs15 =     Dt*v2(2,1);
    const double clhs16 =     N2[2]; // N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double clhs17 =     DeltaN2[9][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
    const double clhs18 =     clhs11*clhs9 + clhs12*clhs14 + clhs15*clhs17;
    const double clhs19 =     tan1slave(0,2); // TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs20 =     tan1slave(1,2); // TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs21 =     tan1slave(2,2); // TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs22 =     N1[0]*clhs19 + N1[1]*clhs20 + N1[2]*clhs21;
    const double clhs23 =     Dt*v2(0,2);
    const double clhs24 =     Dt*v2(1,2);
    const double clhs25 =     Dt*v2(2,2);
    const double clhs26 =     clhs11*clhs23 + clhs14*clhs24 + clhs17*clhs25;
    const double clhs27 =     tan1slave(1,0); // TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs28 =     tan1slave(2,0); // TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs29 =     N1[0]*clhs4 + N1[1]*clhs27 + N1[2]*clhs28;
    const double clhs30 =     Dt*v2(0,0);
    const double clhs31 =     Dt*v2(1,0);
    const double clhs32 =     Dt*v2(2,0);
    const double clhs33 =     clhs10 + clhs11*clhs30 + clhs14*clhs31 + clhs17*clhs32;
    const double clhs34 =     clhs18*clhs8 + clhs22*clhs26 + clhs29*clhs33;
    const double clhs35 =     tan2slave(0,0); // TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs36 =     tan2slave(0,1); // TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs37 =     tan2slave(1,1); // TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs38 =     tan2slave(2,1); // TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs39 =     N1[0]*clhs36 + N1[1]*clhs37 + N1[2]*clhs38;
    const double clhs40 =     tan2slave(0,2); // TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs41 =     tan2slave(1,2); // TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs42 =     tan2slave(2,2); // TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs43 =     N1[0]*clhs40 + N1[1]*clhs41 + N1[2]*clhs42;
    const double clhs44 =     tan2slave(1,0); // TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs45 =     tan2slave(2,0); // TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs46 =     N1[0]*clhs35 + N1[1]*clhs44 + N1[2]*clhs45;
    const double clhs47 =     clhs18*clhs39 + clhs26*clhs43 + clhs33*clhs46;
    const double clhs48 =     DeltaN2[10][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
    const double clhs49 =     DeltaN2[10][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
    const double clhs50 =     DeltaN2[10][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
    const double clhs51 =     clhs30*clhs48 + clhs31*clhs49 + clhs32*clhs50;
    const double clhs52 =     clhs23*clhs48 + clhs24*clhs49 + clhs25*clhs50;
    const double clhs53 =     clhs10 + clhs12*clhs49 + clhs15*clhs50 + clhs48*clhs9;
    const double clhs54 =     clhs22*clhs52 + clhs29*clhs51 + clhs53*clhs8;
    const double clhs55 =     clhs39*clhs53 + clhs43*clhs52 + clhs46*clhs51;
    const double clhs56 =     DeltaN2[11][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
    const double clhs57 =     DeltaN2[11][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
    const double clhs58 =     DeltaN2[11][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
    const double clhs59 =     clhs30*clhs56 + clhs31*clhs57 + clhs32*clhs58;
    const double clhs60 =     clhs12*clhs57 + clhs15*clhs58 + clhs56*clhs9;
    const double clhs61 =     clhs10 + clhs23*clhs56 + clhs24*clhs57 + clhs25*clhs58;
    const double clhs62 =     clhs22*clhs61 + clhs29*clhs59 + clhs60*clhs8;
    const double clhs63 =     clhs39*clhs60 + clhs43*clhs61 + clhs46*clhs59;
    const double clhs64 =     DeltaN2[12][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
    const double clhs65 =     DeltaN2[12][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
    const double clhs66 =     DeltaN2[12][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
    const double clhs67 =     clhs12*clhs65 + clhs15*clhs66 + clhs64*clhs9;
    const double clhs68 =     clhs23*clhs64 + clhs24*clhs65 + clhs25*clhs66;
    const double clhs69 =     clhs13 + clhs30*clhs64 + clhs31*clhs65 + clhs32*clhs66;
    const double clhs70 =     clhs22*clhs68 + clhs29*clhs69 + clhs67*clhs8;
    const double clhs71 =     clhs39*clhs67 + clhs43*clhs68 + clhs46*clhs69;
    const double clhs72 =     DeltaN2[13][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
    const double clhs73 =     DeltaN2[13][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
    const double clhs74 =     DeltaN2[13][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
    const double clhs75 =     clhs30*clhs72 + clhs31*clhs73 + clhs32*clhs74;
    const double clhs76 =     clhs23*clhs72 + clhs24*clhs73 + clhs25*clhs74;
    const double clhs77 =     clhs12*clhs73 + clhs13 + clhs15*clhs74 + clhs72*clhs9;
    const double clhs78 =     clhs22*clhs76 + clhs29*clhs75 + clhs77*clhs8;
    const double clhs79 =     clhs39*clhs77 + clhs43*clhs76 + clhs46*clhs75;
    const double clhs80 =     DeltaN2[14][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
    const double clhs81 =     DeltaN2[14][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
    const double clhs82 =     DeltaN2[14][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
    const double clhs83 =     clhs30*clhs80 + clhs31*clhs81 + clhs32*clhs82;
    const double clhs84 =     clhs12*clhs81 + clhs15*clhs82 + clhs80*clhs9;
    const double clhs85 =     clhs13 + clhs23*clhs80 + clhs24*clhs81 + clhs25*clhs82;
    const double clhs86 =     clhs22*clhs85 + clhs29*clhs83 + clhs8*clhs84;
    const double clhs87 =     clhs39*clhs84 + clhs43*clhs85 + clhs46*clhs83;
    const double clhs88 =     DeltaN2[15][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
    const double clhs89 =     DeltaN2[15][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
    const double clhs90 =     DeltaN2[15][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
    const double clhs91 =     clhs12*clhs89 + clhs15*clhs90 + clhs88*clhs9;
    const double clhs92 =     clhs23*clhs88 + clhs24*clhs89 + clhs25*clhs90;
    const double clhs93 =     clhs16 + clhs30*clhs88 + clhs31*clhs89 + clhs32*clhs90;
    const double clhs94 =     clhs22*clhs92 + clhs29*clhs93 + clhs8*clhs91;
    const double clhs95 =     clhs39*clhs91 + clhs43*clhs92 + clhs46*clhs93;
    const double clhs96 =     DeltaN2[16][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
    const double clhs97 =     DeltaN2[16][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
    const double clhs98 =     DeltaN2[16][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
    const double clhs99 =     clhs30*clhs96 + clhs31*clhs97 + clhs32*clhs98;
    const double clhs100 =     clhs23*clhs96 + clhs24*clhs97 + clhs25*clhs98;
    const double clhs101 =     clhs12*clhs97 + clhs15*clhs98 + clhs16 + clhs9*clhs96;
    const double clhs102 =     clhs100*clhs22 + clhs101*clhs8 + clhs29*clhs99;
    const double clhs103 =     clhs100*clhs43 + clhs101*clhs39 + clhs46*clhs99;
    const double clhs104 =     DeltaN2[17][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
    const double clhs105 =     DeltaN2[17][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
    const double clhs106 =     DeltaN2[17][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
    const double clhs107 =     clhs104*clhs30 + clhs105*clhs31 + clhs106*clhs32;
    const double clhs108 =     clhs104*clhs9 + clhs105*clhs12 + clhs106*clhs15;
    const double clhs109 =     clhs104*clhs23 + clhs105*clhs24 + clhs106*clhs25 + clhs16;
    const double clhs110 =     clhs107*clhs29 + clhs108*clhs8 + clhs109*clhs22;
    const double clhs111 =     clhs107*clhs46 + clhs108*clhs39 + clhs109*clhs43;
    const double clhs112 =     Deltatangentxis[0](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs113 =     N1[0]*(Dt*v1(0,0)) + N1[1]*(Dt*v1(1,0)) + N1[2]*(Dt*v1(2,0)) - clhs10*clhs30 - clhs13*clhs31 - clhs16*clhs32;
    const double clhs114 =     N1[0]*(Dt*v1(0,1)) + N1[1]*(Dt*v1(1,1)) + N1[2]*(Dt*v1(2,1)) - clhs10*clhs9 - clhs12*clhs13 - clhs15*clhs16;
    const double clhs115 =     N1[0]*(Dt*v1(0,2)) + N1[1]*(Dt*v1(1,2)) + N1[2]*(Dt*v1(2,2)) - clhs10*clhs23 - clhs13*clhs24 - clhs16*clhs25;
    const double clhs116 =     clhs113*clhs29 + clhs114*clhs8 + clhs115*clhs22;
    const double clhs117 =     clhs1*clhs116*clhs2;
    const double clhs118 =     DeltaJs[0]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs119 =     clhs1*clhs116*clhs4;
    const double clhs120 =     DeltaPhi[0][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs121 =     clhs116*clhs2*clhs4;
    const double clhs122 =     Deltatangentetas[0](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs123 =     clhs113*clhs46 + clhs114*clhs39 + clhs115*clhs43;
    const double clhs124 =     clhs1*clhs123*clhs2;
    const double clhs125 =     clhs1*clhs123*clhs35;
    const double clhs126 =     clhs123*clhs2*clhs35;
    const double clhs127 =     DeltaN2[0][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
    const double clhs128 =     DeltaN2[0][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
    const double clhs129 =     DeltaN2[0][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
    const double clhs130 =     clhs12*clhs128 + clhs127*clhs9 + clhs129*clhs15;
    const double clhs131 =     clhs127*clhs23 + clhs128*clhs24 + clhs129*clhs25;
    const double clhs132 =     -N1[0];
    const double clhs133 =     clhs127*clhs30 + clhs128*clhs31 + clhs129*clhs32 + clhs132;
    const double clhs134 =     Deltatangentxis[0](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs135 =     Deltatangentxis[0](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs136 =     Deltatangentxis[0](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs137 =     Deltatangentxis[0](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs138 =     Deltatangentxis[0](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs139 =     Deltatangentxis[0](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs140 =     Deltatangentxis[0](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs141 =     Deltatangentxis[0](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs142 =     -clhs113*(N1[0]*clhs112 + N1[1]*clhs134 + N1[2]*clhs135) - clhs114*(N1[0]*clhs136 + N1[1]*clhs137 + N1[2]*clhs138) - clhs115*(N1[0]*clhs139 + N1[1]*clhs140 + N1[2]*clhs141) + clhs130*clhs8 + clhs131*clhs22 + clhs133*clhs29;
    const double clhs143 =     clhs1*clhs142*clhs2;
    const double clhs144 =     Deltatangentetas[0](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs145 =     Deltatangentetas[0](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs146 =     Deltatangentetas[0](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs147 =     Deltatangentetas[0](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs148 =     Deltatangentetas[0](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs149 =     Deltatangentetas[0](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs150 =     Deltatangentetas[0](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs151 =     Deltatangentetas[0](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs152 =     -clhs113*(N1[0]*clhs122 + N1[1]*clhs144 + N1[2]*clhs145) - clhs114*(N1[0]*clhs146 + N1[1]*clhs147 + N1[2]*clhs148) - clhs115*(N1[0]*clhs149 + N1[1]*clhs150 + N1[2]*clhs151) + clhs130*clhs39 + clhs131*clhs43 + clhs133*clhs46;
    const double clhs153 =     clhs1*clhs152*clhs2;
    const double clhs154 =     Deltatangentxis[1](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs155 =     DeltaJs[1]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs156 =     DeltaPhi[1][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs157 =     Deltatangentetas[1](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs158 =     DeltaN2[1][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
    const double clhs159 =     DeltaN2[1][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
    const double clhs160 =     DeltaN2[1][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
    const double clhs161 =     clhs158*clhs30 + clhs159*clhs31 + clhs160*clhs32;
    const double clhs162 =     clhs158*clhs23 + clhs159*clhs24 + clhs160*clhs25;
    const double clhs163 =     clhs12*clhs159 + clhs132 + clhs15*clhs160 + clhs158*clhs9;
    const double clhs164 =     Deltatangentxis[1](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs165 =     Deltatangentxis[1](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs166 =     Deltatangentxis[1](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs167 =     Deltatangentxis[1](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs168 =     Deltatangentxis[1](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs169 =     Deltatangentxis[1](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs170 =     Deltatangentxis[1](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs171 =     Deltatangentxis[1](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs172 =     -clhs113*(N1[0]*clhs154 + N1[1]*clhs164 + N1[2]*clhs165) - clhs114*(N1[0]*clhs166 + N1[1]*clhs167 + N1[2]*clhs168) - clhs115*(N1[0]*clhs169 + N1[1]*clhs170 + N1[2]*clhs171) + clhs161*clhs29 + clhs162*clhs22 + clhs163*clhs8;
    const double clhs173 =     clhs1*clhs172*clhs2;
    const double clhs174 =     Deltatangentetas[1](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs175 =     Deltatangentetas[1](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs176 =     Deltatangentetas[1](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs177 =     Deltatangentetas[1](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs178 =     Deltatangentetas[1](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs179 =     Deltatangentetas[1](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs180 =     Deltatangentetas[1](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs181 =     Deltatangentetas[1](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs182 =     -clhs113*(N1[0]*clhs157 + N1[1]*clhs174 + N1[2]*clhs175) - clhs114*(N1[0]*clhs176 + N1[1]*clhs177 + N1[2]*clhs178) - clhs115*(N1[0]*clhs179 + N1[1]*clhs180 + N1[2]*clhs181) + clhs161*clhs46 + clhs162*clhs43 + clhs163*clhs39;
    const double clhs183 =     clhs1*clhs182*clhs2;
    const double clhs184 =     Deltatangentxis[2](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs185 =     DeltaJs[2]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs186 =     DeltaPhi[2][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs187 =     Deltatangentetas[2](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs188 =     DeltaN2[2][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
    const double clhs189 =     DeltaN2[2][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
    const double clhs190 =     DeltaN2[2][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
    const double clhs191 =     clhs188*clhs30 + clhs189*clhs31 + clhs190*clhs32;
    const double clhs192 =     clhs12*clhs189 + clhs15*clhs190 + clhs188*clhs9;
    const double clhs193 =     clhs132 + clhs188*clhs23 + clhs189*clhs24 + clhs190*clhs25;
    const double clhs194 =     Deltatangentxis[2](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs195 =     Deltatangentxis[2](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs196 =     Deltatangentxis[2](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs197 =     Deltatangentxis[2](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs198 =     Deltatangentxis[2](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs199 =     Deltatangentxis[2](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs200 =     Deltatangentxis[2](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs201 =     Deltatangentxis[2](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs202 =     -clhs113*(N1[0]*clhs184 + N1[1]*clhs194 + N1[2]*clhs195) - clhs114*(N1[0]*clhs196 + N1[1]*clhs197 + N1[2]*clhs198) - clhs115*(N1[0]*clhs199 + N1[1]*clhs200 + N1[2]*clhs201) + clhs191*clhs29 + clhs192*clhs8 + clhs193*clhs22;
    const double clhs203 =     clhs1*clhs2*clhs202;
    const double clhs204 =     Deltatangentetas[2](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs205 =     Deltatangentetas[2](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs206 =     Deltatangentetas[2](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs207 =     Deltatangentetas[2](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs208 =     Deltatangentetas[2](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs209 =     Deltatangentetas[2](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs210 =     Deltatangentetas[2](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs211 =     Deltatangentetas[2](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs212 =     -clhs113*(N1[0]*clhs187 + N1[1]*clhs204 + N1[2]*clhs205) - clhs114*(N1[0]*clhs206 + N1[1]*clhs207 + N1[2]*clhs208) - clhs115*(N1[0]*clhs209 + N1[1]*clhs210 + N1[2]*clhs211) + clhs191*clhs46 + clhs192*clhs39 + clhs193*clhs43;
    const double clhs213 =     clhs1*clhs2*clhs212;
    const double clhs214 =     Deltatangentxis[3](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs215 =     DeltaJs[3]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs216 =     DeltaPhi[3][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs217 =     Deltatangentetas[3](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs218 =     DeltaN2[3][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
    const double clhs219 =     DeltaN2[3][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
    const double clhs220 =     DeltaN2[3][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
    const double clhs221 =     clhs12*clhs219 + clhs15*clhs220 + clhs218*clhs9;
    const double clhs222 =     clhs218*clhs23 + clhs219*clhs24 + clhs220*clhs25;
    const double clhs223 =     -N1[1];
    const double clhs224 =     clhs218*clhs30 + clhs219*clhs31 + clhs220*clhs32 + clhs223;
    const double clhs225 =     Deltatangentxis[3](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs226 =     Deltatangentxis[3](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs227 =     Deltatangentxis[3](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs228 =     Deltatangentxis[3](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs229 =     Deltatangentxis[3](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs230 =     Deltatangentxis[3](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs231 =     Deltatangentxis[3](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs232 =     Deltatangentxis[3](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs233 =     -clhs113*(N1[0]*clhs214 + N1[1]*clhs225 + N1[2]*clhs226) - clhs114*(N1[0]*clhs227 + N1[1]*clhs228 + N1[2]*clhs229) - clhs115*(N1[0]*clhs230 + N1[1]*clhs231 + N1[2]*clhs232) + clhs22*clhs222 + clhs221*clhs8 + clhs224*clhs29;
    const double clhs234 =     clhs1*clhs2*clhs233;
    const double clhs235 =     Deltatangentetas[3](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs236 =     Deltatangentetas[3](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs237 =     Deltatangentetas[3](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs238 =     Deltatangentetas[3](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs239 =     Deltatangentetas[3](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs240 =     Deltatangentetas[3](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs241 =     Deltatangentetas[3](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs242 =     Deltatangentetas[3](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs243 =     -clhs113*(N1[0]*clhs217 + N1[1]*clhs235 + N1[2]*clhs236) - clhs114*(N1[0]*clhs237 + N1[1]*clhs238 + N1[2]*clhs239) - clhs115*(N1[0]*clhs240 + N1[1]*clhs241 + N1[2]*clhs242) + clhs221*clhs39 + clhs222*clhs43 + clhs224*clhs46;
    const double clhs244 =     clhs1*clhs2*clhs243;
    const double clhs245 =     Deltatangentxis[4](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs246 =     DeltaJs[4]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs247 =     DeltaPhi[4][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs248 =     Deltatangentetas[4](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs249 =     DeltaN2[4][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
    const double clhs250 =     DeltaN2[4][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
    const double clhs251 =     DeltaN2[4][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
    const double clhs252 =     clhs249*clhs30 + clhs250*clhs31 + clhs251*clhs32;
    const double clhs253 =     clhs23*clhs249 + clhs24*clhs250 + clhs25*clhs251;
    const double clhs254 =     clhs12*clhs250 + clhs15*clhs251 + clhs223 + clhs249*clhs9;
    const double clhs255 =     Deltatangentxis[4](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs256 =     Deltatangentxis[4](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs257 =     Deltatangentxis[4](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs258 =     Deltatangentxis[4](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs259 =     Deltatangentxis[4](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs260 =     Deltatangentxis[4](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs261 =     Deltatangentxis[4](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs262 =     Deltatangentxis[4](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs263 =     -clhs113*(N1[0]*clhs245 + N1[1]*clhs255 + N1[2]*clhs256) - clhs114*(N1[0]*clhs257 + N1[1]*clhs258 + N1[2]*clhs259) - clhs115*(N1[0]*clhs260 + N1[1]*clhs261 + N1[2]*clhs262) + clhs22*clhs253 + clhs252*clhs29 + clhs254*clhs8;
    const double clhs264 =     clhs1*clhs2*clhs263;
    const double clhs265 =     Deltatangentetas[4](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs266 =     Deltatangentetas[4](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs267 =     Deltatangentetas[4](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs268 =     Deltatangentetas[4](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs269 =     Deltatangentetas[4](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs270 =     Deltatangentetas[4](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs271 =     Deltatangentetas[4](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs272 =     Deltatangentetas[4](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs273 =     -clhs113*(N1[0]*clhs248 + N1[1]*clhs265 + N1[2]*clhs266) - clhs114*(N1[0]*clhs267 + N1[1]*clhs268 + N1[2]*clhs269) - clhs115*(N1[0]*clhs270 + N1[1]*clhs271 + N1[2]*clhs272) + clhs252*clhs46 + clhs253*clhs43 + clhs254*clhs39;
    const double clhs274 =     clhs1*clhs2*clhs273;
    const double clhs275 =     Deltatangentxis[5](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs276 =     DeltaJs[5]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs277 =     DeltaPhi[5][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs278 =     Deltatangentetas[5](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs279 =     DeltaN2[5][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
    const double clhs280 =     DeltaN2[5][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
    const double clhs281 =     DeltaN2[5][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
    const double clhs282 =     clhs279*clhs30 + clhs280*clhs31 + clhs281*clhs32;
    const double clhs283 =     clhs12*clhs280 + clhs15*clhs281 + clhs279*clhs9;
    const double clhs284 =     clhs223 + clhs23*clhs279 + clhs24*clhs280 + clhs25*clhs281;
    const double clhs285 =     Deltatangentxis[5](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs286 =     Deltatangentxis[5](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs287 =     Deltatangentxis[5](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs288 =     Deltatangentxis[5](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs289 =     Deltatangentxis[5](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs290 =     Deltatangentxis[5](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs291 =     Deltatangentxis[5](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs292 =     Deltatangentxis[5](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs293 =     -clhs113*(N1[0]*clhs275 + N1[1]*clhs285 + N1[2]*clhs286) - clhs114*(N1[0]*clhs287 + N1[1]*clhs288 + N1[2]*clhs289) - clhs115*(N1[0]*clhs290 + N1[1]*clhs291 + N1[2]*clhs292) + clhs22*clhs284 + clhs282*clhs29 + clhs283*clhs8;
    const double clhs294 =     clhs1*clhs2*clhs293;
    const double clhs295 =     Deltatangentetas[5](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs296 =     Deltatangentetas[5](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs297 =     Deltatangentetas[5](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs298 =     Deltatangentetas[5](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs299 =     Deltatangentetas[5](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs300 =     Deltatangentetas[5](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs301 =     Deltatangentetas[5](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs302 =     Deltatangentetas[5](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs303 =     -clhs113*(N1[0]*clhs278 + N1[1]*clhs295 + N1[2]*clhs296) - clhs114*(N1[0]*clhs297 + N1[1]*clhs298 + N1[2]*clhs299) - clhs115*(N1[0]*clhs300 + N1[1]*clhs301 + N1[2]*clhs302) + clhs282*clhs46 + clhs283*clhs39 + clhs284*clhs43;
    const double clhs304 =     clhs1*clhs2*clhs303;
    const double clhs305 =     Deltatangentxis[6](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs306 =     DeltaJs[6]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs307 =     DeltaPhi[6][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs308 =     Deltatangentetas[6](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs309 =     DeltaN2[6][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
    const double clhs310 =     DeltaN2[6][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
    const double clhs311 =     DeltaN2[6][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
    const double clhs312 =     clhs12*clhs310 + clhs15*clhs311 + clhs309*clhs9;
    const double clhs313 =     clhs23*clhs309 + clhs24*clhs310 + clhs25*clhs311;
    const double clhs314 =     -N1[2];
    const double clhs315 =     clhs30*clhs309 + clhs31*clhs310 + clhs311*clhs32 + clhs314;
    const double clhs316 =     Deltatangentxis[6](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs317 =     Deltatangentxis[6](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs318 =     Deltatangentxis[6](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs319 =     Deltatangentxis[6](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs320 =     Deltatangentxis[6](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs321 =     Deltatangentxis[6](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs322 =     Deltatangentxis[6](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs323 =     Deltatangentxis[6](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs324 =     -clhs113*(N1[0]*clhs305 + N1[1]*clhs316 + N1[2]*clhs317) - clhs114*(N1[0]*clhs318 + N1[1]*clhs319 + N1[2]*clhs320) - clhs115*(N1[0]*clhs321 + N1[1]*clhs322 + N1[2]*clhs323) + clhs22*clhs313 + clhs29*clhs315 + clhs312*clhs8;
    const double clhs325 =     clhs1*clhs2*clhs324;
    const double clhs326 =     Deltatangentetas[6](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs327 =     Deltatangentetas[6](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs328 =     Deltatangentetas[6](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs329 =     Deltatangentetas[6](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs330 =     Deltatangentetas[6](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs331 =     Deltatangentetas[6](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs332 =     Deltatangentetas[6](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs333 =     Deltatangentetas[6](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs334 =     -clhs113*(N1[0]*clhs308 + N1[1]*clhs326 + N1[2]*clhs327) - clhs114*(N1[0]*clhs328 + N1[1]*clhs329 + N1[2]*clhs330) - clhs115*(N1[0]*clhs331 + N1[1]*clhs332 + N1[2]*clhs333) + clhs312*clhs39 + clhs313*clhs43 + clhs315*clhs46;
    const double clhs335 =     clhs1*clhs2*clhs334;
    const double clhs336 =     Deltatangentxis[7](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs337 =     DeltaJs[7]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs338 =     DeltaPhi[7][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs339 =     Deltatangentetas[7](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs340 =     DeltaN2[7][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
    const double clhs341 =     DeltaN2[7][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
    const double clhs342 =     DeltaN2[7][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
    const double clhs343 =     clhs30*clhs340 + clhs31*clhs341 + clhs32*clhs342;
    const double clhs344 =     clhs23*clhs340 + clhs24*clhs341 + clhs25*clhs342;
    const double clhs345 =     clhs12*clhs341 + clhs15*clhs342 + clhs314 + clhs340*clhs9;
    const double clhs346 =     Deltatangentxis[7](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs347 =     Deltatangentxis[7](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs348 =     Deltatangentxis[7](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs349 =     Deltatangentxis[7](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs350 =     Deltatangentxis[7](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs351 =     Deltatangentxis[7](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs352 =     Deltatangentxis[7](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs353 =     Deltatangentxis[7](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs354 =     -clhs113*(N1[0]*clhs336 + N1[1]*clhs346 + N1[2]*clhs347) - clhs114*(N1[0]*clhs348 + N1[1]*clhs349 + N1[2]*clhs350) - clhs115*(N1[0]*clhs351 + N1[1]*clhs352 + N1[2]*clhs353) + clhs22*clhs344 + clhs29*clhs343 + clhs345*clhs8;
    const double clhs355 =     clhs1*clhs2*clhs354;
    const double clhs356 =     Deltatangentetas[7](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs357 =     Deltatangentetas[7](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs358 =     Deltatangentetas[7](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs359 =     Deltatangentetas[7](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs360 =     Deltatangentetas[7](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs361 =     Deltatangentetas[7](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs362 =     Deltatangentetas[7](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs363 =     Deltatangentetas[7](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs364 =     -clhs113*(N1[0]*clhs339 + N1[1]*clhs356 + N1[2]*clhs357) - clhs114*(N1[0]*clhs358 + N1[1]*clhs359 + N1[2]*clhs360) - clhs115*(N1[0]*clhs361 + N1[1]*clhs362 + N1[2]*clhs363) + clhs343*clhs46 + clhs344*clhs43 + clhs345*clhs39;
    const double clhs365 =     clhs1*clhs2*clhs364;
    const double clhs366 =     Deltatangentxis[8](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs367 =     DeltaJs[8]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs368 =     DeltaPhi[8][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs369 =     Deltatangentetas[8](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs370 =     DeltaN2[8][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
    const double clhs371 =     DeltaN2[8][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
    const double clhs372 =     DeltaN2[8][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
    const double clhs373 =     clhs30*clhs370 + clhs31*clhs371 + clhs32*clhs372;
    const double clhs374 =     clhs12*clhs371 + clhs15*clhs372 + clhs370*clhs9;
    const double clhs375 =     clhs23*clhs370 + clhs24*clhs371 + clhs25*clhs372 + clhs314;
    const double clhs376 =     Deltatangentxis[8](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs377 =     Deltatangentxis[8](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs378 =     Deltatangentxis[8](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs379 =     Deltatangentxis[8](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs380 =     Deltatangentxis[8](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs381 =     Deltatangentxis[8](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs382 =     Deltatangentxis[8](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs383 =     Deltatangentxis[8](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs384 =     -clhs113*(N1[0]*clhs366 + N1[1]*clhs376 + N1[2]*clhs377) - clhs114*(N1[0]*clhs378 + N1[1]*clhs379 + N1[2]*clhs380) - clhs115*(N1[0]*clhs381 + N1[1]*clhs382 + N1[2]*clhs383) + clhs22*clhs375 + clhs29*clhs373 + clhs374*clhs8;
    const double clhs385 =     clhs1*clhs2*clhs384;
    const double clhs386 =     Deltatangentetas[8](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs387 =     Deltatangentetas[8](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs388 =     Deltatangentetas[8](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs389 =     Deltatangentetas[8](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs390 =     Deltatangentetas[8](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs391 =     Deltatangentetas[8](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs392 =     Deltatangentetas[8](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs393 =     Deltatangentetas[8](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs394 =     -clhs113*(N1[0]*clhs369 + N1[1]*clhs386 + N1[2]*clhs387) - clhs114*(N1[0]*clhs388 + N1[1]*clhs389 + N1[2]*clhs390) - clhs115*(N1[0]*clhs391 + N1[1]*clhs392 + N1[2]*clhs393) + clhs373*clhs46 + clhs374*clhs39 + clhs375*clhs43;
    const double clhs395 =     clhs1*clhs2*clhs394;
    const double clhs396 =     clhs1*clhs116*clhs5;
    const double clhs397 =     clhs116*clhs2*clhs5;
    const double clhs398 =     clhs1*clhs123*clhs36;
    const double clhs399 =     clhs123*clhs2*clhs36;
    const double clhs400 =     clhs1*clhs116*clhs19;
    const double clhs401 =     clhs116*clhs19*clhs2;
    const double clhs402 =     clhs1*clhs123*clhs40;
    const double clhs403 =     clhs123*clhs2*clhs40;
    const double clhs404 =     Phi[1]; // PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs405 =     clhs0*clhs2*clhs404;
    const double clhs406 =     clhs116*clhs2*clhs404;
    const double clhs407 =     clhs116*clhs27*clhs404;
    const double clhs408 =     DeltaPhi[0][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs409 =     clhs116*clhs2*clhs27;
    const double clhs410 =     clhs123*clhs2*clhs404;
    const double clhs411 =     clhs123*clhs404*clhs44;
    const double clhs412 =     clhs123*clhs2*clhs44;
    const double clhs413 =     clhs142*clhs2*clhs404;
    const double clhs414 =     clhs152*clhs2*clhs404;
    const double clhs415 =     DeltaPhi[1][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs416 =     clhs172*clhs2*clhs404;
    const double clhs417 =     clhs182*clhs2*clhs404;
    const double clhs418 =     DeltaPhi[2][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs419 =     clhs2*clhs202*clhs404;
    const double clhs420 =     clhs2*clhs212*clhs404;
    const double clhs421 =     DeltaPhi[3][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs422 =     clhs2*clhs233*clhs404;
    const double clhs423 =     clhs2*clhs243*clhs404;
    const double clhs424 =     DeltaPhi[4][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs425 =     clhs2*clhs263*clhs404;
    const double clhs426 =     clhs2*clhs273*clhs404;
    const double clhs427 =     DeltaPhi[5][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs428 =     clhs2*clhs293*clhs404;
    const double clhs429 =     clhs2*clhs303*clhs404;
    const double clhs430 =     DeltaPhi[6][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs431 =     clhs2*clhs324*clhs404;
    const double clhs432 =     clhs2*clhs334*clhs404;
    const double clhs433 =     DeltaPhi[7][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs434 =     clhs2*clhs354*clhs404;
    const double clhs435 =     clhs2*clhs364*clhs404;
    const double clhs436 =     DeltaPhi[8][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs437 =     clhs2*clhs384*clhs404;
    const double clhs438 =     clhs2*clhs394*clhs404;
    const double clhs439 =     clhs116*clhs404*clhs6;
    const double clhs440 =     clhs116*clhs2*clhs6;
    const double clhs441 =     clhs123*clhs37*clhs404;
    const double clhs442 =     clhs123*clhs2*clhs37;
    const double clhs443 =     clhs116*clhs20*clhs404;
    const double clhs444 =     clhs116*clhs2*clhs20;
    const double clhs445 =     clhs123*clhs404*clhs41;
    const double clhs446 =     clhs123*clhs2*clhs41;
    const double clhs447 =     Phi[2]; // PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs448 =     clhs0*clhs2*clhs447;
    const double clhs449 =     clhs116*clhs2*clhs447;
    const double clhs450 =     clhs116*clhs28*clhs447;
    const double clhs451 =     DeltaPhi[0][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs452 =     clhs116*clhs2*clhs28;
    const double clhs453 =     clhs123*clhs2*clhs447;
    const double clhs454 =     clhs123*clhs447*clhs45;
    const double clhs455 =     clhs123*clhs2*clhs45;
    const double clhs456 =     clhs142*clhs2*clhs447;
    const double clhs457 =     clhs152*clhs2*clhs447;
    const double clhs458 =     DeltaPhi[1][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs459 =     clhs172*clhs2*clhs447;
    const double clhs460 =     clhs182*clhs2*clhs447;
    const double clhs461 =     DeltaPhi[2][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs462 =     clhs2*clhs202*clhs447;
    const double clhs463 =     clhs2*clhs212*clhs447;
    const double clhs464 =     DeltaPhi[3][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs465 =     clhs2*clhs233*clhs447;
    const double clhs466 =     clhs2*clhs243*clhs447;
    const double clhs467 =     DeltaPhi[4][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs468 =     clhs2*clhs263*clhs447;
    const double clhs469 =     clhs2*clhs273*clhs447;
    const double clhs470 =     DeltaPhi[5][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs471 =     clhs2*clhs293*clhs447;
    const double clhs472 =     clhs2*clhs303*clhs447;
    const double clhs473 =     DeltaPhi[6][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs474 =     clhs2*clhs324*clhs447;
    const double clhs475 =     clhs2*clhs334*clhs447;
    const double clhs476 =     DeltaPhi[7][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs477 =     clhs2*clhs354*clhs447;
    const double clhs478 =     clhs2*clhs364*clhs447;
    const double clhs479 =     DeltaPhi[8][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs480 =     clhs2*clhs384*clhs447;
    const double clhs481 =     clhs2*clhs394*clhs447;
    const double clhs482 =     clhs116*clhs447*clhs7;
    const double clhs483 =     clhs116*clhs2*clhs7;
    const double clhs484 =     clhs123*clhs38*clhs447;
    const double clhs485 =     clhs123*clhs2*clhs38;
    const double clhs486 =     clhs116*clhs21*clhs447;
    const double clhs487 =     clhs116*clhs2*clhs21;
    const double clhs488 =     clhs123*clhs42*clhs447;
    const double clhs489 =     clhs123*clhs2*clhs42;

    lhs(0,0)=0;
    lhs(0,1)=0;
    lhs(0,2)=0;
    lhs(0,3)=0;
    lhs(0,4)=0;
    lhs(0,5)=0;
    lhs(0,6)=0;
    lhs(0,7)=0;
    lhs(0,8)=0;
    lhs(0,9)=0;
    lhs(0,10)=0;
    lhs(0,11)=0;
    lhs(0,12)=0;
    lhs(0,13)=0;
    lhs(0,14)=0;
    lhs(0,15)=0;
    lhs(0,16)=0;
    lhs(0,17)=0;
    lhs(0,18)=0;
    lhs(0,19)=0;
    lhs(0,20)=0;
    lhs(0,21)=0;
    lhs(0,22)=0;
    lhs(0,23)=0;
    lhs(0,24)=0;
    lhs(0,25)=0;
    lhs(0,26)=0;
    lhs(1,0)=0;
    lhs(1,1)=0;
    lhs(1,2)=0;
    lhs(1,3)=0;
    lhs(1,4)=0;
    lhs(1,5)=0;
    lhs(1,6)=0;
    lhs(1,7)=0;
    lhs(1,8)=0;
    lhs(1,9)=0;
    lhs(1,10)=0;
    lhs(1,11)=0;
    lhs(1,12)=0;
    lhs(1,13)=0;
    lhs(1,14)=0;
    lhs(1,15)=0;
    lhs(1,16)=0;
    lhs(1,17)=0;
    lhs(1,18)=0;
    lhs(1,19)=0;
    lhs(1,20)=0;
    lhs(1,21)=0;
    lhs(1,22)=0;
    lhs(1,23)=0;
    lhs(1,24)=0;
    lhs(1,25)=0;
    lhs(1,26)=0;
    lhs(2,0)=0;
    lhs(2,1)=0;
    lhs(2,2)=0;
    lhs(2,3)=0;
    lhs(2,4)=0;
    lhs(2,5)=0;
    lhs(2,6)=0;
    lhs(2,7)=0;
    lhs(2,8)=0;
    lhs(2,9)=0;
    lhs(2,10)=0;
    lhs(2,11)=0;
    lhs(2,12)=0;
    lhs(2,13)=0;
    lhs(2,14)=0;
    lhs(2,15)=0;
    lhs(2,16)=0;
    lhs(2,17)=0;
    lhs(2,18)=0;
    lhs(2,19)=0;
    lhs(2,20)=0;
    lhs(2,21)=0;
    lhs(2,22)=0;
    lhs(2,23)=0;
    lhs(2,24)=0;
    lhs(2,25)=0;
    lhs(2,26)=0;
    lhs(3,0)=0;
    lhs(3,1)=0;
    lhs(3,2)=0;
    lhs(3,3)=0;
    lhs(3,4)=0;
    lhs(3,5)=0;
    lhs(3,6)=0;
    lhs(3,7)=0;
    lhs(3,8)=0;
    lhs(3,9)=0;
    lhs(3,10)=0;
    lhs(3,11)=0;
    lhs(3,12)=0;
    lhs(3,13)=0;
    lhs(3,14)=0;
    lhs(3,15)=0;
    lhs(3,16)=0;
    lhs(3,17)=0;
    lhs(3,18)=0;
    lhs(3,19)=0;
    lhs(3,20)=0;
    lhs(3,21)=0;
    lhs(3,22)=0;
    lhs(3,23)=0;
    lhs(3,24)=0;
    lhs(3,25)=0;
    lhs(3,26)=0;
    lhs(4,0)=0;
    lhs(4,1)=0;
    lhs(4,2)=0;
    lhs(4,3)=0;
    lhs(4,4)=0;
    lhs(4,5)=0;
    lhs(4,6)=0;
    lhs(4,7)=0;
    lhs(4,8)=0;
    lhs(4,9)=0;
    lhs(4,10)=0;
    lhs(4,11)=0;
    lhs(4,12)=0;
    lhs(4,13)=0;
    lhs(4,14)=0;
    lhs(4,15)=0;
    lhs(4,16)=0;
    lhs(4,17)=0;
    lhs(4,18)=0;
    lhs(4,19)=0;
    lhs(4,20)=0;
    lhs(4,21)=0;
    lhs(4,22)=0;
    lhs(4,23)=0;
    lhs(4,24)=0;
    lhs(4,25)=0;
    lhs(4,26)=0;
    lhs(5,0)=0;
    lhs(5,1)=0;
    lhs(5,2)=0;
    lhs(5,3)=0;
    lhs(5,4)=0;
    lhs(5,5)=0;
    lhs(5,6)=0;
    lhs(5,7)=0;
    lhs(5,8)=0;
    lhs(5,9)=0;
    lhs(5,10)=0;
    lhs(5,11)=0;
    lhs(5,12)=0;
    lhs(5,13)=0;
    lhs(5,14)=0;
    lhs(5,15)=0;
    lhs(5,16)=0;
    lhs(5,17)=0;
    lhs(5,18)=0;
    lhs(5,19)=0;
    lhs(5,20)=0;
    lhs(5,21)=0;
    lhs(5,22)=0;
    lhs(5,23)=0;
    lhs(5,24)=0;
    lhs(5,25)=0;
    lhs(5,26)=0;
    lhs(6,0)=0;
    lhs(6,1)=0;
    lhs(6,2)=0;
    lhs(6,3)=0;
    lhs(6,4)=0;
    lhs(6,5)=0;
    lhs(6,6)=0;
    lhs(6,7)=0;
    lhs(6,8)=0;
    lhs(6,9)=0;
    lhs(6,10)=0;
    lhs(6,11)=0;
    lhs(6,12)=0;
    lhs(6,13)=0;
    lhs(6,14)=0;
    lhs(6,15)=0;
    lhs(6,16)=0;
    lhs(6,17)=0;
    lhs(6,18)=0;
    lhs(6,19)=0;
    lhs(6,20)=0;
    lhs(6,21)=0;
    lhs(6,22)=0;
    lhs(6,23)=0;
    lhs(6,24)=0;
    lhs(6,25)=0;
    lhs(6,26)=0;
    lhs(7,0)=0;
    lhs(7,1)=0;
    lhs(7,2)=0;
    lhs(7,3)=0;
    lhs(7,4)=0;
    lhs(7,5)=0;
    lhs(7,6)=0;
    lhs(7,7)=0;
    lhs(7,8)=0;
    lhs(7,9)=0;
    lhs(7,10)=0;
    lhs(7,11)=0;
    lhs(7,12)=0;
    lhs(7,13)=0;
    lhs(7,14)=0;
    lhs(7,15)=0;
    lhs(7,16)=0;
    lhs(7,17)=0;
    lhs(7,18)=0;
    lhs(7,19)=0;
    lhs(7,20)=0;
    lhs(7,21)=0;
    lhs(7,22)=0;
    lhs(7,23)=0;
    lhs(7,24)=0;
    lhs(7,25)=0;
    lhs(7,26)=0;
    lhs(8,0)=0;
    lhs(8,1)=0;
    lhs(8,2)=0;
    lhs(8,3)=0;
    lhs(8,4)=0;
    lhs(8,5)=0;
    lhs(8,6)=0;
    lhs(8,7)=0;
    lhs(8,8)=0;
    lhs(8,9)=0;
    lhs(8,10)=0;
    lhs(8,11)=0;
    lhs(8,12)=0;
    lhs(8,13)=0;
    lhs(8,14)=0;
    lhs(8,15)=0;
    lhs(8,16)=0;
    lhs(8,17)=0;
    lhs(8,18)=0;
    lhs(8,19)=0;
    lhs(8,20)=0;
    lhs(8,21)=0;
    lhs(8,22)=0;
    lhs(8,23)=0;
    lhs(8,24)=0;
    lhs(8,25)=0;
    lhs(8,26)=0;
    lhs(9,0)=0;
    lhs(9,1)=0;
    lhs(9,2)=0;
    lhs(9,3)=0;
    lhs(9,4)=0;
    lhs(9,5)=0;
    lhs(9,6)=0;
    lhs(9,7)=0;
    lhs(9,8)=0;
    lhs(9,9)=0;
    lhs(9,10)=0;
    lhs(9,11)=0;
    lhs(9,12)=0;
    lhs(9,13)=0;
    lhs(9,14)=0;
    lhs(9,15)=0;
    lhs(9,16)=0;
    lhs(9,17)=0;
    lhs(9,18)=0;
    lhs(9,19)=0;
    lhs(9,20)=0;
    lhs(9,21)=0;
    lhs(9,22)=0;
    lhs(9,23)=0;
    lhs(9,24)=0;
    lhs(9,25)=0;
    lhs(9,26)=0;
    lhs(10,0)=0;
    lhs(10,1)=0;
    lhs(10,2)=0;
    lhs(10,3)=0;
    lhs(10,4)=0;
    lhs(10,5)=0;
    lhs(10,6)=0;
    lhs(10,7)=0;
    lhs(10,8)=0;
    lhs(10,9)=0;
    lhs(10,10)=0;
    lhs(10,11)=0;
    lhs(10,12)=0;
    lhs(10,13)=0;
    lhs(10,14)=0;
    lhs(10,15)=0;
    lhs(10,16)=0;
    lhs(10,17)=0;
    lhs(10,18)=0;
    lhs(10,19)=0;
    lhs(10,20)=0;
    lhs(10,21)=0;
    lhs(10,22)=0;
    lhs(10,23)=0;
    lhs(10,24)=0;
    lhs(10,25)=0;
    lhs(10,26)=0;
    lhs(11,0)=0;
    lhs(11,1)=0;
    lhs(11,2)=0;
    lhs(11,3)=0;
    lhs(11,4)=0;
    lhs(11,5)=0;
    lhs(11,6)=0;
    lhs(11,7)=0;
    lhs(11,8)=0;
    lhs(11,9)=0;
    lhs(11,10)=0;
    lhs(11,11)=0;
    lhs(11,12)=0;
    lhs(11,13)=0;
    lhs(11,14)=0;
    lhs(11,15)=0;
    lhs(11,16)=0;
    lhs(11,17)=0;
    lhs(11,18)=0;
    lhs(11,19)=0;
    lhs(11,20)=0;
    lhs(11,21)=0;
    lhs(11,22)=0;
    lhs(11,23)=0;
    lhs(11,24)=0;
    lhs(11,25)=0;
    lhs(11,26)=0;
    lhs(12,0)=0;
    lhs(12,1)=0;
    lhs(12,2)=0;
    lhs(12,3)=0;
    lhs(12,4)=0;
    lhs(12,5)=0;
    lhs(12,6)=0;
    lhs(12,7)=0;
    lhs(12,8)=0;
    lhs(12,9)=0;
    lhs(12,10)=0;
    lhs(12,11)=0;
    lhs(12,12)=0;
    lhs(12,13)=0;
    lhs(12,14)=0;
    lhs(12,15)=0;
    lhs(12,16)=0;
    lhs(12,17)=0;
    lhs(12,18)=0;
    lhs(12,19)=0;
    lhs(12,20)=0;
    lhs(12,21)=0;
    lhs(12,22)=0;
    lhs(12,23)=0;
    lhs(12,24)=0;
    lhs(12,25)=0;
    lhs(12,26)=0;
    lhs(13,0)=0;
    lhs(13,1)=0;
    lhs(13,2)=0;
    lhs(13,3)=0;
    lhs(13,4)=0;
    lhs(13,5)=0;
    lhs(13,6)=0;
    lhs(13,7)=0;
    lhs(13,8)=0;
    lhs(13,9)=0;
    lhs(13,10)=0;
    lhs(13,11)=0;
    lhs(13,12)=0;
    lhs(13,13)=0;
    lhs(13,14)=0;
    lhs(13,15)=0;
    lhs(13,16)=0;
    lhs(13,17)=0;
    lhs(13,18)=0;
    lhs(13,19)=0;
    lhs(13,20)=0;
    lhs(13,21)=0;
    lhs(13,22)=0;
    lhs(13,23)=0;
    lhs(13,24)=0;
    lhs(13,25)=0;
    lhs(13,26)=0;
    lhs(14,0)=0;
    lhs(14,1)=0;
    lhs(14,2)=0;
    lhs(14,3)=0;
    lhs(14,4)=0;
    lhs(14,5)=0;
    lhs(14,6)=0;
    lhs(14,7)=0;
    lhs(14,8)=0;
    lhs(14,9)=0;
    lhs(14,10)=0;
    lhs(14,11)=0;
    lhs(14,12)=0;
    lhs(14,13)=0;
    lhs(14,14)=0;
    lhs(14,15)=0;
    lhs(14,16)=0;
    lhs(14,17)=0;
    lhs(14,18)=0;
    lhs(14,19)=0;
    lhs(14,20)=0;
    lhs(14,21)=0;
    lhs(14,22)=0;
    lhs(14,23)=0;
    lhs(14,24)=0;
    lhs(14,25)=0;
    lhs(14,26)=0;
    lhs(15,0)=0;
    lhs(15,1)=0;
    lhs(15,2)=0;
    lhs(15,3)=0;
    lhs(15,4)=0;
    lhs(15,5)=0;
    lhs(15,6)=0;
    lhs(15,7)=0;
    lhs(15,8)=0;
    lhs(15,9)=0;
    lhs(15,10)=0;
    lhs(15,11)=0;
    lhs(15,12)=0;
    lhs(15,13)=0;
    lhs(15,14)=0;
    lhs(15,15)=0;
    lhs(15,16)=0;
    lhs(15,17)=0;
    lhs(15,18)=0;
    lhs(15,19)=0;
    lhs(15,20)=0;
    lhs(15,21)=0;
    lhs(15,22)=0;
    lhs(15,23)=0;
    lhs(15,24)=0;
    lhs(15,25)=0;
    lhs(15,26)=0;
    lhs(16,0)=0;
    lhs(16,1)=0;
    lhs(16,2)=0;
    lhs(16,3)=0;
    lhs(16,4)=0;
    lhs(16,5)=0;
    lhs(16,6)=0;
    lhs(16,7)=0;
    lhs(16,8)=0;
    lhs(16,9)=0;
    lhs(16,10)=0;
    lhs(16,11)=0;
    lhs(16,12)=0;
    lhs(16,13)=0;
    lhs(16,14)=0;
    lhs(16,15)=0;
    lhs(16,16)=0;
    lhs(16,17)=0;
    lhs(16,18)=0;
    lhs(16,19)=0;
    lhs(16,20)=0;
    lhs(16,21)=0;
    lhs(16,22)=0;
    lhs(16,23)=0;
    lhs(16,24)=0;
    lhs(16,25)=0;
    lhs(16,26)=0;
    lhs(17,0)=0;
    lhs(17,1)=0;
    lhs(17,2)=0;
    lhs(17,3)=0;
    lhs(17,4)=0;
    lhs(17,5)=0;
    lhs(17,6)=0;
    lhs(17,7)=0;
    lhs(17,8)=0;
    lhs(17,9)=0;
    lhs(17,10)=0;
    lhs(17,11)=0;
    lhs(17,12)=0;
    lhs(17,13)=0;
    lhs(17,14)=0;
    lhs(17,15)=0;
    lhs(17,16)=0;
    lhs(17,17)=0;
    lhs(17,18)=0;
    lhs(17,19)=0;
    lhs(17,20)=0;
    lhs(17,21)=0;
    lhs(17,22)=0;
    lhs(17,23)=0;
    lhs(17,24)=0;
    lhs(17,25)=0;
    lhs(17,26)=0;
    lhs(18,0)=-clhs3*(clhs34*clhs4 + clhs35*clhs47);
    lhs(18,1)=-clhs3*(clhs35*clhs55 + clhs4*clhs54);
    lhs(18,2)=-clhs3*(clhs35*clhs63 + clhs4*clhs62);
    lhs(18,3)=-clhs3*(clhs35*clhs71 + clhs4*clhs70);
    lhs(18,4)=-clhs3*(clhs35*clhs79 + clhs4*clhs78);
    lhs(18,5)=-clhs3*(clhs35*clhs87 + clhs4*clhs86);
    lhs(18,6)=-clhs3*(clhs35*clhs95 + clhs4*clhs94);
    lhs(18,7)=-clhs3*(clhs102*clhs4 + clhs103*clhs35);
    lhs(18,8)=-clhs3*(clhs110*clhs4 + clhs111*clhs35);
    lhs(18,9)=clhs0*(clhs112*clhs117 + clhs118*clhs119 + clhs118*clhs125 + clhs120*clhs121 + clhs120*clhs126 + clhs122*clhs124 - clhs143*clhs4 - clhs153*clhs35);
    lhs(18,10)=clhs0*(clhs117*clhs154 + clhs119*clhs155 + clhs121*clhs156 + clhs124*clhs157 + clhs125*clhs155 + clhs126*clhs156 - clhs173*clhs4 - clhs183*clhs35);
    lhs(18,11)=clhs0*(clhs117*clhs184 + clhs119*clhs185 + clhs121*clhs186 + clhs124*clhs187 + clhs125*clhs185 + clhs126*clhs186 - clhs203*clhs4 - clhs213*clhs35);
    lhs(18,12)=clhs0*(clhs117*clhs214 + clhs119*clhs215 + clhs121*clhs216 + clhs124*clhs217 + clhs125*clhs215 + clhs126*clhs216 - clhs234*clhs4 - clhs244*clhs35);
    lhs(18,13)=clhs0*(clhs117*clhs245 + clhs119*clhs246 + clhs121*clhs247 + clhs124*clhs248 + clhs125*clhs246 + clhs126*clhs247 - clhs264*clhs4 - clhs274*clhs35);
    lhs(18,14)=clhs0*(clhs117*clhs275 + clhs119*clhs276 + clhs121*clhs277 + clhs124*clhs278 + clhs125*clhs276 + clhs126*clhs277 - clhs294*clhs4 - clhs304*clhs35);
    lhs(18,15)=clhs0*(clhs117*clhs305 + clhs119*clhs306 + clhs121*clhs307 + clhs124*clhs308 + clhs125*clhs306 + clhs126*clhs307 - clhs325*clhs4 - clhs335*clhs35);
    lhs(18,16)=clhs0*(clhs117*clhs336 + clhs119*clhs337 + clhs121*clhs338 + clhs124*clhs339 + clhs125*clhs337 + clhs126*clhs338 - clhs35*clhs365 - clhs355*clhs4);
    lhs(18,17)=clhs0*(clhs117*clhs366 + clhs119*clhs367 + clhs121*clhs368 + clhs124*clhs369 + clhs125*clhs367 + clhs126*clhs368 - clhs35*clhs395 - clhs385*clhs4);
    lhs(18,18)=0;
    lhs(18,19)=0;
    lhs(18,20)=0;
    lhs(18,21)=0;
    lhs(18,22)=0;
    lhs(18,23)=0;
    lhs(18,24)=0;
    lhs(18,25)=0;
    lhs(18,26)=0;
    lhs(19,0)=-clhs3*(clhs34*clhs5 + clhs36*clhs47);
    lhs(19,1)=-clhs3*(clhs36*clhs55 + clhs5*clhs54);
    lhs(19,2)=-clhs3*(clhs36*clhs63 + clhs5*clhs62);
    lhs(19,3)=-clhs3*(clhs36*clhs71 + clhs5*clhs70);
    lhs(19,4)=-clhs3*(clhs36*clhs79 + clhs5*clhs78);
    lhs(19,5)=-clhs3*(clhs36*clhs87 + clhs5*clhs86);
    lhs(19,6)=-clhs3*(clhs36*clhs95 + clhs5*clhs94);
    lhs(19,7)=-clhs3*(clhs102*clhs5 + clhs103*clhs36);
    lhs(19,8)=-clhs3*(clhs110*clhs5 + clhs111*clhs36);
    lhs(19,9)=clhs0*(clhs117*clhs136 + clhs118*clhs396 + clhs118*clhs398 + clhs120*clhs397 + clhs120*clhs399 + clhs124*clhs146 - clhs143*clhs5 - clhs153*clhs36);
    lhs(19,10)=clhs0*(clhs117*clhs166 + clhs124*clhs176 + clhs155*clhs396 + clhs155*clhs398 + clhs156*clhs397 + clhs156*clhs399 - clhs173*clhs5 - clhs183*clhs36);
    lhs(19,11)=clhs0*(clhs117*clhs196 + clhs124*clhs206 + clhs185*clhs396 + clhs185*clhs398 + clhs186*clhs397 + clhs186*clhs399 - clhs203*clhs5 - clhs213*clhs36);
    lhs(19,12)=clhs0*(clhs117*clhs227 + clhs124*clhs237 + clhs215*clhs396 + clhs215*clhs398 + clhs216*clhs397 + clhs216*clhs399 - clhs234*clhs5 - clhs244*clhs36);
    lhs(19,13)=clhs0*(clhs117*clhs257 + clhs124*clhs267 + clhs246*clhs396 + clhs246*clhs398 + clhs247*clhs397 + clhs247*clhs399 - clhs264*clhs5 - clhs274*clhs36);
    lhs(19,14)=clhs0*(clhs117*clhs287 + clhs124*clhs297 + clhs276*clhs396 + clhs276*clhs398 + clhs277*clhs397 + clhs277*clhs399 - clhs294*clhs5 - clhs304*clhs36);
    lhs(19,15)=clhs0*(clhs117*clhs318 + clhs124*clhs328 + clhs306*clhs396 + clhs306*clhs398 + clhs307*clhs397 + clhs307*clhs399 - clhs325*clhs5 - clhs335*clhs36);
    lhs(19,16)=clhs0*(clhs117*clhs348 + clhs124*clhs358 + clhs337*clhs396 + clhs337*clhs398 + clhs338*clhs397 + clhs338*clhs399 - clhs355*clhs5 - clhs36*clhs365);
    lhs(19,17)=clhs0*(clhs117*clhs378 + clhs124*clhs388 - clhs36*clhs395 + clhs367*clhs396 + clhs367*clhs398 + clhs368*clhs397 + clhs368*clhs399 - clhs385*clhs5);
    lhs(19,18)=0;
    lhs(19,19)=0;
    lhs(19,20)=0;
    lhs(19,21)=0;
    lhs(19,22)=0;
    lhs(19,23)=0;
    lhs(19,24)=0;
    lhs(19,25)=0;
    lhs(19,26)=0;
    lhs(20,0)=-clhs3*(clhs19*clhs34 + clhs40*clhs47);
    lhs(20,1)=-clhs3*(clhs19*clhs54 + clhs40*clhs55);
    lhs(20,2)=-clhs3*(clhs19*clhs62 + clhs40*clhs63);
    lhs(20,3)=-clhs3*(clhs19*clhs70 + clhs40*clhs71);
    lhs(20,4)=-clhs3*(clhs19*clhs78 + clhs40*clhs79);
    lhs(20,5)=-clhs3*(clhs19*clhs86 + clhs40*clhs87);
    lhs(20,6)=-clhs3*(clhs19*clhs94 + clhs40*clhs95);
    lhs(20,7)=-clhs3*(clhs102*clhs19 + clhs103*clhs40);
    lhs(20,8)=-clhs3*(clhs110*clhs19 + clhs111*clhs40);
    lhs(20,9)=clhs0*(clhs117*clhs139 + clhs118*clhs400 + clhs118*clhs402 + clhs120*clhs401 + clhs120*clhs403 + clhs124*clhs149 - clhs143*clhs19 - clhs153*clhs40);
    lhs(20,10)=clhs0*(clhs117*clhs169 + clhs124*clhs179 + clhs155*clhs400 + clhs155*clhs402 + clhs156*clhs401 + clhs156*clhs403 - clhs173*clhs19 - clhs183*clhs40);
    lhs(20,11)=clhs0*(clhs117*clhs199 + clhs124*clhs209 + clhs185*clhs400 + clhs185*clhs402 + clhs186*clhs401 + clhs186*clhs403 - clhs19*clhs203 - clhs213*clhs40);
    lhs(20,12)=clhs0*(clhs117*clhs230 + clhs124*clhs240 - clhs19*clhs234 + clhs215*clhs400 + clhs215*clhs402 + clhs216*clhs401 + clhs216*clhs403 - clhs244*clhs40);
    lhs(20,13)=clhs0*(clhs117*clhs260 + clhs124*clhs270 - clhs19*clhs264 + clhs246*clhs400 + clhs246*clhs402 + clhs247*clhs401 + clhs247*clhs403 - clhs274*clhs40);
    lhs(20,14)=clhs0*(clhs117*clhs290 + clhs124*clhs300 - clhs19*clhs294 + clhs276*clhs400 + clhs276*clhs402 + clhs277*clhs401 + clhs277*clhs403 - clhs304*clhs40);
    lhs(20,15)=clhs0*(clhs117*clhs321 + clhs124*clhs331 - clhs19*clhs325 + clhs306*clhs400 + clhs306*clhs402 + clhs307*clhs401 + clhs307*clhs403 - clhs335*clhs40);
    lhs(20,16)=clhs0*(clhs117*clhs351 + clhs124*clhs361 - clhs19*clhs355 + clhs337*clhs400 + clhs337*clhs402 + clhs338*clhs401 + clhs338*clhs403 - clhs365*clhs40);
    lhs(20,17)=clhs0*(clhs117*clhs381 + clhs124*clhs391 - clhs19*clhs385 + clhs367*clhs400 + clhs367*clhs402 + clhs368*clhs401 + clhs368*clhs403 - clhs395*clhs40);
    lhs(20,18)=0;
    lhs(20,19)=0;
    lhs(20,20)=0;
    lhs(20,21)=0;
    lhs(20,22)=0;
    lhs(20,23)=0;
    lhs(20,24)=0;
    lhs(20,25)=0;
    lhs(20,26)=0;
    lhs(21,0)=-clhs405*(clhs27*clhs34 + clhs44*clhs47);
    lhs(21,1)=-clhs405*(clhs27*clhs54 + clhs44*clhs55);
    lhs(21,2)=-clhs405*(clhs27*clhs62 + clhs44*clhs63);
    lhs(21,3)=-clhs405*(clhs27*clhs70 + clhs44*clhs71);
    lhs(21,4)=-clhs405*(clhs27*clhs78 + clhs44*clhs79);
    lhs(21,5)=-clhs405*(clhs27*clhs86 + clhs44*clhs87);
    lhs(21,6)=-clhs405*(clhs27*clhs94 + clhs44*clhs95);
    lhs(21,7)=-clhs405*(clhs102*clhs27 + clhs103*clhs44);
    lhs(21,8)=-clhs405*(clhs110*clhs27 + clhs111*clhs44);
    lhs(21,9)=clhs0*(clhs118*clhs407 + clhs118*clhs411 + clhs134*clhs406 + clhs144*clhs410 - clhs27*clhs413 + clhs408*clhs409 + clhs408*clhs412 - clhs414*clhs44);
    lhs(21,10)=clhs0*(clhs155*clhs407 + clhs155*clhs411 + clhs164*clhs406 + clhs174*clhs410 - clhs27*clhs416 + clhs409*clhs415 + clhs412*clhs415 - clhs417*clhs44);
    lhs(21,11)=clhs0*(clhs185*clhs407 + clhs185*clhs411 + clhs194*clhs406 + clhs204*clhs410 - clhs27*clhs419 + clhs409*clhs418 + clhs412*clhs418 - clhs420*clhs44);
    lhs(21,12)=clhs0*(clhs215*clhs407 + clhs215*clhs411 + clhs225*clhs406 + clhs235*clhs410 - clhs27*clhs422 + clhs409*clhs421 + clhs412*clhs421 - clhs423*clhs44);
    lhs(21,13)=clhs0*(clhs246*clhs407 + clhs246*clhs411 + clhs255*clhs406 + clhs265*clhs410 - clhs27*clhs425 + clhs409*clhs424 + clhs412*clhs424 - clhs426*clhs44);
    lhs(21,14)=clhs0*(-clhs27*clhs428 + clhs276*clhs407 + clhs276*clhs411 + clhs285*clhs406 + clhs295*clhs410 + clhs409*clhs427 + clhs412*clhs427 - clhs429*clhs44);
    lhs(21,15)=clhs0*(-clhs27*clhs431 + clhs306*clhs407 + clhs306*clhs411 + clhs316*clhs406 + clhs326*clhs410 + clhs409*clhs430 + clhs412*clhs430 - clhs432*clhs44);
    lhs(21,16)=clhs0*(-clhs27*clhs434 + clhs337*clhs407 + clhs337*clhs411 + clhs346*clhs406 + clhs356*clhs410 + clhs409*clhs433 + clhs412*clhs433 - clhs435*clhs44);
    lhs(21,17)=clhs0*(-clhs27*clhs437 + clhs367*clhs407 + clhs367*clhs411 + clhs376*clhs406 + clhs386*clhs410 + clhs409*clhs436 + clhs412*clhs436 - clhs438*clhs44);
    lhs(21,18)=0;
    lhs(21,19)=0;
    lhs(21,20)=0;
    lhs(21,21)=0;
    lhs(21,22)=0;
    lhs(21,23)=0;
    lhs(21,24)=0;
    lhs(21,25)=0;
    lhs(21,26)=0;
    lhs(22,0)=-clhs405*(clhs34*clhs6 + clhs37*clhs47);
    lhs(22,1)=-clhs405*(clhs37*clhs55 + clhs54*clhs6);
    lhs(22,2)=-clhs405*(clhs37*clhs63 + clhs6*clhs62);
    lhs(22,3)=-clhs405*(clhs37*clhs71 + clhs6*clhs70);
    lhs(22,4)=-clhs405*(clhs37*clhs79 + clhs6*clhs78);
    lhs(22,5)=-clhs405*(clhs37*clhs87 + clhs6*clhs86);
    lhs(22,6)=-clhs405*(clhs37*clhs95 + clhs6*clhs94);
    lhs(22,7)=-clhs405*(clhs102*clhs6 + clhs103*clhs37);
    lhs(22,8)=-clhs405*(clhs110*clhs6 + clhs111*clhs37);
    lhs(22,9)=clhs0*(clhs118*clhs439 + clhs118*clhs441 + clhs137*clhs406 + clhs147*clhs410 - clhs37*clhs414 + clhs408*clhs440 + clhs408*clhs442 - clhs413*clhs6);
    lhs(22,10)=clhs0*(clhs155*clhs439 + clhs155*clhs441 + clhs167*clhs406 + clhs177*clhs410 - clhs37*clhs417 + clhs415*clhs440 + clhs415*clhs442 - clhs416*clhs6);
    lhs(22,11)=clhs0*(clhs185*clhs439 + clhs185*clhs441 + clhs197*clhs406 + clhs207*clhs410 - clhs37*clhs420 + clhs418*clhs440 + clhs418*clhs442 - clhs419*clhs6);
    lhs(22,12)=clhs0*(clhs215*clhs439 + clhs215*clhs441 + clhs228*clhs406 + clhs238*clhs410 - clhs37*clhs423 + clhs421*clhs440 + clhs421*clhs442 - clhs422*clhs6);
    lhs(22,13)=clhs0*(clhs246*clhs439 + clhs246*clhs441 + clhs258*clhs406 + clhs268*clhs410 - clhs37*clhs426 + clhs424*clhs440 + clhs424*clhs442 - clhs425*clhs6);
    lhs(22,14)=clhs0*(clhs276*clhs439 + clhs276*clhs441 + clhs288*clhs406 + clhs298*clhs410 - clhs37*clhs429 + clhs427*clhs440 + clhs427*clhs442 - clhs428*clhs6);
    lhs(22,15)=clhs0*(clhs306*clhs439 + clhs306*clhs441 + clhs319*clhs406 + clhs329*clhs410 - clhs37*clhs432 + clhs430*clhs440 + clhs430*clhs442 - clhs431*clhs6);
    lhs(22,16)=clhs0*(clhs337*clhs439 + clhs337*clhs441 + clhs349*clhs406 + clhs359*clhs410 - clhs37*clhs435 + clhs433*clhs440 + clhs433*clhs442 - clhs434*clhs6);
    lhs(22,17)=clhs0*(clhs367*clhs439 + clhs367*clhs441 - clhs37*clhs438 + clhs379*clhs406 + clhs389*clhs410 + clhs436*clhs440 + clhs436*clhs442 - clhs437*clhs6);
    lhs(22,18)=0;
    lhs(22,19)=0;
    lhs(22,20)=0;
    lhs(22,21)=0;
    lhs(22,22)=0;
    lhs(22,23)=0;
    lhs(22,24)=0;
    lhs(22,25)=0;
    lhs(22,26)=0;
    lhs(23,0)=-clhs405*(clhs20*clhs34 + clhs41*clhs47);
    lhs(23,1)=-clhs405*(clhs20*clhs54 + clhs41*clhs55);
    lhs(23,2)=-clhs405*(clhs20*clhs62 + clhs41*clhs63);
    lhs(23,3)=-clhs405*(clhs20*clhs70 + clhs41*clhs71);
    lhs(23,4)=-clhs405*(clhs20*clhs78 + clhs41*clhs79);
    lhs(23,5)=-clhs405*(clhs20*clhs86 + clhs41*clhs87);
    lhs(23,6)=-clhs405*(clhs20*clhs94 + clhs41*clhs95);
    lhs(23,7)=-clhs405*(clhs102*clhs20 + clhs103*clhs41);
    lhs(23,8)=-clhs405*(clhs110*clhs20 + clhs111*clhs41);
    lhs(23,9)=clhs0*(clhs118*clhs443 + clhs118*clhs445 + clhs140*clhs406 + clhs150*clhs410 - clhs20*clhs413 + clhs408*clhs444 + clhs408*clhs446 - clhs41*clhs414);
    lhs(23,10)=clhs0*(clhs155*clhs443 + clhs155*clhs445 + clhs170*clhs406 + clhs180*clhs410 - clhs20*clhs416 - clhs41*clhs417 + clhs415*clhs444 + clhs415*clhs446);
    lhs(23,11)=clhs0*(clhs185*clhs443 + clhs185*clhs445 - clhs20*clhs419 + clhs200*clhs406 + clhs210*clhs410 - clhs41*clhs420 + clhs418*clhs444 + clhs418*clhs446);
    lhs(23,12)=clhs0*(-clhs20*clhs422 + clhs215*clhs443 + clhs215*clhs445 + clhs231*clhs406 + clhs241*clhs410 - clhs41*clhs423 + clhs421*clhs444 + clhs421*clhs446);
    lhs(23,13)=clhs0*(-clhs20*clhs425 + clhs246*clhs443 + clhs246*clhs445 + clhs261*clhs406 + clhs271*clhs410 - clhs41*clhs426 + clhs424*clhs444 + clhs424*clhs446);
    lhs(23,14)=clhs0*(-clhs20*clhs428 + clhs276*clhs443 + clhs276*clhs445 + clhs291*clhs406 + clhs301*clhs410 - clhs41*clhs429 + clhs427*clhs444 + clhs427*clhs446);
    lhs(23,15)=clhs0*(-clhs20*clhs431 + clhs306*clhs443 + clhs306*clhs445 + clhs322*clhs406 + clhs332*clhs410 - clhs41*clhs432 + clhs430*clhs444 + clhs430*clhs446);
    lhs(23,16)=clhs0*(-clhs20*clhs434 + clhs337*clhs443 + clhs337*clhs445 + clhs352*clhs406 + clhs362*clhs410 - clhs41*clhs435 + clhs433*clhs444 + clhs433*clhs446);
    lhs(23,17)=clhs0*(-clhs20*clhs437 + clhs367*clhs443 + clhs367*clhs445 + clhs382*clhs406 + clhs392*clhs410 - clhs41*clhs438 + clhs436*clhs444 + clhs436*clhs446);
    lhs(23,18)=0;
    lhs(23,19)=0;
    lhs(23,20)=0;
    lhs(23,21)=0;
    lhs(23,22)=0;
    lhs(23,23)=0;
    lhs(23,24)=0;
    lhs(23,25)=0;
    lhs(23,26)=0;
    lhs(24,0)=-clhs448*(clhs28*clhs34 + clhs45*clhs47);
    lhs(24,1)=-clhs448*(clhs28*clhs54 + clhs45*clhs55);
    lhs(24,2)=-clhs448*(clhs28*clhs62 + clhs45*clhs63);
    lhs(24,3)=-clhs448*(clhs28*clhs70 + clhs45*clhs71);
    lhs(24,4)=-clhs448*(clhs28*clhs78 + clhs45*clhs79);
    lhs(24,5)=-clhs448*(clhs28*clhs86 + clhs45*clhs87);
    lhs(24,6)=-clhs448*(clhs28*clhs94 + clhs45*clhs95);
    lhs(24,7)=-clhs448*(clhs102*clhs28 + clhs103*clhs45);
    lhs(24,8)=-clhs448*(clhs110*clhs28 + clhs111*clhs45);
    lhs(24,9)=clhs0*(clhs118*clhs450 + clhs118*clhs454 + clhs135*clhs449 + clhs145*clhs453 - clhs28*clhs456 - clhs45*clhs457 + clhs451*clhs452 + clhs451*clhs455);
    lhs(24,10)=clhs0*(clhs155*clhs450 + clhs155*clhs454 + clhs165*clhs449 + clhs175*clhs453 - clhs28*clhs459 - clhs45*clhs460 + clhs452*clhs458 + clhs455*clhs458);
    lhs(24,11)=clhs0*(clhs185*clhs450 + clhs185*clhs454 + clhs195*clhs449 + clhs205*clhs453 - clhs28*clhs462 - clhs45*clhs463 + clhs452*clhs461 + clhs455*clhs461);
    lhs(24,12)=clhs0*(clhs215*clhs450 + clhs215*clhs454 + clhs226*clhs449 + clhs236*clhs453 - clhs28*clhs465 - clhs45*clhs466 + clhs452*clhs464 + clhs455*clhs464);
    lhs(24,13)=clhs0*(clhs246*clhs450 + clhs246*clhs454 + clhs256*clhs449 + clhs266*clhs453 - clhs28*clhs468 - clhs45*clhs469 + clhs452*clhs467 + clhs455*clhs467);
    lhs(24,14)=clhs0*(clhs276*clhs450 + clhs276*clhs454 - clhs28*clhs471 + clhs286*clhs449 + clhs296*clhs453 - clhs45*clhs472 + clhs452*clhs470 + clhs455*clhs470);
    lhs(24,15)=clhs0*(-clhs28*clhs474 + clhs306*clhs450 + clhs306*clhs454 + clhs317*clhs449 + clhs327*clhs453 - clhs45*clhs475 + clhs452*clhs473 + clhs455*clhs473);
    lhs(24,16)=clhs0*(-clhs28*clhs477 + clhs337*clhs450 + clhs337*clhs454 + clhs347*clhs449 + clhs357*clhs453 - clhs45*clhs478 + clhs452*clhs476 + clhs455*clhs476);
    lhs(24,17)=clhs0*(-clhs28*clhs480 + clhs367*clhs450 + clhs367*clhs454 + clhs377*clhs449 + clhs387*clhs453 - clhs45*clhs481 + clhs452*clhs479 + clhs455*clhs479);
    lhs(24,18)=0;
    lhs(24,19)=0;
    lhs(24,20)=0;
    lhs(24,21)=0;
    lhs(24,22)=0;
    lhs(24,23)=0;
    lhs(24,24)=0;
    lhs(24,25)=0;
    lhs(24,26)=0;
    lhs(25,0)=-clhs448*(clhs34*clhs7 + clhs38*clhs47);
    lhs(25,1)=-clhs448*(clhs38*clhs55 + clhs54*clhs7);
    lhs(25,2)=-clhs448*(clhs38*clhs63 + clhs62*clhs7);
    lhs(25,3)=-clhs448*(clhs38*clhs71 + clhs7*clhs70);
    lhs(25,4)=-clhs448*(clhs38*clhs79 + clhs7*clhs78);
    lhs(25,5)=-clhs448*(clhs38*clhs87 + clhs7*clhs86);
    lhs(25,6)=-clhs448*(clhs38*clhs95 + clhs7*clhs94);
    lhs(25,7)=-clhs448*(clhs102*clhs7 + clhs103*clhs38);
    lhs(25,8)=-clhs448*(clhs110*clhs7 + clhs111*clhs38);
    lhs(25,9)=clhs0*(clhs118*clhs482 + clhs118*clhs484 + clhs138*clhs449 + clhs148*clhs453 - clhs38*clhs457 + clhs451*clhs483 + clhs451*clhs485 - clhs456*clhs7);
    lhs(25,10)=clhs0*(clhs155*clhs482 + clhs155*clhs484 + clhs168*clhs449 + clhs178*clhs453 - clhs38*clhs460 + clhs458*clhs483 + clhs458*clhs485 - clhs459*clhs7);
    lhs(25,11)=clhs0*(clhs185*clhs482 + clhs185*clhs484 + clhs198*clhs449 + clhs208*clhs453 - clhs38*clhs463 + clhs461*clhs483 + clhs461*clhs485 - clhs462*clhs7);
    lhs(25,12)=clhs0*(clhs215*clhs482 + clhs215*clhs484 + clhs229*clhs449 + clhs239*clhs453 - clhs38*clhs466 + clhs464*clhs483 + clhs464*clhs485 - clhs465*clhs7);
    lhs(25,13)=clhs0*(clhs246*clhs482 + clhs246*clhs484 + clhs259*clhs449 + clhs269*clhs453 - clhs38*clhs469 + clhs467*clhs483 + clhs467*clhs485 - clhs468*clhs7);
    lhs(25,14)=clhs0*(clhs276*clhs482 + clhs276*clhs484 + clhs289*clhs449 + clhs299*clhs453 - clhs38*clhs472 + clhs470*clhs483 + clhs470*clhs485 - clhs471*clhs7);
    lhs(25,15)=clhs0*(clhs306*clhs482 + clhs306*clhs484 + clhs320*clhs449 + clhs330*clhs453 - clhs38*clhs475 + clhs473*clhs483 + clhs473*clhs485 - clhs474*clhs7);
    lhs(25,16)=clhs0*(clhs337*clhs482 + clhs337*clhs484 + clhs350*clhs449 + clhs360*clhs453 - clhs38*clhs478 + clhs476*clhs483 + clhs476*clhs485 - clhs477*clhs7);
    lhs(25,17)=clhs0*(clhs367*clhs482 + clhs367*clhs484 - clhs38*clhs481 + clhs380*clhs449 + clhs390*clhs453 + clhs479*clhs483 + clhs479*clhs485 - clhs480*clhs7);
    lhs(25,18)=0;
    lhs(25,19)=0;
    lhs(25,20)=0;
    lhs(25,21)=0;
    lhs(25,22)=0;
    lhs(25,23)=0;
    lhs(25,24)=0;
    lhs(25,25)=0;
    lhs(25,26)=0;
    lhs(26,0)=-clhs448*(clhs21*clhs34 + clhs42*clhs47);
    lhs(26,1)=-clhs448*(clhs21*clhs54 + clhs42*clhs55);
    lhs(26,2)=-clhs448*(clhs21*clhs62 + clhs42*clhs63);
    lhs(26,3)=-clhs448*(clhs21*clhs70 + clhs42*clhs71);
    lhs(26,4)=-clhs448*(clhs21*clhs78 + clhs42*clhs79);
    lhs(26,5)=-clhs448*(clhs21*clhs86 + clhs42*clhs87);
    lhs(26,6)=-clhs448*(clhs21*clhs94 + clhs42*clhs95);
    lhs(26,7)=-clhs448*(clhs102*clhs21 + clhs103*clhs42);
    lhs(26,8)=-clhs448*(clhs110*clhs21 + clhs111*clhs42);
    lhs(26,9)=clhs0*(clhs118*clhs486 + clhs118*clhs488 + clhs141*clhs449 + clhs151*clhs453 - clhs21*clhs456 - clhs42*clhs457 + clhs451*clhs487 + clhs451*clhs489);
    lhs(26,10)=clhs0*(clhs155*clhs486 + clhs155*clhs488 + clhs171*clhs449 + clhs181*clhs453 - clhs21*clhs459 - clhs42*clhs460 + clhs458*clhs487 + clhs458*clhs489);
    lhs(26,11)=clhs0*(clhs185*clhs486 + clhs185*clhs488 + clhs201*clhs449 - clhs21*clhs462 + clhs211*clhs453 - clhs42*clhs463 + clhs461*clhs487 + clhs461*clhs489);
    lhs(26,12)=clhs0*(-clhs21*clhs465 + clhs215*clhs486 + clhs215*clhs488 + clhs232*clhs449 + clhs242*clhs453 - clhs42*clhs466 + clhs464*clhs487 + clhs464*clhs489);
    lhs(26,13)=clhs0*(-clhs21*clhs468 + clhs246*clhs486 + clhs246*clhs488 + clhs262*clhs449 + clhs272*clhs453 - clhs42*clhs469 + clhs467*clhs487 + clhs467*clhs489);
    lhs(26,14)=clhs0*(-clhs21*clhs471 + clhs276*clhs486 + clhs276*clhs488 + clhs292*clhs449 + clhs302*clhs453 - clhs42*clhs472 + clhs470*clhs487 + clhs470*clhs489);
    lhs(26,15)=clhs0*(-clhs21*clhs474 + clhs306*clhs486 + clhs306*clhs488 + clhs323*clhs449 + clhs333*clhs453 - clhs42*clhs475 + clhs473*clhs487 + clhs473*clhs489);
    lhs(26,16)=clhs0*(-clhs21*clhs477 + clhs337*clhs486 + clhs337*clhs488 + clhs353*clhs449 + clhs363*clhs453 - clhs42*clhs478 + clhs476*clhs487 + clhs476*clhs489);
    lhs(26,17)=clhs0*(-clhs21*clhs480 + clhs367*clhs486 + clhs367*clhs488 + clhs383*clhs449 + clhs393*clhs453 - clhs42*clhs481 + clhs479*clhs487 + clhs479*clhs489);
    lhs(26,18)=0;
    lhs(26,19)=0;
    lhs(26,20)=0;
    lhs(26,21)=0;
    lhs(26,22)=0;
    lhs(26,23)=0;
    lhs(26,24)=0;
    lhs(26,25)=0;
    lhs(26,26)=0;

    
    return lhs;
}
    /***********************************************************************************/
    /***********************************************************************************/
    
    static inline bounded_matrix<double,27,27> ComputeGaussPointSlipLHS(
        const array_1d<double,3> N1, 
        const array_1d<double,3> N2, 
        const array_1d<double,3> Phi, 
        const double detJ, 
        const double mu, 
        const ContactData<3,3>& rContactData
        )
{
    bounded_matrix<double,27,27> lhs;
    
    const bounded_matrix<double, 3,3> normalslave = rContactData.Normal_s;
    const bounded_matrix<double, 3,3> tan1slave   = rContactData.Tangent_xi_s;
    const bounded_matrix<double, 3,3> tan2slave   = rContactData.Tangent_eta_s;
    const bounded_matrix<double, 3,3> lm          = rContactData.LagrangeMultipliers;
    const double Dt              = rContactData.Dt;
    
//     const double sign_tangpress = boost::math::sign(augmented_tangent_lm);
    
    const bounded_matrix<double, 3,3> v1 = rContactData.v1;
    const bounded_matrix<double, 3,3> v2 = rContactData.v2;
    
    const std::vector<double> DeltaJs = rContactData.DeltaJ_s;
    const std::vector<array_1d<double,3>> DeltaPhi = rContactData.DeltaPhi;
    const std::vector<array_1d<double,3>> DeltaN2  = rContactData.DeltaN2;
    const std::vector<bounded_matrix<double, 3, 3>> DeltaNormals     = rContactData.Delta_Normal_s;
    const std::vector<bounded_matrix<double, 3, 3>> Deltatangentxis  = rContactData.Delta_Tangent_xi_s;
    const std::vector<bounded_matrix<double, 3, 3>> Deltatangentetas = rContactData.Delta_Tangent_eta_s;

    const double clhs0 =     1.0/Dt;
    const double clhs1 =     Phi[0]; // PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs2 =     detJ; // DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs3 =     clhs0*clhs1*clhs2;
    const double clhs4 =     tan1slave(0,0); // TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs5 =     tan1slave(0,1); // TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs6 =     tan1slave(1,1); // TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs7 =     tan1slave(2,1); // TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs8 =     N1[0]*clhs5 + N1[1]*clhs6 + N1[2]*clhs7;
    const double clhs9 =     Dt*v2(0,1);
    const double clhs10 =     N2[0]; // N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double clhs11 =     DeltaN2[9][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
    const double clhs12 =     Dt*v2(1,1);
    const double clhs13 =     N2[1]; // N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double clhs14 =     DeltaN2[9][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
    const double clhs15 =     Dt*v2(2,1);
    const double clhs16 =     N2[2]; // N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double clhs17 =     DeltaN2[9][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
    const double clhs18 =     clhs11*clhs9 + clhs12*clhs14 + clhs15*clhs17;
    const double clhs19 =     tan1slave(0,2); // TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs20 =     tan1slave(1,2); // TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs21 =     tan1slave(2,2); // TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs22 =     N1[0]*clhs19 + N1[1]*clhs20 + N1[2]*clhs21;
    const double clhs23 =     Dt*v2(0,2);
    const double clhs24 =     Dt*v2(1,2);
    const double clhs25 =     Dt*v2(2,2);
    const double clhs26 =     clhs11*clhs23 + clhs14*clhs24 + clhs17*clhs25;
    const double clhs27 =     tan1slave(1,0); // TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs28 =     tan1slave(2,0); // TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs29 =     N1[0]*clhs4 + N1[1]*clhs27 + N1[2]*clhs28;
    const double clhs30 =     Dt*v2(0,0);
    const double clhs31 =     Dt*v2(1,0);
    const double clhs32 =     Dt*v2(2,0);
    const double clhs33 =     clhs10 + clhs11*clhs30 + clhs14*clhs31 + clhs17*clhs32;
    const double clhs34 =     clhs18*clhs8 + clhs22*clhs26 + clhs29*clhs33;
    const double clhs35 =     tan2slave(0,0); // TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs36 =     tan2slave(0,1); // TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs37 =     tan2slave(1,1); // TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs38 =     tan2slave(2,1); // TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs39 =     N1[0]*clhs36 + N1[1]*clhs37 + N1[2]*clhs38;
    const double clhs40 =     tan2slave(0,2); // TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs41 =     tan2slave(1,2); // TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs42 =     tan2slave(2,2); // TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs43 =     N1[0]*clhs40 + N1[1]*clhs41 + N1[2]*clhs42;
    const double clhs44 =     tan2slave(1,0); // TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs45 =     tan2slave(2,0); // TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs46 =     N1[0]*clhs35 + N1[1]*clhs44 + N1[2]*clhs45;
    const double clhs47 =     clhs18*clhs39 + clhs26*clhs43 + clhs33*clhs46;
    const double clhs48 =     DeltaN2[10][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
    const double clhs49 =     DeltaN2[10][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
    const double clhs50 =     DeltaN2[10][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
    const double clhs51 =     clhs30*clhs48 + clhs31*clhs49 + clhs32*clhs50;
    const double clhs52 =     clhs23*clhs48 + clhs24*clhs49 + clhs25*clhs50;
    const double clhs53 =     clhs10 + clhs12*clhs49 + clhs15*clhs50 + clhs48*clhs9;
    const double clhs54 =     clhs22*clhs52 + clhs29*clhs51 + clhs53*clhs8;
    const double clhs55 =     clhs39*clhs53 + clhs43*clhs52 + clhs46*clhs51;
    const double clhs56 =     DeltaN2[11][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
    const double clhs57 =     DeltaN2[11][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
    const double clhs58 =     DeltaN2[11][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
    const double clhs59 =     clhs30*clhs56 + clhs31*clhs57 + clhs32*clhs58;
    const double clhs60 =     clhs12*clhs57 + clhs15*clhs58 + clhs56*clhs9;
    const double clhs61 =     clhs10 + clhs23*clhs56 + clhs24*clhs57 + clhs25*clhs58;
    const double clhs62 =     clhs22*clhs61 + clhs29*clhs59 + clhs60*clhs8;
    const double clhs63 =     clhs39*clhs60 + clhs43*clhs61 + clhs46*clhs59;
    const double clhs64 =     DeltaN2[12][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
    const double clhs65 =     DeltaN2[12][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
    const double clhs66 =     DeltaN2[12][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
    const double clhs67 =     clhs12*clhs65 + clhs15*clhs66 + clhs64*clhs9;
    const double clhs68 =     clhs23*clhs64 + clhs24*clhs65 + clhs25*clhs66;
    const double clhs69 =     clhs13 + clhs30*clhs64 + clhs31*clhs65 + clhs32*clhs66;
    const double clhs70 =     clhs22*clhs68 + clhs29*clhs69 + clhs67*clhs8;
    const double clhs71 =     clhs39*clhs67 + clhs43*clhs68 + clhs46*clhs69;
    const double clhs72 =     DeltaN2[13][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
    const double clhs73 =     DeltaN2[13][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
    const double clhs74 =     DeltaN2[13][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
    const double clhs75 =     clhs30*clhs72 + clhs31*clhs73 + clhs32*clhs74;
    const double clhs76 =     clhs23*clhs72 + clhs24*clhs73 + clhs25*clhs74;
    const double clhs77 =     clhs12*clhs73 + clhs13 + clhs15*clhs74 + clhs72*clhs9;
    const double clhs78 =     clhs22*clhs76 + clhs29*clhs75 + clhs77*clhs8;
    const double clhs79 =     clhs39*clhs77 + clhs43*clhs76 + clhs46*clhs75;
    const double clhs80 =     DeltaN2[14][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
    const double clhs81 =     DeltaN2[14][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
    const double clhs82 =     DeltaN2[14][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
    const double clhs83 =     clhs30*clhs80 + clhs31*clhs81 + clhs32*clhs82;
    const double clhs84 =     clhs12*clhs81 + clhs15*clhs82 + clhs80*clhs9;
    const double clhs85 =     clhs13 + clhs23*clhs80 + clhs24*clhs81 + clhs25*clhs82;
    const double clhs86 =     clhs22*clhs85 + clhs29*clhs83 + clhs8*clhs84;
    const double clhs87 =     clhs39*clhs84 + clhs43*clhs85 + clhs46*clhs83;
    const double clhs88 =     DeltaN2[15][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
    const double clhs89 =     DeltaN2[15][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
    const double clhs90 =     DeltaN2[15][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
    const double clhs91 =     clhs12*clhs89 + clhs15*clhs90 + clhs88*clhs9;
    const double clhs92 =     clhs23*clhs88 + clhs24*clhs89 + clhs25*clhs90;
    const double clhs93 =     clhs16 + clhs30*clhs88 + clhs31*clhs89 + clhs32*clhs90;
    const double clhs94 =     clhs22*clhs92 + clhs29*clhs93 + clhs8*clhs91;
    const double clhs95 =     clhs39*clhs91 + clhs43*clhs92 + clhs46*clhs93;
    const double clhs96 =     DeltaN2[16][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
    const double clhs97 =     DeltaN2[16][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
    const double clhs98 =     DeltaN2[16][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
    const double clhs99 =     clhs30*clhs96 + clhs31*clhs97 + clhs32*clhs98;
    const double clhs100 =     clhs23*clhs96 + clhs24*clhs97 + clhs25*clhs98;
    const double clhs101 =     clhs12*clhs97 + clhs15*clhs98 + clhs16 + clhs9*clhs96;
    const double clhs102 =     clhs100*clhs22 + clhs101*clhs8 + clhs29*clhs99;
    const double clhs103 =     clhs100*clhs43 + clhs101*clhs39 + clhs46*clhs99;
    const double clhs104 =     DeltaN2[17][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
    const double clhs105 =     DeltaN2[17][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
    const double clhs106 =     DeltaN2[17][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
    const double clhs107 =     clhs104*clhs30 + clhs105*clhs31 + clhs106*clhs32;
    const double clhs108 =     clhs104*clhs9 + clhs105*clhs12 + clhs106*clhs15;
    const double clhs109 =     clhs104*clhs23 + clhs105*clhs24 + clhs106*clhs25 + clhs16;
    const double clhs110 =     clhs107*clhs29 + clhs108*clhs8 + clhs109*clhs22;
    const double clhs111 =     clhs107*clhs46 + clhs108*clhs39 + clhs109*clhs43;
    const double clhs112 =     Deltatangentxis[0](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs113 =     N1[0]*(Dt*v1(0,0)) + N1[1]*(Dt*v1(1,0)) + N1[2]*(Dt*v1(2,0)) - clhs10*clhs30 - clhs13*clhs31 - clhs16*clhs32;
    const double clhs114 =     N1[0]*(Dt*v1(0,1)) + N1[1]*(Dt*v1(1,1)) + N1[2]*(Dt*v1(2,1)) - clhs10*clhs9 - clhs12*clhs13 - clhs15*clhs16;
    const double clhs115 =     N1[0]*(Dt*v1(0,2)) + N1[1]*(Dt*v1(1,2)) + N1[2]*(Dt*v1(2,2)) - clhs10*clhs23 - clhs13*clhs24 - clhs16*clhs25;
    const double clhs116 =     clhs113*clhs29 + clhs114*clhs8 + clhs115*clhs22;
    const double clhs117 =     clhs1*clhs116*clhs2;
    const double clhs118 =     DeltaJs[0]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs119 =     clhs1*clhs116*clhs4;
    const double clhs120 =     DeltaPhi[0][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs121 =     clhs116*clhs2*clhs4;
    const double clhs122 =     Deltatangentetas[0](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs123 =     clhs113*clhs46 + clhs114*clhs39 + clhs115*clhs43;
    const double clhs124 =     clhs1*clhs123*clhs2;
    const double clhs125 =     clhs1*clhs123*clhs35;
    const double clhs126 =     clhs123*clhs2*clhs35;
    const double clhs127 =     DeltaN2[0][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
    const double clhs128 =     DeltaN2[0][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
    const double clhs129 =     DeltaN2[0][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
    const double clhs130 =     clhs12*clhs128 + clhs127*clhs9 + clhs129*clhs15;
    const double clhs131 =     clhs127*clhs23 + clhs128*clhs24 + clhs129*clhs25;
    const double clhs132 =     -N1[0];
    const double clhs133 =     clhs127*clhs30 + clhs128*clhs31 + clhs129*clhs32 + clhs132;
    const double clhs134 =     Deltatangentxis[0](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs135 =     Deltatangentxis[0](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs136 =     Deltatangentxis[0](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs137 =     Deltatangentxis[0](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs138 =     Deltatangentxis[0](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs139 =     Deltatangentxis[0](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs140 =     Deltatangentxis[0](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs141 =     Deltatangentxis[0](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs142 =     -clhs113*(N1[0]*clhs112 + N1[1]*clhs134 + N1[2]*clhs135) - clhs114*(N1[0]*clhs136 + N1[1]*clhs137 + N1[2]*clhs138) - clhs115*(N1[0]*clhs139 + N1[1]*clhs140 + N1[2]*clhs141) + clhs130*clhs8 + clhs131*clhs22 + clhs133*clhs29;
    const double clhs143 =     clhs1*clhs142*clhs2;
    const double clhs144 =     Deltatangentetas[0](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs145 =     Deltatangentetas[0](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs146 =     Deltatangentetas[0](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs147 =     Deltatangentetas[0](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs148 =     Deltatangentetas[0](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs149 =     Deltatangentetas[0](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs150 =     Deltatangentetas[0](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs151 =     Deltatangentetas[0](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs152 =     -clhs113*(N1[0]*clhs122 + N1[1]*clhs144 + N1[2]*clhs145) - clhs114*(N1[0]*clhs146 + N1[1]*clhs147 + N1[2]*clhs148) - clhs115*(N1[0]*clhs149 + N1[1]*clhs150 + N1[2]*clhs151) + clhs130*clhs39 + clhs131*clhs43 + clhs133*clhs46;
    const double clhs153 =     clhs1*clhs152*clhs2;
    const double clhs154 =     Deltatangentxis[1](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs155 =     DeltaJs[1]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs156 =     DeltaPhi[1][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs157 =     Deltatangentetas[1](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs158 =     DeltaN2[1][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
    const double clhs159 =     DeltaN2[1][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
    const double clhs160 =     DeltaN2[1][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
    const double clhs161 =     clhs158*clhs30 + clhs159*clhs31 + clhs160*clhs32;
    const double clhs162 =     clhs158*clhs23 + clhs159*clhs24 + clhs160*clhs25;
    const double clhs163 =     clhs12*clhs159 + clhs132 + clhs15*clhs160 + clhs158*clhs9;
    const double clhs164 =     Deltatangentxis[1](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs165 =     Deltatangentxis[1](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs166 =     Deltatangentxis[1](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs167 =     Deltatangentxis[1](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs168 =     Deltatangentxis[1](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs169 =     Deltatangentxis[1](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs170 =     Deltatangentxis[1](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs171 =     Deltatangentxis[1](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs172 =     -clhs113*(N1[0]*clhs154 + N1[1]*clhs164 + N1[2]*clhs165) - clhs114*(N1[0]*clhs166 + N1[1]*clhs167 + N1[2]*clhs168) - clhs115*(N1[0]*clhs169 + N1[1]*clhs170 + N1[2]*clhs171) + clhs161*clhs29 + clhs162*clhs22 + clhs163*clhs8;
    const double clhs173 =     clhs1*clhs172*clhs2;
    const double clhs174 =     Deltatangentetas[1](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs175 =     Deltatangentetas[1](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs176 =     Deltatangentetas[1](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs177 =     Deltatangentetas[1](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs178 =     Deltatangentetas[1](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs179 =     Deltatangentetas[1](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs180 =     Deltatangentetas[1](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs181 =     Deltatangentetas[1](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs182 =     -clhs113*(N1[0]*clhs157 + N1[1]*clhs174 + N1[2]*clhs175) - clhs114*(N1[0]*clhs176 + N1[1]*clhs177 + N1[2]*clhs178) - clhs115*(N1[0]*clhs179 + N1[1]*clhs180 + N1[2]*clhs181) + clhs161*clhs46 + clhs162*clhs43 + clhs163*clhs39;
    const double clhs183 =     clhs1*clhs182*clhs2;
    const double clhs184 =     Deltatangentxis[2](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs185 =     DeltaJs[2]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs186 =     DeltaPhi[2][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs187 =     Deltatangentetas[2](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs188 =     DeltaN2[2][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
    const double clhs189 =     DeltaN2[2][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
    const double clhs190 =     DeltaN2[2][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
    const double clhs191 =     clhs188*clhs30 + clhs189*clhs31 + clhs190*clhs32;
    const double clhs192 =     clhs12*clhs189 + clhs15*clhs190 + clhs188*clhs9;
    const double clhs193 =     clhs132 + clhs188*clhs23 + clhs189*clhs24 + clhs190*clhs25;
    const double clhs194 =     Deltatangentxis[2](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs195 =     Deltatangentxis[2](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs196 =     Deltatangentxis[2](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs197 =     Deltatangentxis[2](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs198 =     Deltatangentxis[2](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs199 =     Deltatangentxis[2](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs200 =     Deltatangentxis[2](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs201 =     Deltatangentxis[2](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs202 =     -clhs113*(N1[0]*clhs184 + N1[1]*clhs194 + N1[2]*clhs195) - clhs114*(N1[0]*clhs196 + N1[1]*clhs197 + N1[2]*clhs198) - clhs115*(N1[0]*clhs199 + N1[1]*clhs200 + N1[2]*clhs201) + clhs191*clhs29 + clhs192*clhs8 + clhs193*clhs22;
    const double clhs203 =     clhs1*clhs2*clhs202;
    const double clhs204 =     Deltatangentetas[2](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs205 =     Deltatangentetas[2](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs206 =     Deltatangentetas[2](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs207 =     Deltatangentetas[2](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs208 =     Deltatangentetas[2](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs209 =     Deltatangentetas[2](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs210 =     Deltatangentetas[2](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs211 =     Deltatangentetas[2](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs212 =     -clhs113*(N1[0]*clhs187 + N1[1]*clhs204 + N1[2]*clhs205) - clhs114*(N1[0]*clhs206 + N1[1]*clhs207 + N1[2]*clhs208) - clhs115*(N1[0]*clhs209 + N1[1]*clhs210 + N1[2]*clhs211) + clhs191*clhs46 + clhs192*clhs39 + clhs193*clhs43;
    const double clhs213 =     clhs1*clhs2*clhs212;
    const double clhs214 =     Deltatangentxis[3](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs215 =     DeltaJs[3]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs216 =     DeltaPhi[3][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs217 =     Deltatangentetas[3](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs218 =     DeltaN2[3][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
    const double clhs219 =     DeltaN2[3][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
    const double clhs220 =     DeltaN2[3][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
    const double clhs221 =     clhs12*clhs219 + clhs15*clhs220 + clhs218*clhs9;
    const double clhs222 =     clhs218*clhs23 + clhs219*clhs24 + clhs220*clhs25;
    const double clhs223 =     -N1[1];
    const double clhs224 =     clhs218*clhs30 + clhs219*clhs31 + clhs220*clhs32 + clhs223;
    const double clhs225 =     Deltatangentxis[3](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs226 =     Deltatangentxis[3](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs227 =     Deltatangentxis[3](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs228 =     Deltatangentxis[3](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs229 =     Deltatangentxis[3](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs230 =     Deltatangentxis[3](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs231 =     Deltatangentxis[3](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs232 =     Deltatangentxis[3](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs233 =     -clhs113*(N1[0]*clhs214 + N1[1]*clhs225 + N1[2]*clhs226) - clhs114*(N1[0]*clhs227 + N1[1]*clhs228 + N1[2]*clhs229) - clhs115*(N1[0]*clhs230 + N1[1]*clhs231 + N1[2]*clhs232) + clhs22*clhs222 + clhs221*clhs8 + clhs224*clhs29;
    const double clhs234 =     clhs1*clhs2*clhs233;
    const double clhs235 =     Deltatangentetas[3](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs236 =     Deltatangentetas[3](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs237 =     Deltatangentetas[3](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs238 =     Deltatangentetas[3](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs239 =     Deltatangentetas[3](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs240 =     Deltatangentetas[3](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs241 =     Deltatangentetas[3](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs242 =     Deltatangentetas[3](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs243 =     -clhs113*(N1[0]*clhs217 + N1[1]*clhs235 + N1[2]*clhs236) - clhs114*(N1[0]*clhs237 + N1[1]*clhs238 + N1[2]*clhs239) - clhs115*(N1[0]*clhs240 + N1[1]*clhs241 + N1[2]*clhs242) + clhs221*clhs39 + clhs222*clhs43 + clhs224*clhs46;
    const double clhs244 =     clhs1*clhs2*clhs243;
    const double clhs245 =     Deltatangentxis[4](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs246 =     DeltaJs[4]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs247 =     DeltaPhi[4][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs248 =     Deltatangentetas[4](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs249 =     DeltaN2[4][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
    const double clhs250 =     DeltaN2[4][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
    const double clhs251 =     DeltaN2[4][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
    const double clhs252 =     clhs249*clhs30 + clhs250*clhs31 + clhs251*clhs32;
    const double clhs253 =     clhs23*clhs249 + clhs24*clhs250 + clhs25*clhs251;
    const double clhs254 =     clhs12*clhs250 + clhs15*clhs251 + clhs223 + clhs249*clhs9;
    const double clhs255 =     Deltatangentxis[4](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs256 =     Deltatangentxis[4](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs257 =     Deltatangentxis[4](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs258 =     Deltatangentxis[4](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs259 =     Deltatangentxis[4](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs260 =     Deltatangentxis[4](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs261 =     Deltatangentxis[4](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs262 =     Deltatangentxis[4](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs263 =     -clhs113*(N1[0]*clhs245 + N1[1]*clhs255 + N1[2]*clhs256) - clhs114*(N1[0]*clhs257 + N1[1]*clhs258 + N1[2]*clhs259) - clhs115*(N1[0]*clhs260 + N1[1]*clhs261 + N1[2]*clhs262) + clhs22*clhs253 + clhs252*clhs29 + clhs254*clhs8;
    const double clhs264 =     clhs1*clhs2*clhs263;
    const double clhs265 =     Deltatangentetas[4](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs266 =     Deltatangentetas[4](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs267 =     Deltatangentetas[4](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs268 =     Deltatangentetas[4](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs269 =     Deltatangentetas[4](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs270 =     Deltatangentetas[4](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs271 =     Deltatangentetas[4](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs272 =     Deltatangentetas[4](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs273 =     -clhs113*(N1[0]*clhs248 + N1[1]*clhs265 + N1[2]*clhs266) - clhs114*(N1[0]*clhs267 + N1[1]*clhs268 + N1[2]*clhs269) - clhs115*(N1[0]*clhs270 + N1[1]*clhs271 + N1[2]*clhs272) + clhs252*clhs46 + clhs253*clhs43 + clhs254*clhs39;
    const double clhs274 =     clhs1*clhs2*clhs273;
    const double clhs275 =     Deltatangentxis[5](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs276 =     DeltaJs[5]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs277 =     DeltaPhi[5][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs278 =     Deltatangentetas[5](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs279 =     DeltaN2[5][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
    const double clhs280 =     DeltaN2[5][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
    const double clhs281 =     DeltaN2[5][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
    const double clhs282 =     clhs279*clhs30 + clhs280*clhs31 + clhs281*clhs32;
    const double clhs283 =     clhs12*clhs280 + clhs15*clhs281 + clhs279*clhs9;
    const double clhs284 =     clhs223 + clhs23*clhs279 + clhs24*clhs280 + clhs25*clhs281;
    const double clhs285 =     Deltatangentxis[5](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs286 =     Deltatangentxis[5](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs287 =     Deltatangentxis[5](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs288 =     Deltatangentxis[5](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs289 =     Deltatangentxis[5](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs290 =     Deltatangentxis[5](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs291 =     Deltatangentxis[5](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs292 =     Deltatangentxis[5](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs293 =     -clhs113*(N1[0]*clhs275 + N1[1]*clhs285 + N1[2]*clhs286) - clhs114*(N1[0]*clhs287 + N1[1]*clhs288 + N1[2]*clhs289) - clhs115*(N1[0]*clhs290 + N1[1]*clhs291 + N1[2]*clhs292) + clhs22*clhs284 + clhs282*clhs29 + clhs283*clhs8;
    const double clhs294 =     clhs1*clhs2*clhs293;
    const double clhs295 =     Deltatangentetas[5](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs296 =     Deltatangentetas[5](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs297 =     Deltatangentetas[5](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs298 =     Deltatangentetas[5](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs299 =     Deltatangentetas[5](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs300 =     Deltatangentetas[5](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs301 =     Deltatangentetas[5](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs302 =     Deltatangentetas[5](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs303 =     -clhs113*(N1[0]*clhs278 + N1[1]*clhs295 + N1[2]*clhs296) - clhs114*(N1[0]*clhs297 + N1[1]*clhs298 + N1[2]*clhs299) - clhs115*(N1[0]*clhs300 + N1[1]*clhs301 + N1[2]*clhs302) + clhs282*clhs46 + clhs283*clhs39 + clhs284*clhs43;
    const double clhs304 =     clhs1*clhs2*clhs303;
    const double clhs305 =     Deltatangentxis[6](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs306 =     DeltaJs[6]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs307 =     DeltaPhi[6][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs308 =     Deltatangentetas[6](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs309 =     DeltaN2[6][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
    const double clhs310 =     DeltaN2[6][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
    const double clhs311 =     DeltaN2[6][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
    const double clhs312 =     clhs12*clhs310 + clhs15*clhs311 + clhs309*clhs9;
    const double clhs313 =     clhs23*clhs309 + clhs24*clhs310 + clhs25*clhs311;
    const double clhs314 =     -N1[2];
    const double clhs315 =     clhs30*clhs309 + clhs31*clhs310 + clhs311*clhs32 + clhs314;
    const double clhs316 =     Deltatangentxis[6](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs317 =     Deltatangentxis[6](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs318 =     Deltatangentxis[6](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs319 =     Deltatangentxis[6](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs320 =     Deltatangentxis[6](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs321 =     Deltatangentxis[6](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs322 =     Deltatangentxis[6](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs323 =     Deltatangentxis[6](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs324 =     -clhs113*(N1[0]*clhs305 + N1[1]*clhs316 + N1[2]*clhs317) - clhs114*(N1[0]*clhs318 + N1[1]*clhs319 + N1[2]*clhs320) - clhs115*(N1[0]*clhs321 + N1[1]*clhs322 + N1[2]*clhs323) + clhs22*clhs313 + clhs29*clhs315 + clhs312*clhs8;
    const double clhs325 =     clhs1*clhs2*clhs324;
    const double clhs326 =     Deltatangentetas[6](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs327 =     Deltatangentetas[6](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs328 =     Deltatangentetas[6](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs329 =     Deltatangentetas[6](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs330 =     Deltatangentetas[6](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs331 =     Deltatangentetas[6](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs332 =     Deltatangentetas[6](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs333 =     Deltatangentetas[6](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs334 =     -clhs113*(N1[0]*clhs308 + N1[1]*clhs326 + N1[2]*clhs327) - clhs114*(N1[0]*clhs328 + N1[1]*clhs329 + N1[2]*clhs330) - clhs115*(N1[0]*clhs331 + N1[1]*clhs332 + N1[2]*clhs333) + clhs312*clhs39 + clhs313*clhs43 + clhs315*clhs46;
    const double clhs335 =     clhs1*clhs2*clhs334;
    const double clhs336 =     Deltatangentxis[7](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs337 =     DeltaJs[7]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs338 =     DeltaPhi[7][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs339 =     Deltatangentetas[7](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs340 =     DeltaN2[7][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
    const double clhs341 =     DeltaN2[7][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
    const double clhs342 =     DeltaN2[7][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
    const double clhs343 =     clhs30*clhs340 + clhs31*clhs341 + clhs32*clhs342;
    const double clhs344 =     clhs23*clhs340 + clhs24*clhs341 + clhs25*clhs342;
    const double clhs345 =     clhs12*clhs341 + clhs15*clhs342 + clhs314 + clhs340*clhs9;
    const double clhs346 =     Deltatangentxis[7](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs347 =     Deltatangentxis[7](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs348 =     Deltatangentxis[7](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs349 =     Deltatangentxis[7](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs350 =     Deltatangentxis[7](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs351 =     Deltatangentxis[7](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs352 =     Deltatangentxis[7](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs353 =     Deltatangentxis[7](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs354 =     -clhs113*(N1[0]*clhs336 + N1[1]*clhs346 + N1[2]*clhs347) - clhs114*(N1[0]*clhs348 + N1[1]*clhs349 + N1[2]*clhs350) - clhs115*(N1[0]*clhs351 + N1[1]*clhs352 + N1[2]*clhs353) + clhs22*clhs344 + clhs29*clhs343 + clhs345*clhs8;
    const double clhs355 =     clhs1*clhs2*clhs354;
    const double clhs356 =     Deltatangentetas[7](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs357 =     Deltatangentetas[7](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs358 =     Deltatangentetas[7](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs359 =     Deltatangentetas[7](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs360 =     Deltatangentetas[7](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs361 =     Deltatangentetas[7](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs362 =     Deltatangentetas[7](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs363 =     Deltatangentetas[7](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs364 =     -clhs113*(N1[0]*clhs339 + N1[1]*clhs356 + N1[2]*clhs357) - clhs114*(N1[0]*clhs358 + N1[1]*clhs359 + N1[2]*clhs360) - clhs115*(N1[0]*clhs361 + N1[1]*clhs362 + N1[2]*clhs363) + clhs343*clhs46 + clhs344*clhs43 + clhs345*clhs39;
    const double clhs365 =     clhs1*clhs2*clhs364;
    const double clhs366 =     Deltatangentxis[8](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs367 =     DeltaJs[8]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs368 =     DeltaPhi[8][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs369 =     Deltatangentetas[8](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs370 =     DeltaN2[8][0]; // DERIVATIVE(N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
    const double clhs371 =     DeltaN2[8][1]; // DERIVATIVE(N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
    const double clhs372 =     DeltaN2[8][2]; // DERIVATIVE(N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
    const double clhs373 =     clhs30*clhs370 + clhs31*clhs371 + clhs32*clhs372;
    const double clhs374 =     clhs12*clhs371 + clhs15*clhs372 + clhs370*clhs9;
    const double clhs375 =     clhs23*clhs370 + clhs24*clhs371 + clhs25*clhs372 + clhs314;
    const double clhs376 =     Deltatangentxis[8](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs377 =     Deltatangentxis[8](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs378 =     Deltatangentxis[8](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs379 =     Deltatangentxis[8](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs380 =     Deltatangentxis[8](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs381 =     Deltatangentxis[8](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs382 =     Deltatangentxis[8](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs383 =     Deltatangentxis[8](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs384 =     -clhs113*(N1[0]*clhs366 + N1[1]*clhs376 + N1[2]*clhs377) - clhs114*(N1[0]*clhs378 + N1[1]*clhs379 + N1[2]*clhs380) - clhs115*(N1[0]*clhs381 + N1[1]*clhs382 + N1[2]*clhs383) + clhs22*clhs375 + clhs29*clhs373 + clhs374*clhs8;
    const double clhs385 =     clhs1*clhs2*clhs384;
    const double clhs386 =     Deltatangentetas[8](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs387 =     Deltatangentetas[8](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs388 =     Deltatangentetas[8](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs389 =     Deltatangentetas[8](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs390 =     Deltatangentetas[8](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs391 =     Deltatangentetas[8](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs392 =     Deltatangentetas[8](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs393 =     Deltatangentetas[8](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs394 =     -clhs113*(N1[0]*clhs369 + N1[1]*clhs386 + N1[2]*clhs387) - clhs114*(N1[0]*clhs388 + N1[1]*clhs389 + N1[2]*clhs390) - clhs115*(N1[0]*clhs391 + N1[1]*clhs392 + N1[2]*clhs393) + clhs373*clhs46 + clhs374*clhs39 + clhs375*clhs43;
    const double clhs395 =     clhs1*clhs2*clhs394;
    const double clhs396 =     clhs1*clhs116*clhs5;
    const double clhs397 =     clhs116*clhs2*clhs5;
    const double clhs398 =     clhs1*clhs123*clhs36;
    const double clhs399 =     clhs123*clhs2*clhs36;
    const double clhs400 =     clhs1*clhs116*clhs19;
    const double clhs401 =     clhs116*clhs19*clhs2;
    const double clhs402 =     clhs1*clhs123*clhs40;
    const double clhs403 =     clhs123*clhs2*clhs40;
    const double clhs404 =     Phi[1]; // PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs405 =     clhs0*clhs2*clhs404;
    const double clhs406 =     clhs116*clhs2*clhs404;
    const double clhs407 =     clhs116*clhs27*clhs404;
    const double clhs408 =     DeltaPhi[0][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs409 =     clhs116*clhs2*clhs27;
    const double clhs410 =     clhs123*clhs2*clhs404;
    const double clhs411 =     clhs123*clhs404*clhs44;
    const double clhs412 =     clhs123*clhs2*clhs44;
    const double clhs413 =     clhs142*clhs2*clhs404;
    const double clhs414 =     clhs152*clhs2*clhs404;
    const double clhs415 =     DeltaPhi[1][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs416 =     clhs172*clhs2*clhs404;
    const double clhs417 =     clhs182*clhs2*clhs404;
    const double clhs418 =     DeltaPhi[2][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs419 =     clhs2*clhs202*clhs404;
    const double clhs420 =     clhs2*clhs212*clhs404;
    const double clhs421 =     DeltaPhi[3][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs422 =     clhs2*clhs233*clhs404;
    const double clhs423 =     clhs2*clhs243*clhs404;
    const double clhs424 =     DeltaPhi[4][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs425 =     clhs2*clhs263*clhs404;
    const double clhs426 =     clhs2*clhs273*clhs404;
    const double clhs427 =     DeltaPhi[5][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs428 =     clhs2*clhs293*clhs404;
    const double clhs429 =     clhs2*clhs303*clhs404;
    const double clhs430 =     DeltaPhi[6][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs431 =     clhs2*clhs324*clhs404;
    const double clhs432 =     clhs2*clhs334*clhs404;
    const double clhs433 =     DeltaPhi[7][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs434 =     clhs2*clhs354*clhs404;
    const double clhs435 =     clhs2*clhs364*clhs404;
    const double clhs436 =     DeltaPhi[8][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs437 =     clhs2*clhs384*clhs404;
    const double clhs438 =     clhs2*clhs394*clhs404;
    const double clhs439 =     clhs116*clhs404*clhs6;
    const double clhs440 =     clhs116*clhs2*clhs6;
    const double clhs441 =     clhs123*clhs37*clhs404;
    const double clhs442 =     clhs123*clhs2*clhs37;
    const double clhs443 =     clhs116*clhs20*clhs404;
    const double clhs444 =     clhs116*clhs2*clhs20;
    const double clhs445 =     clhs123*clhs404*clhs41;
    const double clhs446 =     clhs123*clhs2*clhs41;
    const double clhs447 =     Phi[2]; // PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double clhs448 =     clhs0*clhs2*clhs447;
    const double clhs449 =     clhs116*clhs2*clhs447;
    const double clhs450 =     clhs116*clhs28*clhs447;
    const double clhs451 =     DeltaPhi[0][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
    const double clhs452 =     clhs116*clhs2*clhs28;
    const double clhs453 =     clhs123*clhs2*clhs447;
    const double clhs454 =     clhs123*clhs447*clhs45;
    const double clhs455 =     clhs123*clhs2*clhs45;
    const double clhs456 =     clhs142*clhs2*clhs447;
    const double clhs457 =     clhs152*clhs2*clhs447;
    const double clhs458 =     DeltaPhi[1][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
    const double clhs459 =     clhs172*clhs2*clhs447;
    const double clhs460 =     clhs182*clhs2*clhs447;
    const double clhs461 =     DeltaPhi[2][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
    const double clhs462 =     clhs2*clhs202*clhs447;
    const double clhs463 =     clhs2*clhs212*clhs447;
    const double clhs464 =     DeltaPhi[3][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
    const double clhs465 =     clhs2*clhs233*clhs447;
    const double clhs466 =     clhs2*clhs243*clhs447;
    const double clhs467 =     DeltaPhi[4][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
    const double clhs468 =     clhs2*clhs263*clhs447;
    const double clhs469 =     clhs2*clhs273*clhs447;
    const double clhs470 =     DeltaPhi[5][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
    const double clhs471 =     clhs2*clhs293*clhs447;
    const double clhs472 =     clhs2*clhs303*clhs447;
    const double clhs473 =     DeltaPhi[6][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
    const double clhs474 =     clhs2*clhs324*clhs447;
    const double clhs475 =     clhs2*clhs334*clhs447;
    const double clhs476 =     DeltaPhi[7][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
    const double clhs477 =     clhs2*clhs354*clhs447;
    const double clhs478 =     clhs2*clhs364*clhs447;
    const double clhs479 =     DeltaPhi[8][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
    const double clhs480 =     clhs2*clhs384*clhs447;
    const double clhs481 =     clhs2*clhs394*clhs447;
    const double clhs482 =     clhs116*clhs447*clhs7;
    const double clhs483 =     clhs116*clhs2*clhs7;
    const double clhs484 =     clhs123*clhs38*clhs447;
    const double clhs485 =     clhs123*clhs2*clhs38;
    const double clhs486 =     clhs116*clhs21*clhs447;
    const double clhs487 =     clhs116*clhs2*clhs21;
    const double clhs488 =     clhs123*clhs42*clhs447;
    const double clhs489 =     clhs123*clhs2*clhs42;

    lhs(0,0)=0;
    lhs(0,1)=0;
    lhs(0,2)=0;
    lhs(0,3)=0;
    lhs(0,4)=0;
    lhs(0,5)=0;
    lhs(0,6)=0;
    lhs(0,7)=0;
    lhs(0,8)=0;
    lhs(0,9)=0;
    lhs(0,10)=0;
    lhs(0,11)=0;
    lhs(0,12)=0;
    lhs(0,13)=0;
    lhs(0,14)=0;
    lhs(0,15)=0;
    lhs(0,16)=0;
    lhs(0,17)=0;
    lhs(0,18)=0;
    lhs(0,19)=0;
    lhs(0,20)=0;
    lhs(0,21)=0;
    lhs(0,22)=0;
    lhs(0,23)=0;
    lhs(0,24)=0;
    lhs(0,25)=0;
    lhs(0,26)=0;
    lhs(1,0)=0;
    lhs(1,1)=0;
    lhs(1,2)=0;
    lhs(1,3)=0;
    lhs(1,4)=0;
    lhs(1,5)=0;
    lhs(1,6)=0;
    lhs(1,7)=0;
    lhs(1,8)=0;
    lhs(1,9)=0;
    lhs(1,10)=0;
    lhs(1,11)=0;
    lhs(1,12)=0;
    lhs(1,13)=0;
    lhs(1,14)=0;
    lhs(1,15)=0;
    lhs(1,16)=0;
    lhs(1,17)=0;
    lhs(1,18)=0;
    lhs(1,19)=0;
    lhs(1,20)=0;
    lhs(1,21)=0;
    lhs(1,22)=0;
    lhs(1,23)=0;
    lhs(1,24)=0;
    lhs(1,25)=0;
    lhs(1,26)=0;
    lhs(2,0)=0;
    lhs(2,1)=0;
    lhs(2,2)=0;
    lhs(2,3)=0;
    lhs(2,4)=0;
    lhs(2,5)=0;
    lhs(2,6)=0;
    lhs(2,7)=0;
    lhs(2,8)=0;
    lhs(2,9)=0;
    lhs(2,10)=0;
    lhs(2,11)=0;
    lhs(2,12)=0;
    lhs(2,13)=0;
    lhs(2,14)=0;
    lhs(2,15)=0;
    lhs(2,16)=0;
    lhs(2,17)=0;
    lhs(2,18)=0;
    lhs(2,19)=0;
    lhs(2,20)=0;
    lhs(2,21)=0;
    lhs(2,22)=0;
    lhs(2,23)=0;
    lhs(2,24)=0;
    lhs(2,25)=0;
    lhs(2,26)=0;
    lhs(3,0)=0;
    lhs(3,1)=0;
    lhs(3,2)=0;
    lhs(3,3)=0;
    lhs(3,4)=0;
    lhs(3,5)=0;
    lhs(3,6)=0;
    lhs(3,7)=0;
    lhs(3,8)=0;
    lhs(3,9)=0;
    lhs(3,10)=0;
    lhs(3,11)=0;
    lhs(3,12)=0;
    lhs(3,13)=0;
    lhs(3,14)=0;
    lhs(3,15)=0;
    lhs(3,16)=0;
    lhs(3,17)=0;
    lhs(3,18)=0;
    lhs(3,19)=0;
    lhs(3,20)=0;
    lhs(3,21)=0;
    lhs(3,22)=0;
    lhs(3,23)=0;
    lhs(3,24)=0;
    lhs(3,25)=0;
    lhs(3,26)=0;
    lhs(4,0)=0;
    lhs(4,1)=0;
    lhs(4,2)=0;
    lhs(4,3)=0;
    lhs(4,4)=0;
    lhs(4,5)=0;
    lhs(4,6)=0;
    lhs(4,7)=0;
    lhs(4,8)=0;
    lhs(4,9)=0;
    lhs(4,10)=0;
    lhs(4,11)=0;
    lhs(4,12)=0;
    lhs(4,13)=0;
    lhs(4,14)=0;
    lhs(4,15)=0;
    lhs(4,16)=0;
    lhs(4,17)=0;
    lhs(4,18)=0;
    lhs(4,19)=0;
    lhs(4,20)=0;
    lhs(4,21)=0;
    lhs(4,22)=0;
    lhs(4,23)=0;
    lhs(4,24)=0;
    lhs(4,25)=0;
    lhs(4,26)=0;
    lhs(5,0)=0;
    lhs(5,1)=0;
    lhs(5,2)=0;
    lhs(5,3)=0;
    lhs(5,4)=0;
    lhs(5,5)=0;
    lhs(5,6)=0;
    lhs(5,7)=0;
    lhs(5,8)=0;
    lhs(5,9)=0;
    lhs(5,10)=0;
    lhs(5,11)=0;
    lhs(5,12)=0;
    lhs(5,13)=0;
    lhs(5,14)=0;
    lhs(5,15)=0;
    lhs(5,16)=0;
    lhs(5,17)=0;
    lhs(5,18)=0;
    lhs(5,19)=0;
    lhs(5,20)=0;
    lhs(5,21)=0;
    lhs(5,22)=0;
    lhs(5,23)=0;
    lhs(5,24)=0;
    lhs(5,25)=0;
    lhs(5,26)=0;
    lhs(6,0)=0;
    lhs(6,1)=0;
    lhs(6,2)=0;
    lhs(6,3)=0;
    lhs(6,4)=0;
    lhs(6,5)=0;
    lhs(6,6)=0;
    lhs(6,7)=0;
    lhs(6,8)=0;
    lhs(6,9)=0;
    lhs(6,10)=0;
    lhs(6,11)=0;
    lhs(6,12)=0;
    lhs(6,13)=0;
    lhs(6,14)=0;
    lhs(6,15)=0;
    lhs(6,16)=0;
    lhs(6,17)=0;
    lhs(6,18)=0;
    lhs(6,19)=0;
    lhs(6,20)=0;
    lhs(6,21)=0;
    lhs(6,22)=0;
    lhs(6,23)=0;
    lhs(6,24)=0;
    lhs(6,25)=0;
    lhs(6,26)=0;
    lhs(7,0)=0;
    lhs(7,1)=0;
    lhs(7,2)=0;
    lhs(7,3)=0;
    lhs(7,4)=0;
    lhs(7,5)=0;
    lhs(7,6)=0;
    lhs(7,7)=0;
    lhs(7,8)=0;
    lhs(7,9)=0;
    lhs(7,10)=0;
    lhs(7,11)=0;
    lhs(7,12)=0;
    lhs(7,13)=0;
    lhs(7,14)=0;
    lhs(7,15)=0;
    lhs(7,16)=0;
    lhs(7,17)=0;
    lhs(7,18)=0;
    lhs(7,19)=0;
    lhs(7,20)=0;
    lhs(7,21)=0;
    lhs(7,22)=0;
    lhs(7,23)=0;
    lhs(7,24)=0;
    lhs(7,25)=0;
    lhs(7,26)=0;
    lhs(8,0)=0;
    lhs(8,1)=0;
    lhs(8,2)=0;
    lhs(8,3)=0;
    lhs(8,4)=0;
    lhs(8,5)=0;
    lhs(8,6)=0;
    lhs(8,7)=0;
    lhs(8,8)=0;
    lhs(8,9)=0;
    lhs(8,10)=0;
    lhs(8,11)=0;
    lhs(8,12)=0;
    lhs(8,13)=0;
    lhs(8,14)=0;
    lhs(8,15)=0;
    lhs(8,16)=0;
    lhs(8,17)=0;
    lhs(8,18)=0;
    lhs(8,19)=0;
    lhs(8,20)=0;
    lhs(8,21)=0;
    lhs(8,22)=0;
    lhs(8,23)=0;
    lhs(8,24)=0;
    lhs(8,25)=0;
    lhs(8,26)=0;
    lhs(9,0)=0;
    lhs(9,1)=0;
    lhs(9,2)=0;
    lhs(9,3)=0;
    lhs(9,4)=0;
    lhs(9,5)=0;
    lhs(9,6)=0;
    lhs(9,7)=0;
    lhs(9,8)=0;
    lhs(9,9)=0;
    lhs(9,10)=0;
    lhs(9,11)=0;
    lhs(9,12)=0;
    lhs(9,13)=0;
    lhs(9,14)=0;
    lhs(9,15)=0;
    lhs(9,16)=0;
    lhs(9,17)=0;
    lhs(9,18)=0;
    lhs(9,19)=0;
    lhs(9,20)=0;
    lhs(9,21)=0;
    lhs(9,22)=0;
    lhs(9,23)=0;
    lhs(9,24)=0;
    lhs(9,25)=0;
    lhs(9,26)=0;
    lhs(10,0)=0;
    lhs(10,1)=0;
    lhs(10,2)=0;
    lhs(10,3)=0;
    lhs(10,4)=0;
    lhs(10,5)=0;
    lhs(10,6)=0;
    lhs(10,7)=0;
    lhs(10,8)=0;
    lhs(10,9)=0;
    lhs(10,10)=0;
    lhs(10,11)=0;
    lhs(10,12)=0;
    lhs(10,13)=0;
    lhs(10,14)=0;
    lhs(10,15)=0;
    lhs(10,16)=0;
    lhs(10,17)=0;
    lhs(10,18)=0;
    lhs(10,19)=0;
    lhs(10,20)=0;
    lhs(10,21)=0;
    lhs(10,22)=0;
    lhs(10,23)=0;
    lhs(10,24)=0;
    lhs(10,25)=0;
    lhs(10,26)=0;
    lhs(11,0)=0;
    lhs(11,1)=0;
    lhs(11,2)=0;
    lhs(11,3)=0;
    lhs(11,4)=0;
    lhs(11,5)=0;
    lhs(11,6)=0;
    lhs(11,7)=0;
    lhs(11,8)=0;
    lhs(11,9)=0;
    lhs(11,10)=0;
    lhs(11,11)=0;
    lhs(11,12)=0;
    lhs(11,13)=0;
    lhs(11,14)=0;
    lhs(11,15)=0;
    lhs(11,16)=0;
    lhs(11,17)=0;
    lhs(11,18)=0;
    lhs(11,19)=0;
    lhs(11,20)=0;
    lhs(11,21)=0;
    lhs(11,22)=0;
    lhs(11,23)=0;
    lhs(11,24)=0;
    lhs(11,25)=0;
    lhs(11,26)=0;
    lhs(12,0)=0;
    lhs(12,1)=0;
    lhs(12,2)=0;
    lhs(12,3)=0;
    lhs(12,4)=0;
    lhs(12,5)=0;
    lhs(12,6)=0;
    lhs(12,7)=0;
    lhs(12,8)=0;
    lhs(12,9)=0;
    lhs(12,10)=0;
    lhs(12,11)=0;
    lhs(12,12)=0;
    lhs(12,13)=0;
    lhs(12,14)=0;
    lhs(12,15)=0;
    lhs(12,16)=0;
    lhs(12,17)=0;
    lhs(12,18)=0;
    lhs(12,19)=0;
    lhs(12,20)=0;
    lhs(12,21)=0;
    lhs(12,22)=0;
    lhs(12,23)=0;
    lhs(12,24)=0;
    lhs(12,25)=0;
    lhs(12,26)=0;
    lhs(13,0)=0;
    lhs(13,1)=0;
    lhs(13,2)=0;
    lhs(13,3)=0;
    lhs(13,4)=0;
    lhs(13,5)=0;
    lhs(13,6)=0;
    lhs(13,7)=0;
    lhs(13,8)=0;
    lhs(13,9)=0;
    lhs(13,10)=0;
    lhs(13,11)=0;
    lhs(13,12)=0;
    lhs(13,13)=0;
    lhs(13,14)=0;
    lhs(13,15)=0;
    lhs(13,16)=0;
    lhs(13,17)=0;
    lhs(13,18)=0;
    lhs(13,19)=0;
    lhs(13,20)=0;
    lhs(13,21)=0;
    lhs(13,22)=0;
    lhs(13,23)=0;
    lhs(13,24)=0;
    lhs(13,25)=0;
    lhs(13,26)=0;
    lhs(14,0)=0;
    lhs(14,1)=0;
    lhs(14,2)=0;
    lhs(14,3)=0;
    lhs(14,4)=0;
    lhs(14,5)=0;
    lhs(14,6)=0;
    lhs(14,7)=0;
    lhs(14,8)=0;
    lhs(14,9)=0;
    lhs(14,10)=0;
    lhs(14,11)=0;
    lhs(14,12)=0;
    lhs(14,13)=0;
    lhs(14,14)=0;
    lhs(14,15)=0;
    lhs(14,16)=0;
    lhs(14,17)=0;
    lhs(14,18)=0;
    lhs(14,19)=0;
    lhs(14,20)=0;
    lhs(14,21)=0;
    lhs(14,22)=0;
    lhs(14,23)=0;
    lhs(14,24)=0;
    lhs(14,25)=0;
    lhs(14,26)=0;
    lhs(15,0)=0;
    lhs(15,1)=0;
    lhs(15,2)=0;
    lhs(15,3)=0;
    lhs(15,4)=0;
    lhs(15,5)=0;
    lhs(15,6)=0;
    lhs(15,7)=0;
    lhs(15,8)=0;
    lhs(15,9)=0;
    lhs(15,10)=0;
    lhs(15,11)=0;
    lhs(15,12)=0;
    lhs(15,13)=0;
    lhs(15,14)=0;
    lhs(15,15)=0;
    lhs(15,16)=0;
    lhs(15,17)=0;
    lhs(15,18)=0;
    lhs(15,19)=0;
    lhs(15,20)=0;
    lhs(15,21)=0;
    lhs(15,22)=0;
    lhs(15,23)=0;
    lhs(15,24)=0;
    lhs(15,25)=0;
    lhs(15,26)=0;
    lhs(16,0)=0;
    lhs(16,1)=0;
    lhs(16,2)=0;
    lhs(16,3)=0;
    lhs(16,4)=0;
    lhs(16,5)=0;
    lhs(16,6)=0;
    lhs(16,7)=0;
    lhs(16,8)=0;
    lhs(16,9)=0;
    lhs(16,10)=0;
    lhs(16,11)=0;
    lhs(16,12)=0;
    lhs(16,13)=0;
    lhs(16,14)=0;
    lhs(16,15)=0;
    lhs(16,16)=0;
    lhs(16,17)=0;
    lhs(16,18)=0;
    lhs(16,19)=0;
    lhs(16,20)=0;
    lhs(16,21)=0;
    lhs(16,22)=0;
    lhs(16,23)=0;
    lhs(16,24)=0;
    lhs(16,25)=0;
    lhs(16,26)=0;
    lhs(17,0)=0;
    lhs(17,1)=0;
    lhs(17,2)=0;
    lhs(17,3)=0;
    lhs(17,4)=0;
    lhs(17,5)=0;
    lhs(17,6)=0;
    lhs(17,7)=0;
    lhs(17,8)=0;
    lhs(17,9)=0;
    lhs(17,10)=0;
    lhs(17,11)=0;
    lhs(17,12)=0;
    lhs(17,13)=0;
    lhs(17,14)=0;
    lhs(17,15)=0;
    lhs(17,16)=0;
    lhs(17,17)=0;
    lhs(17,18)=0;
    lhs(17,19)=0;
    lhs(17,20)=0;
    lhs(17,21)=0;
    lhs(17,22)=0;
    lhs(17,23)=0;
    lhs(17,24)=0;
    lhs(17,25)=0;
    lhs(17,26)=0;
    lhs(18,0)=-clhs3*(clhs34*clhs4 + clhs35*clhs47);
    lhs(18,1)=-clhs3*(clhs35*clhs55 + clhs4*clhs54);
    lhs(18,2)=-clhs3*(clhs35*clhs63 + clhs4*clhs62);
    lhs(18,3)=-clhs3*(clhs35*clhs71 + clhs4*clhs70);
    lhs(18,4)=-clhs3*(clhs35*clhs79 + clhs4*clhs78);
    lhs(18,5)=-clhs3*(clhs35*clhs87 + clhs4*clhs86);
    lhs(18,6)=-clhs3*(clhs35*clhs95 + clhs4*clhs94);
    lhs(18,7)=-clhs3*(clhs102*clhs4 + clhs103*clhs35);
    lhs(18,8)=-clhs3*(clhs110*clhs4 + clhs111*clhs35);
    lhs(18,9)=clhs0*(clhs112*clhs117 + clhs118*clhs119 + clhs118*clhs125 + clhs120*clhs121 + clhs120*clhs126 + clhs122*clhs124 - clhs143*clhs4 - clhs153*clhs35);
    lhs(18,10)=clhs0*(clhs117*clhs154 + clhs119*clhs155 + clhs121*clhs156 + clhs124*clhs157 + clhs125*clhs155 + clhs126*clhs156 - clhs173*clhs4 - clhs183*clhs35);
    lhs(18,11)=clhs0*(clhs117*clhs184 + clhs119*clhs185 + clhs121*clhs186 + clhs124*clhs187 + clhs125*clhs185 + clhs126*clhs186 - clhs203*clhs4 - clhs213*clhs35);
    lhs(18,12)=clhs0*(clhs117*clhs214 + clhs119*clhs215 + clhs121*clhs216 + clhs124*clhs217 + clhs125*clhs215 + clhs126*clhs216 - clhs234*clhs4 - clhs244*clhs35);
    lhs(18,13)=clhs0*(clhs117*clhs245 + clhs119*clhs246 + clhs121*clhs247 + clhs124*clhs248 + clhs125*clhs246 + clhs126*clhs247 - clhs264*clhs4 - clhs274*clhs35);
    lhs(18,14)=clhs0*(clhs117*clhs275 + clhs119*clhs276 + clhs121*clhs277 + clhs124*clhs278 + clhs125*clhs276 + clhs126*clhs277 - clhs294*clhs4 - clhs304*clhs35);
    lhs(18,15)=clhs0*(clhs117*clhs305 + clhs119*clhs306 + clhs121*clhs307 + clhs124*clhs308 + clhs125*clhs306 + clhs126*clhs307 - clhs325*clhs4 - clhs335*clhs35);
    lhs(18,16)=clhs0*(clhs117*clhs336 + clhs119*clhs337 + clhs121*clhs338 + clhs124*clhs339 + clhs125*clhs337 + clhs126*clhs338 - clhs35*clhs365 - clhs355*clhs4);
    lhs(18,17)=clhs0*(clhs117*clhs366 + clhs119*clhs367 + clhs121*clhs368 + clhs124*clhs369 + clhs125*clhs367 + clhs126*clhs368 - clhs35*clhs395 - clhs385*clhs4);
    lhs(18,18)=0;
    lhs(18,19)=0;
    lhs(18,20)=0;
    lhs(18,21)=0;
    lhs(18,22)=0;
    lhs(18,23)=0;
    lhs(18,24)=0;
    lhs(18,25)=0;
    lhs(18,26)=0;
    lhs(19,0)=-clhs3*(clhs34*clhs5 + clhs36*clhs47);
    lhs(19,1)=-clhs3*(clhs36*clhs55 + clhs5*clhs54);
    lhs(19,2)=-clhs3*(clhs36*clhs63 + clhs5*clhs62);
    lhs(19,3)=-clhs3*(clhs36*clhs71 + clhs5*clhs70);
    lhs(19,4)=-clhs3*(clhs36*clhs79 + clhs5*clhs78);
    lhs(19,5)=-clhs3*(clhs36*clhs87 + clhs5*clhs86);
    lhs(19,6)=-clhs3*(clhs36*clhs95 + clhs5*clhs94);
    lhs(19,7)=-clhs3*(clhs102*clhs5 + clhs103*clhs36);
    lhs(19,8)=-clhs3*(clhs110*clhs5 + clhs111*clhs36);
    lhs(19,9)=clhs0*(clhs117*clhs136 + clhs118*clhs396 + clhs118*clhs398 + clhs120*clhs397 + clhs120*clhs399 + clhs124*clhs146 - clhs143*clhs5 - clhs153*clhs36);
    lhs(19,10)=clhs0*(clhs117*clhs166 + clhs124*clhs176 + clhs155*clhs396 + clhs155*clhs398 + clhs156*clhs397 + clhs156*clhs399 - clhs173*clhs5 - clhs183*clhs36);
    lhs(19,11)=clhs0*(clhs117*clhs196 + clhs124*clhs206 + clhs185*clhs396 + clhs185*clhs398 + clhs186*clhs397 + clhs186*clhs399 - clhs203*clhs5 - clhs213*clhs36);
    lhs(19,12)=clhs0*(clhs117*clhs227 + clhs124*clhs237 + clhs215*clhs396 + clhs215*clhs398 + clhs216*clhs397 + clhs216*clhs399 - clhs234*clhs5 - clhs244*clhs36);
    lhs(19,13)=clhs0*(clhs117*clhs257 + clhs124*clhs267 + clhs246*clhs396 + clhs246*clhs398 + clhs247*clhs397 + clhs247*clhs399 - clhs264*clhs5 - clhs274*clhs36);
    lhs(19,14)=clhs0*(clhs117*clhs287 + clhs124*clhs297 + clhs276*clhs396 + clhs276*clhs398 + clhs277*clhs397 + clhs277*clhs399 - clhs294*clhs5 - clhs304*clhs36);
    lhs(19,15)=clhs0*(clhs117*clhs318 + clhs124*clhs328 + clhs306*clhs396 + clhs306*clhs398 + clhs307*clhs397 + clhs307*clhs399 - clhs325*clhs5 - clhs335*clhs36);
    lhs(19,16)=clhs0*(clhs117*clhs348 + clhs124*clhs358 + clhs337*clhs396 + clhs337*clhs398 + clhs338*clhs397 + clhs338*clhs399 - clhs355*clhs5 - clhs36*clhs365);
    lhs(19,17)=clhs0*(clhs117*clhs378 + clhs124*clhs388 - clhs36*clhs395 + clhs367*clhs396 + clhs367*clhs398 + clhs368*clhs397 + clhs368*clhs399 - clhs385*clhs5);
    lhs(19,18)=0;
    lhs(19,19)=0;
    lhs(19,20)=0;
    lhs(19,21)=0;
    lhs(19,22)=0;
    lhs(19,23)=0;
    lhs(19,24)=0;
    lhs(19,25)=0;
    lhs(19,26)=0;
    lhs(20,0)=-clhs3*(clhs19*clhs34 + clhs40*clhs47);
    lhs(20,1)=-clhs3*(clhs19*clhs54 + clhs40*clhs55);
    lhs(20,2)=-clhs3*(clhs19*clhs62 + clhs40*clhs63);
    lhs(20,3)=-clhs3*(clhs19*clhs70 + clhs40*clhs71);
    lhs(20,4)=-clhs3*(clhs19*clhs78 + clhs40*clhs79);
    lhs(20,5)=-clhs3*(clhs19*clhs86 + clhs40*clhs87);
    lhs(20,6)=-clhs3*(clhs19*clhs94 + clhs40*clhs95);
    lhs(20,7)=-clhs3*(clhs102*clhs19 + clhs103*clhs40);
    lhs(20,8)=-clhs3*(clhs110*clhs19 + clhs111*clhs40);
    lhs(20,9)=clhs0*(clhs117*clhs139 + clhs118*clhs400 + clhs118*clhs402 + clhs120*clhs401 + clhs120*clhs403 + clhs124*clhs149 - clhs143*clhs19 - clhs153*clhs40);
    lhs(20,10)=clhs0*(clhs117*clhs169 + clhs124*clhs179 + clhs155*clhs400 + clhs155*clhs402 + clhs156*clhs401 + clhs156*clhs403 - clhs173*clhs19 - clhs183*clhs40);
    lhs(20,11)=clhs0*(clhs117*clhs199 + clhs124*clhs209 + clhs185*clhs400 + clhs185*clhs402 + clhs186*clhs401 + clhs186*clhs403 - clhs19*clhs203 - clhs213*clhs40);
    lhs(20,12)=clhs0*(clhs117*clhs230 + clhs124*clhs240 - clhs19*clhs234 + clhs215*clhs400 + clhs215*clhs402 + clhs216*clhs401 + clhs216*clhs403 - clhs244*clhs40);
    lhs(20,13)=clhs0*(clhs117*clhs260 + clhs124*clhs270 - clhs19*clhs264 + clhs246*clhs400 + clhs246*clhs402 + clhs247*clhs401 + clhs247*clhs403 - clhs274*clhs40);
    lhs(20,14)=clhs0*(clhs117*clhs290 + clhs124*clhs300 - clhs19*clhs294 + clhs276*clhs400 + clhs276*clhs402 + clhs277*clhs401 + clhs277*clhs403 - clhs304*clhs40);
    lhs(20,15)=clhs0*(clhs117*clhs321 + clhs124*clhs331 - clhs19*clhs325 + clhs306*clhs400 + clhs306*clhs402 + clhs307*clhs401 + clhs307*clhs403 - clhs335*clhs40);
    lhs(20,16)=clhs0*(clhs117*clhs351 + clhs124*clhs361 - clhs19*clhs355 + clhs337*clhs400 + clhs337*clhs402 + clhs338*clhs401 + clhs338*clhs403 - clhs365*clhs40);
    lhs(20,17)=clhs0*(clhs117*clhs381 + clhs124*clhs391 - clhs19*clhs385 + clhs367*clhs400 + clhs367*clhs402 + clhs368*clhs401 + clhs368*clhs403 - clhs395*clhs40);
    lhs(20,18)=0;
    lhs(20,19)=0;
    lhs(20,20)=0;
    lhs(20,21)=0;
    lhs(20,22)=0;
    lhs(20,23)=0;
    lhs(20,24)=0;
    lhs(20,25)=0;
    lhs(20,26)=0;
    lhs(21,0)=-clhs405*(clhs27*clhs34 + clhs44*clhs47);
    lhs(21,1)=-clhs405*(clhs27*clhs54 + clhs44*clhs55);
    lhs(21,2)=-clhs405*(clhs27*clhs62 + clhs44*clhs63);
    lhs(21,3)=-clhs405*(clhs27*clhs70 + clhs44*clhs71);
    lhs(21,4)=-clhs405*(clhs27*clhs78 + clhs44*clhs79);
    lhs(21,5)=-clhs405*(clhs27*clhs86 + clhs44*clhs87);
    lhs(21,6)=-clhs405*(clhs27*clhs94 + clhs44*clhs95);
    lhs(21,7)=-clhs405*(clhs102*clhs27 + clhs103*clhs44);
    lhs(21,8)=-clhs405*(clhs110*clhs27 + clhs111*clhs44);
    lhs(21,9)=clhs0*(clhs118*clhs407 + clhs118*clhs411 + clhs134*clhs406 + clhs144*clhs410 - clhs27*clhs413 + clhs408*clhs409 + clhs408*clhs412 - clhs414*clhs44);
    lhs(21,10)=clhs0*(clhs155*clhs407 + clhs155*clhs411 + clhs164*clhs406 + clhs174*clhs410 - clhs27*clhs416 + clhs409*clhs415 + clhs412*clhs415 - clhs417*clhs44);
    lhs(21,11)=clhs0*(clhs185*clhs407 + clhs185*clhs411 + clhs194*clhs406 + clhs204*clhs410 - clhs27*clhs419 + clhs409*clhs418 + clhs412*clhs418 - clhs420*clhs44);
    lhs(21,12)=clhs0*(clhs215*clhs407 + clhs215*clhs411 + clhs225*clhs406 + clhs235*clhs410 - clhs27*clhs422 + clhs409*clhs421 + clhs412*clhs421 - clhs423*clhs44);
    lhs(21,13)=clhs0*(clhs246*clhs407 + clhs246*clhs411 + clhs255*clhs406 + clhs265*clhs410 - clhs27*clhs425 + clhs409*clhs424 + clhs412*clhs424 - clhs426*clhs44);
    lhs(21,14)=clhs0*(-clhs27*clhs428 + clhs276*clhs407 + clhs276*clhs411 + clhs285*clhs406 + clhs295*clhs410 + clhs409*clhs427 + clhs412*clhs427 - clhs429*clhs44);
    lhs(21,15)=clhs0*(-clhs27*clhs431 + clhs306*clhs407 + clhs306*clhs411 + clhs316*clhs406 + clhs326*clhs410 + clhs409*clhs430 + clhs412*clhs430 - clhs432*clhs44);
    lhs(21,16)=clhs0*(-clhs27*clhs434 + clhs337*clhs407 + clhs337*clhs411 + clhs346*clhs406 + clhs356*clhs410 + clhs409*clhs433 + clhs412*clhs433 - clhs435*clhs44);
    lhs(21,17)=clhs0*(-clhs27*clhs437 + clhs367*clhs407 + clhs367*clhs411 + clhs376*clhs406 + clhs386*clhs410 + clhs409*clhs436 + clhs412*clhs436 - clhs438*clhs44);
    lhs(21,18)=0;
    lhs(21,19)=0;
    lhs(21,20)=0;
    lhs(21,21)=0;
    lhs(21,22)=0;
    lhs(21,23)=0;
    lhs(21,24)=0;
    lhs(21,25)=0;
    lhs(21,26)=0;
    lhs(22,0)=-clhs405*(clhs34*clhs6 + clhs37*clhs47);
    lhs(22,1)=-clhs405*(clhs37*clhs55 + clhs54*clhs6);
    lhs(22,2)=-clhs405*(clhs37*clhs63 + clhs6*clhs62);
    lhs(22,3)=-clhs405*(clhs37*clhs71 + clhs6*clhs70);
    lhs(22,4)=-clhs405*(clhs37*clhs79 + clhs6*clhs78);
    lhs(22,5)=-clhs405*(clhs37*clhs87 + clhs6*clhs86);
    lhs(22,6)=-clhs405*(clhs37*clhs95 + clhs6*clhs94);
    lhs(22,7)=-clhs405*(clhs102*clhs6 + clhs103*clhs37);
    lhs(22,8)=-clhs405*(clhs110*clhs6 + clhs111*clhs37);
    lhs(22,9)=clhs0*(clhs118*clhs439 + clhs118*clhs441 + clhs137*clhs406 + clhs147*clhs410 - clhs37*clhs414 + clhs408*clhs440 + clhs408*clhs442 - clhs413*clhs6);
    lhs(22,10)=clhs0*(clhs155*clhs439 + clhs155*clhs441 + clhs167*clhs406 + clhs177*clhs410 - clhs37*clhs417 + clhs415*clhs440 + clhs415*clhs442 - clhs416*clhs6);
    lhs(22,11)=clhs0*(clhs185*clhs439 + clhs185*clhs441 + clhs197*clhs406 + clhs207*clhs410 - clhs37*clhs420 + clhs418*clhs440 + clhs418*clhs442 - clhs419*clhs6);
    lhs(22,12)=clhs0*(clhs215*clhs439 + clhs215*clhs441 + clhs228*clhs406 + clhs238*clhs410 - clhs37*clhs423 + clhs421*clhs440 + clhs421*clhs442 - clhs422*clhs6);
    lhs(22,13)=clhs0*(clhs246*clhs439 + clhs246*clhs441 + clhs258*clhs406 + clhs268*clhs410 - clhs37*clhs426 + clhs424*clhs440 + clhs424*clhs442 - clhs425*clhs6);
    lhs(22,14)=clhs0*(clhs276*clhs439 + clhs276*clhs441 + clhs288*clhs406 + clhs298*clhs410 - clhs37*clhs429 + clhs427*clhs440 + clhs427*clhs442 - clhs428*clhs6);
    lhs(22,15)=clhs0*(clhs306*clhs439 + clhs306*clhs441 + clhs319*clhs406 + clhs329*clhs410 - clhs37*clhs432 + clhs430*clhs440 + clhs430*clhs442 - clhs431*clhs6);
    lhs(22,16)=clhs0*(clhs337*clhs439 + clhs337*clhs441 + clhs349*clhs406 + clhs359*clhs410 - clhs37*clhs435 + clhs433*clhs440 + clhs433*clhs442 - clhs434*clhs6);
    lhs(22,17)=clhs0*(clhs367*clhs439 + clhs367*clhs441 - clhs37*clhs438 + clhs379*clhs406 + clhs389*clhs410 + clhs436*clhs440 + clhs436*clhs442 - clhs437*clhs6);
    lhs(22,18)=0;
    lhs(22,19)=0;
    lhs(22,20)=0;
    lhs(22,21)=0;
    lhs(22,22)=0;
    lhs(22,23)=0;
    lhs(22,24)=0;
    lhs(22,25)=0;
    lhs(22,26)=0;
    lhs(23,0)=-clhs405*(clhs20*clhs34 + clhs41*clhs47);
    lhs(23,1)=-clhs405*(clhs20*clhs54 + clhs41*clhs55);
    lhs(23,2)=-clhs405*(clhs20*clhs62 + clhs41*clhs63);
    lhs(23,3)=-clhs405*(clhs20*clhs70 + clhs41*clhs71);
    lhs(23,4)=-clhs405*(clhs20*clhs78 + clhs41*clhs79);
    lhs(23,5)=-clhs405*(clhs20*clhs86 + clhs41*clhs87);
    lhs(23,6)=-clhs405*(clhs20*clhs94 + clhs41*clhs95);
    lhs(23,7)=-clhs405*(clhs102*clhs20 + clhs103*clhs41);
    lhs(23,8)=-clhs405*(clhs110*clhs20 + clhs111*clhs41);
    lhs(23,9)=clhs0*(clhs118*clhs443 + clhs118*clhs445 + clhs140*clhs406 + clhs150*clhs410 - clhs20*clhs413 + clhs408*clhs444 + clhs408*clhs446 - clhs41*clhs414);
    lhs(23,10)=clhs0*(clhs155*clhs443 + clhs155*clhs445 + clhs170*clhs406 + clhs180*clhs410 - clhs20*clhs416 - clhs41*clhs417 + clhs415*clhs444 + clhs415*clhs446);
    lhs(23,11)=clhs0*(clhs185*clhs443 + clhs185*clhs445 - clhs20*clhs419 + clhs200*clhs406 + clhs210*clhs410 - clhs41*clhs420 + clhs418*clhs444 + clhs418*clhs446);
    lhs(23,12)=clhs0*(-clhs20*clhs422 + clhs215*clhs443 + clhs215*clhs445 + clhs231*clhs406 + clhs241*clhs410 - clhs41*clhs423 + clhs421*clhs444 + clhs421*clhs446);
    lhs(23,13)=clhs0*(-clhs20*clhs425 + clhs246*clhs443 + clhs246*clhs445 + clhs261*clhs406 + clhs271*clhs410 - clhs41*clhs426 + clhs424*clhs444 + clhs424*clhs446);
    lhs(23,14)=clhs0*(-clhs20*clhs428 + clhs276*clhs443 + clhs276*clhs445 + clhs291*clhs406 + clhs301*clhs410 - clhs41*clhs429 + clhs427*clhs444 + clhs427*clhs446);
    lhs(23,15)=clhs0*(-clhs20*clhs431 + clhs306*clhs443 + clhs306*clhs445 + clhs322*clhs406 + clhs332*clhs410 - clhs41*clhs432 + clhs430*clhs444 + clhs430*clhs446);
    lhs(23,16)=clhs0*(-clhs20*clhs434 + clhs337*clhs443 + clhs337*clhs445 + clhs352*clhs406 + clhs362*clhs410 - clhs41*clhs435 + clhs433*clhs444 + clhs433*clhs446);
    lhs(23,17)=clhs0*(-clhs20*clhs437 + clhs367*clhs443 + clhs367*clhs445 + clhs382*clhs406 + clhs392*clhs410 - clhs41*clhs438 + clhs436*clhs444 + clhs436*clhs446);
    lhs(23,18)=0;
    lhs(23,19)=0;
    lhs(23,20)=0;
    lhs(23,21)=0;
    lhs(23,22)=0;
    lhs(23,23)=0;
    lhs(23,24)=0;
    lhs(23,25)=0;
    lhs(23,26)=0;
    lhs(24,0)=-clhs448*(clhs28*clhs34 + clhs45*clhs47);
    lhs(24,1)=-clhs448*(clhs28*clhs54 + clhs45*clhs55);
    lhs(24,2)=-clhs448*(clhs28*clhs62 + clhs45*clhs63);
    lhs(24,3)=-clhs448*(clhs28*clhs70 + clhs45*clhs71);
    lhs(24,4)=-clhs448*(clhs28*clhs78 + clhs45*clhs79);
    lhs(24,5)=-clhs448*(clhs28*clhs86 + clhs45*clhs87);
    lhs(24,6)=-clhs448*(clhs28*clhs94 + clhs45*clhs95);
    lhs(24,7)=-clhs448*(clhs102*clhs28 + clhs103*clhs45);
    lhs(24,8)=-clhs448*(clhs110*clhs28 + clhs111*clhs45);
    lhs(24,9)=clhs0*(clhs118*clhs450 + clhs118*clhs454 + clhs135*clhs449 + clhs145*clhs453 - clhs28*clhs456 - clhs45*clhs457 + clhs451*clhs452 + clhs451*clhs455);
    lhs(24,10)=clhs0*(clhs155*clhs450 + clhs155*clhs454 + clhs165*clhs449 + clhs175*clhs453 - clhs28*clhs459 - clhs45*clhs460 + clhs452*clhs458 + clhs455*clhs458);
    lhs(24,11)=clhs0*(clhs185*clhs450 + clhs185*clhs454 + clhs195*clhs449 + clhs205*clhs453 - clhs28*clhs462 - clhs45*clhs463 + clhs452*clhs461 + clhs455*clhs461);
    lhs(24,12)=clhs0*(clhs215*clhs450 + clhs215*clhs454 + clhs226*clhs449 + clhs236*clhs453 - clhs28*clhs465 - clhs45*clhs466 + clhs452*clhs464 + clhs455*clhs464);
    lhs(24,13)=clhs0*(clhs246*clhs450 + clhs246*clhs454 + clhs256*clhs449 + clhs266*clhs453 - clhs28*clhs468 - clhs45*clhs469 + clhs452*clhs467 + clhs455*clhs467);
    lhs(24,14)=clhs0*(clhs276*clhs450 + clhs276*clhs454 - clhs28*clhs471 + clhs286*clhs449 + clhs296*clhs453 - clhs45*clhs472 + clhs452*clhs470 + clhs455*clhs470);
    lhs(24,15)=clhs0*(-clhs28*clhs474 + clhs306*clhs450 + clhs306*clhs454 + clhs317*clhs449 + clhs327*clhs453 - clhs45*clhs475 + clhs452*clhs473 + clhs455*clhs473);
    lhs(24,16)=clhs0*(-clhs28*clhs477 + clhs337*clhs450 + clhs337*clhs454 + clhs347*clhs449 + clhs357*clhs453 - clhs45*clhs478 + clhs452*clhs476 + clhs455*clhs476);
    lhs(24,17)=clhs0*(-clhs28*clhs480 + clhs367*clhs450 + clhs367*clhs454 + clhs377*clhs449 + clhs387*clhs453 - clhs45*clhs481 + clhs452*clhs479 + clhs455*clhs479);
    lhs(24,18)=0;
    lhs(24,19)=0;
    lhs(24,20)=0;
    lhs(24,21)=0;
    lhs(24,22)=0;
    lhs(24,23)=0;
    lhs(24,24)=0;
    lhs(24,25)=0;
    lhs(24,26)=0;
    lhs(25,0)=-clhs448*(clhs34*clhs7 + clhs38*clhs47);
    lhs(25,1)=-clhs448*(clhs38*clhs55 + clhs54*clhs7);
    lhs(25,2)=-clhs448*(clhs38*clhs63 + clhs62*clhs7);
    lhs(25,3)=-clhs448*(clhs38*clhs71 + clhs7*clhs70);
    lhs(25,4)=-clhs448*(clhs38*clhs79 + clhs7*clhs78);
    lhs(25,5)=-clhs448*(clhs38*clhs87 + clhs7*clhs86);
    lhs(25,6)=-clhs448*(clhs38*clhs95 + clhs7*clhs94);
    lhs(25,7)=-clhs448*(clhs102*clhs7 + clhs103*clhs38);
    lhs(25,8)=-clhs448*(clhs110*clhs7 + clhs111*clhs38);
    lhs(25,9)=clhs0*(clhs118*clhs482 + clhs118*clhs484 + clhs138*clhs449 + clhs148*clhs453 - clhs38*clhs457 + clhs451*clhs483 + clhs451*clhs485 - clhs456*clhs7);
    lhs(25,10)=clhs0*(clhs155*clhs482 + clhs155*clhs484 + clhs168*clhs449 + clhs178*clhs453 - clhs38*clhs460 + clhs458*clhs483 + clhs458*clhs485 - clhs459*clhs7);
    lhs(25,11)=clhs0*(clhs185*clhs482 + clhs185*clhs484 + clhs198*clhs449 + clhs208*clhs453 - clhs38*clhs463 + clhs461*clhs483 + clhs461*clhs485 - clhs462*clhs7);
    lhs(25,12)=clhs0*(clhs215*clhs482 + clhs215*clhs484 + clhs229*clhs449 + clhs239*clhs453 - clhs38*clhs466 + clhs464*clhs483 + clhs464*clhs485 - clhs465*clhs7);
    lhs(25,13)=clhs0*(clhs246*clhs482 + clhs246*clhs484 + clhs259*clhs449 + clhs269*clhs453 - clhs38*clhs469 + clhs467*clhs483 + clhs467*clhs485 - clhs468*clhs7);
    lhs(25,14)=clhs0*(clhs276*clhs482 + clhs276*clhs484 + clhs289*clhs449 + clhs299*clhs453 - clhs38*clhs472 + clhs470*clhs483 + clhs470*clhs485 - clhs471*clhs7);
    lhs(25,15)=clhs0*(clhs306*clhs482 + clhs306*clhs484 + clhs320*clhs449 + clhs330*clhs453 - clhs38*clhs475 + clhs473*clhs483 + clhs473*clhs485 - clhs474*clhs7);
    lhs(25,16)=clhs0*(clhs337*clhs482 + clhs337*clhs484 + clhs350*clhs449 + clhs360*clhs453 - clhs38*clhs478 + clhs476*clhs483 + clhs476*clhs485 - clhs477*clhs7);
    lhs(25,17)=clhs0*(clhs367*clhs482 + clhs367*clhs484 - clhs38*clhs481 + clhs380*clhs449 + clhs390*clhs453 + clhs479*clhs483 + clhs479*clhs485 - clhs480*clhs7);
    lhs(25,18)=0;
    lhs(25,19)=0;
    lhs(25,20)=0;
    lhs(25,21)=0;
    lhs(25,22)=0;
    lhs(25,23)=0;
    lhs(25,24)=0;
    lhs(25,25)=0;
    lhs(25,26)=0;
    lhs(26,0)=-clhs448*(clhs21*clhs34 + clhs42*clhs47);
    lhs(26,1)=-clhs448*(clhs21*clhs54 + clhs42*clhs55);
    lhs(26,2)=-clhs448*(clhs21*clhs62 + clhs42*clhs63);
    lhs(26,3)=-clhs448*(clhs21*clhs70 + clhs42*clhs71);
    lhs(26,4)=-clhs448*(clhs21*clhs78 + clhs42*clhs79);
    lhs(26,5)=-clhs448*(clhs21*clhs86 + clhs42*clhs87);
    lhs(26,6)=-clhs448*(clhs21*clhs94 + clhs42*clhs95);
    lhs(26,7)=-clhs448*(clhs102*clhs21 + clhs103*clhs42);
    lhs(26,8)=-clhs448*(clhs110*clhs21 + clhs111*clhs42);
    lhs(26,9)=clhs0*(clhs118*clhs486 + clhs118*clhs488 + clhs141*clhs449 + clhs151*clhs453 - clhs21*clhs456 - clhs42*clhs457 + clhs451*clhs487 + clhs451*clhs489);
    lhs(26,10)=clhs0*(clhs155*clhs486 + clhs155*clhs488 + clhs171*clhs449 + clhs181*clhs453 - clhs21*clhs459 - clhs42*clhs460 + clhs458*clhs487 + clhs458*clhs489);
    lhs(26,11)=clhs0*(clhs185*clhs486 + clhs185*clhs488 + clhs201*clhs449 - clhs21*clhs462 + clhs211*clhs453 - clhs42*clhs463 + clhs461*clhs487 + clhs461*clhs489);
    lhs(26,12)=clhs0*(-clhs21*clhs465 + clhs215*clhs486 + clhs215*clhs488 + clhs232*clhs449 + clhs242*clhs453 - clhs42*clhs466 + clhs464*clhs487 + clhs464*clhs489);
    lhs(26,13)=clhs0*(-clhs21*clhs468 + clhs246*clhs486 + clhs246*clhs488 + clhs262*clhs449 + clhs272*clhs453 - clhs42*clhs469 + clhs467*clhs487 + clhs467*clhs489);
    lhs(26,14)=clhs0*(-clhs21*clhs471 + clhs276*clhs486 + clhs276*clhs488 + clhs292*clhs449 + clhs302*clhs453 - clhs42*clhs472 + clhs470*clhs487 + clhs470*clhs489);
    lhs(26,15)=clhs0*(-clhs21*clhs474 + clhs306*clhs486 + clhs306*clhs488 + clhs323*clhs449 + clhs333*clhs453 - clhs42*clhs475 + clhs473*clhs487 + clhs473*clhs489);
    lhs(26,16)=clhs0*(-clhs21*clhs477 + clhs337*clhs486 + clhs337*clhs488 + clhs353*clhs449 + clhs363*clhs453 - clhs42*clhs478 + clhs476*clhs487 + clhs476*clhs489);
    lhs(26,17)=clhs0*(-clhs21*clhs480 + clhs367*clhs486 + clhs367*clhs488 + clhs383*clhs449 + clhs393*clhs453 - clhs42*clhs481 + clhs479*clhs487 + clhs479*clhs489);
    lhs(26,18)=0;
    lhs(26,19)=0;
    lhs(26,20)=0;
    lhs(26,21)=0;
    lhs(26,22)=0;
    lhs(26,23)=0;
    lhs(26,24)=0;
    lhs(26,25)=0;
    lhs(26,26)=0;

    
    return lhs;
}

    /***********************************************************************************/
    /***********************************************************************************/
    
    static inline array_1d<double,27> ComputeGaussPointActiveRHS(
        const array_1d<double,3> N1, 
        const array_1d<double,3> N2, 
        const array_1d<double,3> Phi, 
        const double detJ, 
        const ContactData<3,3>& rContactData
        )
{
    array_1d<double,27> rhs;
    
    const double integration_point_gap = inner_prod(rContactData.Gaps,N1);
    const bounded_matrix<double, 3,3> normalslave = rContactData.Normal_s;
    const bounded_matrix<double, 3,3> tan1slave   = rContactData.Tangent_xi_s;
    const bounded_matrix<double, 3,3> tan2slave   = rContactData.Tangent_eta_s;
    const bounded_matrix<double, 3,3> lm          = rContactData.LagrangeMultipliers;
    
    const double crhs0 =     N2[0]; // N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double crhs1 =     detJ; // DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs2 =     Phi[0]; // PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs3 =     Phi[1]; // PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs4 =     Phi[2]; // PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs5 =     crhs2*lm(0,0) + crhs3*lm(1,0) + crhs4*lm(2,0);
    const double crhs6 =     crhs1*crhs5;
    const double crhs7 =     crhs2*lm(0,1) + crhs3*lm(1,1) + crhs4*lm(2,1);
    const double crhs8 =     crhs1*crhs7;
    const double crhs9 =     crhs2*lm(0,2) + crhs3*lm(1,2) + crhs4*lm(2,2);
    const double crhs10 =     crhs1*crhs9;
    const double crhs11 =     N2[1]; // N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double crhs12 =     N2[2]; // N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double crhs13 =     N1[0]*crhs1;
    const double crhs14 =     N1[1]*crhs1;
    const double crhs15 =     N1[2]*crhs1;
    const double crhs16 =     integration_point_gap; // GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double crhs17 =     crhs1*crhs16*crhs2;
    const double crhs18 =     crhs1*crhs16*crhs3;
    const double crhs19 =     crhs1*crhs16*crhs4;

    rhs[0]=-crhs0*crhs6;
    rhs[1]=-crhs0*crhs8;
    rhs[2]=-crhs0*crhs10;
    rhs[3]=-crhs11*crhs6;
    rhs[4]=-crhs11*crhs8;
    rhs[5]=-crhs10*crhs11;
    rhs[6]=-crhs12*crhs6;
    rhs[7]=-crhs12*crhs8;
    rhs[8]=-crhs10*crhs12;
    rhs[9]=crhs13*crhs5;
    rhs[10]=crhs13*crhs7;
    rhs[11]=crhs13*crhs9;
    rhs[12]=crhs14*crhs5;
    rhs[13]=crhs14*crhs7;
    rhs[14]=crhs14*crhs9;
    rhs[15]=crhs15*crhs5;
    rhs[16]=crhs15*crhs7;
    rhs[17]=crhs15*crhs9;
    rhs[18]=crhs17*normalslave(0,0);
    rhs[19]=crhs17*normalslave(0,1);
    rhs[20]=crhs17*normalslave(0,2);
    rhs[21]=crhs18*normalslave(1,0);
    rhs[22]=crhs18*normalslave(1,1);
    rhs[23]=crhs18*normalslave(1,2);
    rhs[24]=crhs19*normalslave(2,0);
    rhs[25]=crhs19*normalslave(2,1);
    rhs[26]=crhs19*normalslave(2,2);

    
    return rhs;
}

    /***********************************************************************************/
    /***********************************************************************************/
    
    static inline array_1d<double,27> ComputeGaussPointStickRHS(
        const array_1d<double,3> N1, 
        const array_1d<double,3> N2, 
        const array_1d<double,3> Phi, 
        const double detJ, 
        const double mu, 
        const ContactData<3,3>& rContactData
        )
{
    array_1d<double,27> rhs;
    
    const bounded_matrix<double, 3,3> normalslave = rContactData.Normal_s;
    const bounded_matrix<double, 3,3> tan1slave   = rContactData.Tangent_xi_s;
    const bounded_matrix<double, 3,3> tan2slave   = rContactData.Tangent_eta_s;
//     const bounded_matrix<double, 3,3> lm          = rContactData.LagrangeMultipliers;
    const double Dt              = rContactData.Dt;
    
    const bounded_matrix<double, 3,3> v1 = rContactData.v1;
    const bounded_matrix<double, 3,3> v2 = rContactData.v2;
    
    const double crhs0 =     1.0/Dt;
    const double crhs1 =     detJ; // DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs2 =     crhs0*crhs1*Phi[0]; // CRHS0*CRHS1*PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs3 =     tan1slave(0,0); // TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs4 =     tan1slave(1,0); // TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs5 =     tan1slave(2,0); // TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs6 =     N2[0]; // N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double crhs7 =     N2[1]; // N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double crhs8 =     N2[2]; // N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double crhs9 =     N1[0]*(Dt*v1(0,0)) + N1[1]*(Dt*v1(1,0)) + N1[2]*(Dt*v1(2,0)) - crhs6*(Dt*v2(0,0)) - crhs7*(Dt*v2(1,0)) - crhs8*(Dt*v2(2,0));
    const double crhs10 =     tan1slave(0,1); // TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs11 =     tan1slave(1,1); // TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs12 =     tan1slave(2,1); // TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs13 =     N1[0]*(Dt*v1(0,1)) + N1[1]*(Dt*v1(1,1)) + N1[2]*(Dt*v1(2,1)) - crhs6*(Dt*v2(0,1)) - crhs7*(Dt*v2(1,1)) - crhs8*(Dt*v2(2,1));
    const double crhs14 =     tan1slave(0,2); // TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs15 =     tan1slave(1,2); // TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs16 =     tan1slave(2,2); // TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs17 =     N1[0]*(Dt*v1(0,2)) + N1[1]*(Dt*v1(1,2)) + N1[2]*(Dt*v1(2,2)) - crhs6*(Dt*v2(0,2)) - crhs7*(Dt*v2(1,2)) - crhs8*(Dt*v2(2,2));
    const double crhs18 =     crhs13*(N1[0]*crhs10 + N1[1]*crhs11 + N1[2]*crhs12) + crhs17*(N1[0]*crhs14 + N1[1]*crhs15 + N1[2]*crhs16) + crhs9*(N1[0]*crhs3 + N1[1]*crhs4 + N1[2]*crhs5);
    const double crhs19 =     tan2slave(0,0); // TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs20 =     tan2slave(1,0); // TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs21 =     tan2slave(2,0); // TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs22 =     tan2slave(0,1); // TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs23 =     tan2slave(1,1); // TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs24 =     tan2slave(2,1); // TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs25 =     tan2slave(0,2); // TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs26 =     tan2slave(1,2); // TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs27 =     tan2slave(2,2); // TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs28 =     crhs13*(N1[0]*crhs22 + N1[1]*crhs23 + N1[2]*crhs24) + crhs17*(N1[0]*crhs25 + N1[1]*crhs26 + N1[2]*crhs27) + crhs9*(N1[0]*crhs19 + N1[1]*crhs20 + N1[2]*crhs21);
    const double crhs29 =     crhs0*crhs1*Phi[1]; // CRHS0*CRHS1*PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs30 =     crhs0*crhs1*Phi[2]; // CRHS0*CRHS1*PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))

    rhs[0]=0;
    rhs[1]=0;
    rhs[2]=0;
    rhs[3]=0;
    rhs[4]=0;
    rhs[5]=0;
    rhs[6]=0;
    rhs[7]=0;
    rhs[8]=0;
    rhs[9]=0;
    rhs[10]=0;
    rhs[11]=0;
    rhs[12]=0;
    rhs[13]=0;
    rhs[14]=0;
    rhs[15]=0;
    rhs[16]=0;
    rhs[17]=0;
    rhs[18]=-crhs2*(crhs18*crhs3 + crhs19*crhs28);
    rhs[19]=-crhs2*(crhs10*crhs18 + crhs22*crhs28);
    rhs[20]=-crhs2*(crhs14*crhs18 + crhs25*crhs28);
    rhs[21]=-crhs29*(crhs18*crhs4 + crhs20*crhs28);
    rhs[22]=-crhs29*(crhs11*crhs18 + crhs23*crhs28);
    rhs[23]=-crhs29*(crhs15*crhs18 + crhs26*crhs28);
    rhs[24]=-crhs30*(crhs18*crhs5 + crhs21*crhs28);
    rhs[25]=-crhs30*(crhs12*crhs18 + crhs24*crhs28);
    rhs[26]=-crhs30*(crhs16*crhs18 + crhs27*crhs28);

    
    return rhs;
}

    /***********************************************************************************/
    /***********************************************************************************/
    
    static inline array_1d<double,27> ComputeGaussPointSlipRHS(
        const array_1d<double,3> N1, 
        const array_1d<double,3> N2, 
        const array_1d<double,3> Phi, 
        const double detJ, 
        const double mu, 
        const ContactData<3,3>& rContactData
        )
{
    array_1d<double,27> rhs;
    
    const bounded_matrix<double, 3,3> normalslave = rContactData.Normal_s;
    const bounded_matrix<double, 3,3> tan1slave   = rContactData.Tangent_xi_s;
    const bounded_matrix<double, 3,3> tan2slave   = rContactData.Tangent_eta_s;
//     const bounded_matrix<double, 3,3> lm          = rContactData.LagrangeMultipliers;
    const double Dt              = rContactData.Dt;
    
//     const double sign_tangpress = boost::math::sign(augmented_tangent_lm);
    
    const bounded_matrix<double, 3,3> v1 = rContactData.v1;
    const bounded_matrix<double, 3,3> v2 = rContactData.v2;
    
    const double crhs0 =     1.0/Dt;
    const double crhs1 =     detJ; // DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs2 =     crhs0*crhs1*Phi[0]; // CRHS0*CRHS1*PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs3 =     tan1slave(0,0); // TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs4 =     tan1slave(1,0); // TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs5 =     tan1slave(2,0); // TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs6 =     N2[0]; // N2[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double crhs7 =     N2[1]; // N2[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double crhs8 =     N2[2]; // N2[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
    const double crhs9 =     N1[0]*(Dt*v1(0,0)) + N1[1]*(Dt*v1(1,0)) + N1[2]*(Dt*v1(2,0)) - crhs6*(Dt*v2(0,0)) - crhs7*(Dt*v2(1,0)) - crhs8*(Dt*v2(2,0));
    const double crhs10 =     tan1slave(0,1); // TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs11 =     tan1slave(1,1); // TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs12 =     tan1slave(2,1); // TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs13 =     N1[0]*(Dt*v1(0,1)) + N1[1]*(Dt*v1(1,1)) + N1[2]*(Dt*v1(2,1)) - crhs6*(Dt*v2(0,1)) - crhs7*(Dt*v2(1,1)) - crhs8*(Dt*v2(2,1));
    const double crhs14 =     tan1slave(0,2); // TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs15 =     tan1slave(1,2); // TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs16 =     tan1slave(2,2); // TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs17 =     N1[0]*(Dt*v1(0,2)) + N1[1]*(Dt*v1(1,2)) + N1[2]*(Dt*v1(2,2)) - crhs6*(Dt*v2(0,2)) - crhs7*(Dt*v2(1,2)) - crhs8*(Dt*v2(2,2));
    const double crhs18 =     crhs13*(N1[0]*crhs10 + N1[1]*crhs11 + N1[2]*crhs12) + crhs17*(N1[0]*crhs14 + N1[1]*crhs15 + N1[2]*crhs16) + crhs9*(N1[0]*crhs3 + N1[1]*crhs4 + N1[2]*crhs5);
    const double crhs19 =     tan2slave(0,0); // TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs20 =     tan2slave(1,0); // TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs21 =     tan2slave(2,0); // TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs22 =     tan2slave(0,1); // TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs23 =     tan2slave(1,1); // TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs24 =     tan2slave(2,1); // TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs25 =     tan2slave(0,2); // TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs26 =     tan2slave(1,2); // TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs27 =     tan2slave(2,2); // TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs28 =     crhs13*(N1[0]*crhs22 + N1[1]*crhs23 + N1[2]*crhs24) + crhs17*(N1[0]*crhs25 + N1[1]*crhs26 + N1[2]*crhs27) + crhs9*(N1[0]*crhs19 + N1[1]*crhs20 + N1[2]*crhs21);
    const double crhs29 =     crhs0*crhs1*Phi[1]; // CRHS0*CRHS1*PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
    const double crhs30 =     crhs0*crhs1*Phi[2]; // CRHS0*CRHS1*PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))

    rhs[0]=0;
    rhs[1]=0;
    rhs[2]=0;
    rhs[3]=0;
    rhs[4]=0;
    rhs[5]=0;
    rhs[6]=0;
    rhs[7]=0;
    rhs[8]=0;
    rhs[9]=0;
    rhs[10]=0;
    rhs[11]=0;
    rhs[12]=0;
    rhs[13]=0;
    rhs[14]=0;
    rhs[15]=0;
    rhs[16]=0;
    rhs[17]=0;
    rhs[18]=-crhs2*(crhs18*crhs3 + crhs19*crhs28);
    rhs[19]=-crhs2*(crhs10*crhs18 + crhs22*crhs28);
    rhs[20]=-crhs2*(crhs14*crhs18 + crhs25*crhs28);
    rhs[21]=-crhs29*(crhs18*crhs4 + crhs20*crhs28);
    rhs[22]=-crhs29*(crhs11*crhs18 + crhs23*crhs28);
    rhs[23]=-crhs29*(crhs15*crhs18 + crhs26*crhs28);
    rhs[24]=-crhs30*(crhs18*crhs5 + crhs21*crhs28);
    rhs[25]=-crhs30*(crhs12*crhs18 + crhs24*crhs28);
    rhs[26]=-crhs30*(crhs16*crhs18 + crhs27*crhs28);

    
    return rhs;
}

private:
};// class Contact3D3N3N
}
#endif /* KRATOS_CONTACT3D3N3N defined */
