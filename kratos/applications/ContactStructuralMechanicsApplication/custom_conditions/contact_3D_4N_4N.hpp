// KRATOS  ___|  |       |       |
//       \___ \  __|  __| |   |  __| __| |   |  __| _` | |
//           | |   |    |   | (    |   |   | |   (   | |
//       _____/ \__|_|   \__,_|\___|\__|\__,_|_|  \__,_|_| MECHANICS
//
//  License: BSD License
//   license: structural_mechanics_application/license.txt
//
//  Main authors:    Vicente Mataix Ferr√°ndiz
//

#if !defined(KRATOS_CONTACT3D4N4N)
#define KRATOS_CONTACT3D4N4N

// System includes

// External includes

// Project includes
#include "custom_conditions/mortar_contact_condition.h"
#include "custom_utilities/contact_utilities.h"
#include "structural_mechanics_application.h"
#include "structural_mechanics_application_variables.h"
#include <boost/math/special_functions/sign.hpp>

namespace Kratos 
{
    ///@name Kratos Globals
    ///@{

    ///@}
    ///@name Type Definitions
    ///@{
        
    typedef Point<3>                                  PointType;
    typedef Node<3>                                    NodeType;
    typedef Geometry<NodeType>                     GeometryType;
        
    ///@}
    ///@name  Enum's
    ///@{

    ///@}
    ///@name  Functions
    ///@{

    ///@}
    ///@name Kratos Classes
    ///@{
        
class Contact3D4N4N
{
public:
    
    static inline bounded_matrix<double,36,36> ComputeGaussPointActiveLHS(
        const array_1d<double,4> N1, 
        const array_1d<double,4> N2, 
        const array_1d<double,4> Phi, 
        const double detJ, 
        const ContactData<3,4>& rContactData
        )
{
    bounded_matrix<double,36,36> lhs;
    
    const double integration_point_gap = inner_prod(rContactData.Gaps,N1);
    const bounded_matrix<double, 4, 3> normalslave = rContactData.Normal_s;
    const bounded_matrix<double, 4, 3> tan1slave   = rContactData.Tangent_xi_s;
    const bounded_matrix<double, 4, 3> tan2slave   = rContactData.Tangent_eta_s;
    const bounded_matrix<double, 4, 3> lm          = rContactData.LagrangeMultipliers;
    
    const std::vector<double> DeltaJs  = rContactData.DeltaJ_s;
    const std::vector<double> DeltaGap = rContactData.DeltaGap;
    const std::vector<array_1d<double,4>> DeltaPhi = rContactData.DeltaPhi;
    const std::vector<bounded_matrix<double, 4, 3>> DeltaNormals = rContactData.Delta_Normal_s;
    
    const double clhs0 =     detJ; // DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs1 =     DeltaJs[0]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs2 =     Phi[0]; // PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs3 =     Phi[1]; // PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs4 =     Phi[2]; // PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs5 =     Phi[3]; // PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs6 =     clhs2*lm(0,0) + clhs3*lm(1,0) + clhs4*lm(2,0) + clhs5*lm(3,0);
    const double clhs7 =     DeltaPhi[0][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs8 =     DeltaPhi[0][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs9 =     DeltaPhi[0][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs10 =     DeltaPhi[0][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs11 =     clhs0*(clhs10*lm(3,0) + clhs7*lm(0,0) + clhs8*lm(1,0) + clhs9*lm(2,0)) + clhs1*clhs6;
    const double clhs12 =     DeltaJs[1]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs13 =     DeltaPhi[1][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs14 =     DeltaPhi[1][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs15 =     DeltaPhi[1][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs16 =     DeltaPhi[1][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs17 =     clhs0*(clhs13*lm(0,0) + clhs14*lm(1,0) + clhs15*lm(2,0) + clhs16*lm(3,0)) + clhs12*clhs6;
    const double clhs18 =     DeltaJs[2]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs19 =     DeltaPhi[2][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs20 =     DeltaPhi[2][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs21 =     DeltaPhi[2][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs22 =     DeltaPhi[2][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs23 =     clhs0*(clhs19*lm(0,0) + clhs20*lm(1,0) + clhs21*lm(2,0) + clhs22*lm(3,0)) + clhs18*clhs6;
    const double clhs24 =     DeltaJs[3]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs25 =     DeltaPhi[3][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs26 =     DeltaPhi[3][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs27 =     DeltaPhi[3][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs28 =     DeltaPhi[3][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs29 =     clhs0*(clhs25*lm(0,0) + clhs26*lm(1,0) + clhs27*lm(2,0) + clhs28*lm(3,0)) + clhs24*clhs6;
    const double clhs30 =     DeltaJs[4]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs31 =     DeltaPhi[4][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs32 =     DeltaPhi[4][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs33 =     DeltaPhi[4][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs34 =     DeltaPhi[4][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs35 =     clhs0*(clhs31*lm(0,0) + clhs32*lm(1,0) + clhs33*lm(2,0) + clhs34*lm(3,0)) + clhs30*clhs6;
    const double clhs36 =     DeltaJs[5]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs37 =     DeltaPhi[5][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs38 =     DeltaPhi[5][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs39 =     DeltaPhi[5][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs40 =     DeltaPhi[5][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs41 =     clhs0*(clhs37*lm(0,0) + clhs38*lm(1,0) + clhs39*lm(2,0) + clhs40*lm(3,0)) + clhs36*clhs6;
    const double clhs42 =     DeltaJs[6]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs43 =     DeltaPhi[6][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs44 =     DeltaPhi[6][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs45 =     DeltaPhi[6][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs46 =     DeltaPhi[6][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs47 =     clhs0*(clhs43*lm(0,0) + clhs44*lm(1,0) + clhs45*lm(2,0) + clhs46*lm(3,0)) + clhs42*clhs6;
    const double clhs48 =     DeltaJs[7]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs49 =     DeltaPhi[7][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs50 =     DeltaPhi[7][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs51 =     DeltaPhi[7][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs52 =     DeltaPhi[7][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs53 =     clhs0*(clhs49*lm(0,0) + clhs50*lm(1,0) + clhs51*lm(2,0) + clhs52*lm(3,0)) + clhs48*clhs6;
    const double clhs54 =     DeltaJs[8]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs55 =     DeltaPhi[8][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs56 =     DeltaPhi[8][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs57 =     DeltaPhi[8][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs58 =     DeltaPhi[8][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs59 =     clhs0*(clhs55*lm(0,0) + clhs56*lm(1,0) + clhs57*lm(2,0) + clhs58*lm(3,0)) + clhs54*clhs6;
    const double clhs60 =     DeltaJs[9]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs61 =     DeltaPhi[9][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs62 =     DeltaPhi[9][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs63 =     DeltaPhi[9][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs64 =     DeltaPhi[9][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs65 =     clhs0*(clhs61*lm(0,0) + clhs62*lm(1,0) + clhs63*lm(2,0) + clhs64*lm(3,0)) + clhs6*clhs60;
    const double clhs66 =     DeltaJs[10]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs67 =     DeltaPhi[10][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs68 =     DeltaPhi[10][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs69 =     DeltaPhi[10][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs70 =     DeltaPhi[10][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs71 =     clhs0*(clhs67*lm(0,0) + clhs68*lm(1,0) + clhs69*lm(2,0) + clhs70*lm(3,0)) + clhs6*clhs66;
    const double clhs72 =     DeltaJs[11]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs73 =     DeltaPhi[11][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs74 =     DeltaPhi[11][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs75 =     DeltaPhi[11][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs76 =     DeltaPhi[11][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs77 =     clhs0*(clhs73*lm(0,0) + clhs74*lm(1,0) + clhs75*lm(2,0) + clhs76*lm(3,0)) + clhs6*clhs72;
    const double clhs78 =     N2[0]*clhs0;
    const double clhs79 =     clhs2*clhs78;
    const double clhs80 =     clhs3*clhs78;
    const double clhs81 =     clhs4*clhs78;
    const double clhs82 =     clhs5*clhs78;
    const double clhs83 =     clhs2*lm(0,1) + clhs3*lm(1,1) + clhs4*lm(2,1) + clhs5*lm(3,1);
    const double clhs84 =     clhs0*(clhs10*lm(3,1) + clhs7*lm(0,1) + clhs8*lm(1,1) + clhs9*lm(2,1)) + clhs1*clhs83;
    const double clhs85 =     clhs0*(clhs13*lm(0,1) + clhs14*lm(1,1) + clhs15*lm(2,1) + clhs16*lm(3,1)) + clhs12*clhs83;
    const double clhs86 =     clhs0*(clhs19*lm(0,1) + clhs20*lm(1,1) + clhs21*lm(2,1) + clhs22*lm(3,1)) + clhs18*clhs83;
    const double clhs87 =     clhs0*(clhs25*lm(0,1) + clhs26*lm(1,1) + clhs27*lm(2,1) + clhs28*lm(3,1)) + clhs24*clhs83;
    const double clhs88 =     clhs0*(clhs31*lm(0,1) + clhs32*lm(1,1) + clhs33*lm(2,1) + clhs34*lm(3,1)) + clhs30*clhs83;
    const double clhs89 =     clhs0*(clhs37*lm(0,1) + clhs38*lm(1,1) + clhs39*lm(2,1) + clhs40*lm(3,1)) + clhs36*clhs83;
    const double clhs90 =     clhs0*(clhs43*lm(0,1) + clhs44*lm(1,1) + clhs45*lm(2,1) + clhs46*lm(3,1)) + clhs42*clhs83;
    const double clhs91 =     clhs0*(clhs49*lm(0,1) + clhs50*lm(1,1) + clhs51*lm(2,1) + clhs52*lm(3,1)) + clhs48*clhs83;
    const double clhs92 =     clhs0*(clhs55*lm(0,1) + clhs56*lm(1,1) + clhs57*lm(2,1) + clhs58*lm(3,1)) + clhs54*clhs83;
    const double clhs93 =     clhs0*(clhs61*lm(0,1) + clhs62*lm(1,1) + clhs63*lm(2,1) + clhs64*lm(3,1)) + clhs60*clhs83;
    const double clhs94 =     clhs0*(clhs67*lm(0,1) + clhs68*lm(1,1) + clhs69*lm(2,1) + clhs70*lm(3,1)) + clhs66*clhs83;
    const double clhs95 =     clhs0*(clhs73*lm(0,1) + clhs74*lm(1,1) + clhs75*lm(2,1) + clhs76*lm(3,1)) + clhs72*clhs83;
    const double clhs96 =     clhs2*lm(0,2) + clhs3*lm(1,2) + clhs4*lm(2,2) + clhs5*lm(3,2);
    const double clhs97 =     clhs0*(clhs10*lm(3,2) + clhs7*lm(0,2) + clhs8*lm(1,2) + clhs9*lm(2,2)) + clhs1*clhs96;
    const double clhs98 =     clhs0*(clhs13*lm(0,2) + clhs14*lm(1,2) + clhs15*lm(2,2) + clhs16*lm(3,2)) + clhs12*clhs96;
    const double clhs99 =     clhs0*(clhs19*lm(0,2) + clhs20*lm(1,2) + clhs21*lm(2,2) + clhs22*lm(3,2)) + clhs18*clhs96;
    const double clhs100 =     clhs0*(clhs25*lm(0,2) + clhs26*lm(1,2) + clhs27*lm(2,2) + clhs28*lm(3,2)) + clhs24*clhs96;
    const double clhs101 =     clhs0*(clhs31*lm(0,2) + clhs32*lm(1,2) + clhs33*lm(2,2) + clhs34*lm(3,2)) + clhs30*clhs96;
    const double clhs102 =     clhs0*(clhs37*lm(0,2) + clhs38*lm(1,2) + clhs39*lm(2,2) + clhs40*lm(3,2)) + clhs36*clhs96;
    const double clhs103 =     clhs0*(clhs43*lm(0,2) + clhs44*lm(1,2) + clhs45*lm(2,2) + clhs46*lm(3,2)) + clhs42*clhs96;
    const double clhs104 =     clhs0*(clhs49*lm(0,2) + clhs50*lm(1,2) + clhs51*lm(2,2) + clhs52*lm(3,2)) + clhs48*clhs96;
    const double clhs105 =     clhs0*(clhs55*lm(0,2) + clhs56*lm(1,2) + clhs57*lm(2,2) + clhs58*lm(3,2)) + clhs54*clhs96;
    const double clhs106 =     clhs0*(clhs61*lm(0,2) + clhs62*lm(1,2) + clhs63*lm(2,2) + clhs64*lm(3,2)) + clhs60*clhs96;
    const double clhs107 =     clhs0*(clhs67*lm(0,2) + clhs68*lm(1,2) + clhs69*lm(2,2) + clhs70*lm(3,2)) + clhs66*clhs96;
    const double clhs108 =     clhs0*(clhs73*lm(0,2) + clhs74*lm(1,2) + clhs75*lm(2,2) + clhs76*lm(3,2)) + clhs72*clhs96;
    const double clhs109 =     N2[1]*clhs0;
    const double clhs110 =     clhs109*clhs2;
    const double clhs111 =     clhs109*clhs3;
    const double clhs112 =     clhs109*clhs4;
    const double clhs113 =     clhs109*clhs5;
    const double clhs114 =     N2[2]*clhs0;
    const double clhs115 =     clhs114*clhs2;
    const double clhs116 =     clhs114*clhs3;
    const double clhs117 =     clhs114*clhs4;
    const double clhs118 =     clhs114*clhs5;
    const double clhs119 =     N2[3]*clhs0;
    const double clhs120 =     clhs119*clhs2;
    const double clhs121 =     clhs119*clhs3;
    const double clhs122 =     clhs119*clhs4;
    const double clhs123 =     clhs119*clhs5;
    const double clhs124 =     N1[0]*clhs0;
    const double clhs125 =     -clhs124*clhs2;
    const double clhs126 =     -clhs124*clhs3;
    const double clhs127 =     -clhs124*clhs4;
    const double clhs128 =     -clhs124*clhs5;
    const double clhs129 =     N1[1]*clhs0;
    const double clhs130 =     -clhs129*clhs2;
    const double clhs131 =     -clhs129*clhs3;
    const double clhs132 =     -clhs129*clhs4;
    const double clhs133 =     -clhs129*clhs5;
    const double clhs134 =     N1[2]*clhs0;
    const double clhs135 =     -clhs134*clhs2;
    const double clhs136 =     -clhs134*clhs3;
    const double clhs137 =     -clhs134*clhs4;
    const double clhs138 =     -clhs134*clhs5;
    const double clhs139 =     N1[3]*clhs0;
    const double clhs140 =     -clhs139*clhs2;
    const double clhs141 =     -clhs139*clhs3;
    const double clhs142 =     -clhs139*clhs4;
    const double clhs143 =     -clhs139*clhs5;
    const double clhs144 =     integration_point_gap; // GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
    const double clhs145 =     DeltaGap[12]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
    const double clhs146 =     normalslave(0,0); // NORMALSLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs147 =     clhs0*clhs146*clhs2;
    const double clhs148 =     DeltaGap[13]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
    const double clhs149 =     DeltaGap[14]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
    const double clhs150 =     DeltaGap[15]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
    const double clhs151 =     DeltaGap[16]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
    const double clhs152 =     DeltaGap[17]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
    const double clhs153 =     DeltaGap[18]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
    const double clhs154 =     DeltaGap[19]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
    const double clhs155 =     DeltaGap[20]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
    const double clhs156 =     DeltaGap[21]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
    const double clhs157 =     DeltaGap[22]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
    const double clhs158 =     DeltaGap[23]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
    const double clhs159 =     clhs0*clhs144*clhs2;
    const double clhs160 =     DeltaGap[0]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
    const double clhs161 =     clhs144*clhs146*clhs2;
    const double clhs162 =     clhs0*clhs144*clhs146;
    const double clhs163 =     DeltaGap[1]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
    const double clhs164 =     DeltaGap[2]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
    const double clhs165 =     DeltaGap[3]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
    const double clhs166 =     DeltaGap[4]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
    const double clhs167 =     DeltaGap[5]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
    const double clhs168 =     DeltaGap[6]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
    const double clhs169 =     DeltaGap[7]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
    const double clhs170 =     DeltaGap[8]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
    const double clhs171 =     DeltaGap[9]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
    const double clhs172 =     DeltaGap[10]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
    const double clhs173 =     DeltaGap[11]; // DERIVATIVE(GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
    const double clhs174 =     normalslave(0,1); // NORMALSLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs175 =     clhs0*clhs174*clhs2;
    const double clhs176 =     clhs144*clhs174*clhs2;
    const double clhs177 =     clhs0*clhs144*clhs174;
    const double clhs178 =     normalslave(0,2); // NORMALSLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs179 =     clhs0*clhs178*clhs2;
    const double clhs180 =     clhs144*clhs178*clhs2;
    const double clhs181 =     clhs0*clhs144*clhs178;
    const double clhs182 =     normalslave(1,0); // NORMALSLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs183 =     clhs0*clhs182*clhs3;
    const double clhs184 =     clhs0*clhs144*clhs3;
    const double clhs185 =     clhs144*clhs182*clhs3;
    const double clhs186 =     clhs0*clhs144*clhs182;
    const double clhs187 =     normalslave(1,1); // NORMALSLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs188 =     clhs0*clhs187*clhs3;
    const double clhs189 =     clhs144*clhs187*clhs3;
    const double clhs190 =     clhs0*clhs144*clhs187;
    const double clhs191 =     normalslave(1,2); // NORMALSLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs192 =     clhs0*clhs191*clhs3;
    const double clhs193 =     clhs144*clhs191*clhs3;
    const double clhs194 =     clhs0*clhs144*clhs191;
    const double clhs195 =     normalslave(2,0); // NORMALSLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs196 =     clhs0*clhs195*clhs4;
    const double clhs197 =     clhs0*clhs144*clhs4;
    const double clhs198 =     clhs144*clhs195*clhs4;
    const double clhs199 =     clhs0*clhs144*clhs195;
    const double clhs200 =     normalslave(2,1); // NORMALSLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs201 =     clhs0*clhs200*clhs4;
    const double clhs202 =     clhs144*clhs200*clhs4;
    const double clhs203 =     clhs0*clhs144*clhs200;
    const double clhs204 =     normalslave(2,2); // NORMALSLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs205 =     clhs0*clhs204*clhs4;
    const double clhs206 =     clhs144*clhs204*clhs4;
    const double clhs207 =     clhs0*clhs144*clhs204;
    const double clhs208 =     normalslave(3,0); // NORMALSLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs209 =     clhs0*clhs208*clhs5;
    const double clhs210 =     clhs0*clhs144*clhs5;
    const double clhs211 =     clhs144*clhs208*clhs5;
    const double clhs212 =     clhs0*clhs144*clhs208;
    const double clhs213 =     normalslave(3,1); // NORMALSLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs214 =     clhs0*clhs213*clhs5;
    const double clhs215 =     clhs144*clhs213*clhs5;
    const double clhs216 =     clhs0*clhs144*clhs213;
    const double clhs217 =     normalslave(3,2); // NORMALSLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs218 =     clhs0*clhs217*clhs5;
    const double clhs219 =     clhs144*clhs217*clhs5;
    const double clhs220 =     clhs0*clhs144*clhs217;

    lhs(0,0)=0;
    lhs(0,1)=0;
    lhs(0,2)=0;
    lhs(0,3)=0;
    lhs(0,4)=0;
    lhs(0,5)=0;
    lhs(0,6)=0;
    lhs(0,7)=0;
    lhs(0,8)=0;
    lhs(0,9)=0;
    lhs(0,10)=0;
    lhs(0,11)=0;
    lhs(0,12)=N2[0]*clhs11;
    lhs(0,13)=N2[0]*clhs17;
    lhs(0,14)=N2[0]*clhs23;
    lhs(0,15)=N2[0]*clhs29;
    lhs(0,16)=N2[0]*clhs35;
    lhs(0,17)=N2[0]*clhs41;
    lhs(0,18)=N2[0]*clhs47;
    lhs(0,19)=N2[0]*clhs53;
    lhs(0,20)=N2[0]*clhs59;
    lhs(0,21)=N2[0]*clhs65;
    lhs(0,22)=N2[0]*clhs71;
    lhs(0,23)=N2[0]*clhs77;
    lhs(0,24)=clhs79;
    lhs(0,25)=0;
    lhs(0,26)=0;
    lhs(0,27)=clhs80;
    lhs(0,28)=0;
    lhs(0,29)=0;
    lhs(0,30)=clhs81;
    lhs(0,31)=0;
    lhs(0,32)=0;
    lhs(0,33)=clhs82;
    lhs(0,34)=0;
    lhs(0,35)=0;
    lhs(1,0)=0;
    lhs(1,1)=0;
    lhs(1,2)=0;
    lhs(1,3)=0;
    lhs(1,4)=0;
    lhs(1,5)=0;
    lhs(1,6)=0;
    lhs(1,7)=0;
    lhs(1,8)=0;
    lhs(1,9)=0;
    lhs(1,10)=0;
    lhs(1,11)=0;
    lhs(1,12)=N2[0]*clhs84;
    lhs(1,13)=N2[0]*clhs85;
    lhs(1,14)=N2[0]*clhs86;
    lhs(1,15)=N2[0]*clhs87;
    lhs(1,16)=N2[0]*clhs88;
    lhs(1,17)=N2[0]*clhs89;
    lhs(1,18)=N2[0]*clhs90;
    lhs(1,19)=N2[0]*clhs91;
    lhs(1,20)=N2[0]*clhs92;
    lhs(1,21)=N2[0]*clhs93;
    lhs(1,22)=N2[0]*clhs94;
    lhs(1,23)=N2[0]*clhs95;
    lhs(1,24)=0;
    lhs(1,25)=clhs79;
    lhs(1,26)=0;
    lhs(1,27)=0;
    lhs(1,28)=clhs80;
    lhs(1,29)=0;
    lhs(1,30)=0;
    lhs(1,31)=clhs81;
    lhs(1,32)=0;
    lhs(1,33)=0;
    lhs(1,34)=clhs82;
    lhs(1,35)=0;
    lhs(2,0)=0;
    lhs(2,1)=0;
    lhs(2,2)=0;
    lhs(2,3)=0;
    lhs(2,4)=0;
    lhs(2,5)=0;
    lhs(2,6)=0;
    lhs(2,7)=0;
    lhs(2,8)=0;
    lhs(2,9)=0;
    lhs(2,10)=0;
    lhs(2,11)=0;
    lhs(2,12)=N2[0]*clhs97;
    lhs(2,13)=N2[0]*clhs98;
    lhs(2,14)=N2[0]*clhs99;
    lhs(2,15)=N2[0]*clhs100;
    lhs(2,16)=N2[0]*clhs101;
    lhs(2,17)=N2[0]*clhs102;
    lhs(2,18)=N2[0]*clhs103;
    lhs(2,19)=N2[0]*clhs104;
    lhs(2,20)=N2[0]*clhs105;
    lhs(2,21)=N2[0]*clhs106;
    lhs(2,22)=N2[0]*clhs107;
    lhs(2,23)=N2[0]*clhs108;
    lhs(2,24)=0;
    lhs(2,25)=0;
    lhs(2,26)=clhs79;
    lhs(2,27)=0;
    lhs(2,28)=0;
    lhs(2,29)=clhs80;
    lhs(2,30)=0;
    lhs(2,31)=0;
    lhs(2,32)=clhs81;
    lhs(2,33)=0;
    lhs(2,34)=0;
    lhs(2,35)=clhs82;
    lhs(3,0)=0;
    lhs(3,1)=0;
    lhs(3,2)=0;
    lhs(3,3)=0;
    lhs(3,4)=0;
    lhs(3,5)=0;
    lhs(3,6)=0;
    lhs(3,7)=0;
    lhs(3,8)=0;
    lhs(3,9)=0;
    lhs(3,10)=0;
    lhs(3,11)=0;
    lhs(3,12)=N2[1]*clhs11;
    lhs(3,13)=N2[1]*clhs17;
    lhs(3,14)=N2[1]*clhs23;
    lhs(3,15)=N2[1]*clhs29;
    lhs(3,16)=N2[1]*clhs35;
    lhs(3,17)=N2[1]*clhs41;
    lhs(3,18)=N2[1]*clhs47;
    lhs(3,19)=N2[1]*clhs53;
    lhs(3,20)=N2[1]*clhs59;
    lhs(3,21)=N2[1]*clhs65;
    lhs(3,22)=N2[1]*clhs71;
    lhs(3,23)=N2[1]*clhs77;
    lhs(3,24)=clhs110;
    lhs(3,25)=0;
    lhs(3,26)=0;
    lhs(3,27)=clhs111;
    lhs(3,28)=0;
    lhs(3,29)=0;
    lhs(3,30)=clhs112;
    lhs(3,31)=0;
    lhs(3,32)=0;
    lhs(3,33)=clhs113;
    lhs(3,34)=0;
    lhs(3,35)=0;
    lhs(4,0)=0;
    lhs(4,1)=0;
    lhs(4,2)=0;
    lhs(4,3)=0;
    lhs(4,4)=0;
    lhs(4,5)=0;
    lhs(4,6)=0;
    lhs(4,7)=0;
    lhs(4,8)=0;
    lhs(4,9)=0;
    lhs(4,10)=0;
    lhs(4,11)=0;
    lhs(4,12)=N2[1]*clhs84;
    lhs(4,13)=N2[1]*clhs85;
    lhs(4,14)=N2[1]*clhs86;
    lhs(4,15)=N2[1]*clhs87;
    lhs(4,16)=N2[1]*clhs88;
    lhs(4,17)=N2[1]*clhs89;
    lhs(4,18)=N2[1]*clhs90;
    lhs(4,19)=N2[1]*clhs91;
    lhs(4,20)=N2[1]*clhs92;
    lhs(4,21)=N2[1]*clhs93;
    lhs(4,22)=N2[1]*clhs94;
    lhs(4,23)=N2[1]*clhs95;
    lhs(4,24)=0;
    lhs(4,25)=clhs110;
    lhs(4,26)=0;
    lhs(4,27)=0;
    lhs(4,28)=clhs111;
    lhs(4,29)=0;
    lhs(4,30)=0;
    lhs(4,31)=clhs112;
    lhs(4,32)=0;
    lhs(4,33)=0;
    lhs(4,34)=clhs113;
    lhs(4,35)=0;
    lhs(5,0)=0;
    lhs(5,1)=0;
    lhs(5,2)=0;
    lhs(5,3)=0;
    lhs(5,4)=0;
    lhs(5,5)=0;
    lhs(5,6)=0;
    lhs(5,7)=0;
    lhs(5,8)=0;
    lhs(5,9)=0;
    lhs(5,10)=0;
    lhs(5,11)=0;
    lhs(5,12)=N2[1]*clhs97;
    lhs(5,13)=N2[1]*clhs98;
    lhs(5,14)=N2[1]*clhs99;
    lhs(5,15)=N2[1]*clhs100;
    lhs(5,16)=N2[1]*clhs101;
    lhs(5,17)=N2[1]*clhs102;
    lhs(5,18)=N2[1]*clhs103;
    lhs(5,19)=N2[1]*clhs104;
    lhs(5,20)=N2[1]*clhs105;
    lhs(5,21)=N2[1]*clhs106;
    lhs(5,22)=N2[1]*clhs107;
    lhs(5,23)=N2[1]*clhs108;
    lhs(5,24)=0;
    lhs(5,25)=0;
    lhs(5,26)=clhs110;
    lhs(5,27)=0;
    lhs(5,28)=0;
    lhs(5,29)=clhs111;
    lhs(5,30)=0;
    lhs(5,31)=0;
    lhs(5,32)=clhs112;
    lhs(5,33)=0;
    lhs(5,34)=0;
    lhs(5,35)=clhs113;
    lhs(6,0)=0;
    lhs(6,1)=0;
    lhs(6,2)=0;
    lhs(6,3)=0;
    lhs(6,4)=0;
    lhs(6,5)=0;
    lhs(6,6)=0;
    lhs(6,7)=0;
    lhs(6,8)=0;
    lhs(6,9)=0;
    lhs(6,10)=0;
    lhs(6,11)=0;
    lhs(6,12)=N2[2]*clhs11;
    lhs(6,13)=N2[2]*clhs17;
    lhs(6,14)=N2[2]*clhs23;
    lhs(6,15)=N2[2]*clhs29;
    lhs(6,16)=N2[2]*clhs35;
    lhs(6,17)=N2[2]*clhs41;
    lhs(6,18)=N2[2]*clhs47;
    lhs(6,19)=N2[2]*clhs53;
    lhs(6,20)=N2[2]*clhs59;
    lhs(6,21)=N2[2]*clhs65;
    lhs(6,22)=N2[2]*clhs71;
    lhs(6,23)=N2[2]*clhs77;
    lhs(6,24)=clhs115;
    lhs(6,25)=0;
    lhs(6,26)=0;
    lhs(6,27)=clhs116;
    lhs(6,28)=0;
    lhs(6,29)=0;
    lhs(6,30)=clhs117;
    lhs(6,31)=0;
    lhs(6,32)=0;
    lhs(6,33)=clhs118;
    lhs(6,34)=0;
    lhs(6,35)=0;
    lhs(7,0)=0;
    lhs(7,1)=0;
    lhs(7,2)=0;
    lhs(7,3)=0;
    lhs(7,4)=0;
    lhs(7,5)=0;
    lhs(7,6)=0;
    lhs(7,7)=0;
    lhs(7,8)=0;
    lhs(7,9)=0;
    lhs(7,10)=0;
    lhs(7,11)=0;
    lhs(7,12)=N2[2]*clhs84;
    lhs(7,13)=N2[2]*clhs85;
    lhs(7,14)=N2[2]*clhs86;
    lhs(7,15)=N2[2]*clhs87;
    lhs(7,16)=N2[2]*clhs88;
    lhs(7,17)=N2[2]*clhs89;
    lhs(7,18)=N2[2]*clhs90;
    lhs(7,19)=N2[2]*clhs91;
    lhs(7,20)=N2[2]*clhs92;
    lhs(7,21)=N2[2]*clhs93;
    lhs(7,22)=N2[2]*clhs94;
    lhs(7,23)=N2[2]*clhs95;
    lhs(7,24)=0;
    lhs(7,25)=clhs115;
    lhs(7,26)=0;
    lhs(7,27)=0;
    lhs(7,28)=clhs116;
    lhs(7,29)=0;
    lhs(7,30)=0;
    lhs(7,31)=clhs117;
    lhs(7,32)=0;
    lhs(7,33)=0;
    lhs(7,34)=clhs118;
    lhs(7,35)=0;
    lhs(8,0)=0;
    lhs(8,1)=0;
    lhs(8,2)=0;
    lhs(8,3)=0;
    lhs(8,4)=0;
    lhs(8,5)=0;
    lhs(8,6)=0;
    lhs(8,7)=0;
    lhs(8,8)=0;
    lhs(8,9)=0;
    lhs(8,10)=0;
    lhs(8,11)=0;
    lhs(8,12)=N2[2]*clhs97;
    lhs(8,13)=N2[2]*clhs98;
    lhs(8,14)=N2[2]*clhs99;
    lhs(8,15)=N2[2]*clhs100;
    lhs(8,16)=N2[2]*clhs101;
    lhs(8,17)=N2[2]*clhs102;
    lhs(8,18)=N2[2]*clhs103;
    lhs(8,19)=N2[2]*clhs104;
    lhs(8,20)=N2[2]*clhs105;
    lhs(8,21)=N2[2]*clhs106;
    lhs(8,22)=N2[2]*clhs107;
    lhs(8,23)=N2[2]*clhs108;
    lhs(8,24)=0;
    lhs(8,25)=0;
    lhs(8,26)=clhs115;
    lhs(8,27)=0;
    lhs(8,28)=0;
    lhs(8,29)=clhs116;
    lhs(8,30)=0;
    lhs(8,31)=0;
    lhs(8,32)=clhs117;
    lhs(8,33)=0;
    lhs(8,34)=0;
    lhs(8,35)=clhs118;
    lhs(9,0)=0;
    lhs(9,1)=0;
    lhs(9,2)=0;
    lhs(9,3)=0;
    lhs(9,4)=0;
    lhs(9,5)=0;
    lhs(9,6)=0;
    lhs(9,7)=0;
    lhs(9,8)=0;
    lhs(9,9)=0;
    lhs(9,10)=0;
    lhs(9,11)=0;
    lhs(9,12)=N2[3]*clhs11;
    lhs(9,13)=N2[3]*clhs17;
    lhs(9,14)=N2[3]*clhs23;
    lhs(9,15)=N2[3]*clhs29;
    lhs(9,16)=N2[3]*clhs35;
    lhs(9,17)=N2[3]*clhs41;
    lhs(9,18)=N2[3]*clhs47;
    lhs(9,19)=N2[3]*clhs53;
    lhs(9,20)=N2[3]*clhs59;
    lhs(9,21)=N2[3]*clhs65;
    lhs(9,22)=N2[3]*clhs71;
    lhs(9,23)=N2[3]*clhs77;
    lhs(9,24)=clhs120;
    lhs(9,25)=0;
    lhs(9,26)=0;
    lhs(9,27)=clhs121;
    lhs(9,28)=0;
    lhs(9,29)=0;
    lhs(9,30)=clhs122;
    lhs(9,31)=0;
    lhs(9,32)=0;
    lhs(9,33)=clhs123;
    lhs(9,34)=0;
    lhs(9,35)=0;
    lhs(10,0)=0;
    lhs(10,1)=0;
    lhs(10,2)=0;
    lhs(10,3)=0;
    lhs(10,4)=0;
    lhs(10,5)=0;
    lhs(10,6)=0;
    lhs(10,7)=0;
    lhs(10,8)=0;
    lhs(10,9)=0;
    lhs(10,10)=0;
    lhs(10,11)=0;
    lhs(10,12)=N2[3]*clhs84;
    lhs(10,13)=N2[3]*clhs85;
    lhs(10,14)=N2[3]*clhs86;
    lhs(10,15)=N2[3]*clhs87;
    lhs(10,16)=N2[3]*clhs88;
    lhs(10,17)=N2[3]*clhs89;
    lhs(10,18)=N2[3]*clhs90;
    lhs(10,19)=N2[3]*clhs91;
    lhs(10,20)=N2[3]*clhs92;
    lhs(10,21)=N2[3]*clhs93;
    lhs(10,22)=N2[3]*clhs94;
    lhs(10,23)=N2[3]*clhs95;
    lhs(10,24)=0;
    lhs(10,25)=clhs120;
    lhs(10,26)=0;
    lhs(10,27)=0;
    lhs(10,28)=clhs121;
    lhs(10,29)=0;
    lhs(10,30)=0;
    lhs(10,31)=clhs122;
    lhs(10,32)=0;
    lhs(10,33)=0;
    lhs(10,34)=clhs123;
    lhs(10,35)=0;
    lhs(11,0)=0;
    lhs(11,1)=0;
    lhs(11,2)=0;
    lhs(11,3)=0;
    lhs(11,4)=0;
    lhs(11,5)=0;
    lhs(11,6)=0;
    lhs(11,7)=0;
    lhs(11,8)=0;
    lhs(11,9)=0;
    lhs(11,10)=0;
    lhs(11,11)=0;
    lhs(11,12)=N2[3]*clhs97;
    lhs(11,13)=N2[3]*clhs98;
    lhs(11,14)=N2[3]*clhs99;
    lhs(11,15)=N2[3]*clhs100;
    lhs(11,16)=N2[3]*clhs101;
    lhs(11,17)=N2[3]*clhs102;
    lhs(11,18)=N2[3]*clhs103;
    lhs(11,19)=N2[3]*clhs104;
    lhs(11,20)=N2[3]*clhs105;
    lhs(11,21)=N2[3]*clhs106;
    lhs(11,22)=N2[3]*clhs107;
    lhs(11,23)=N2[3]*clhs108;
    lhs(11,24)=0;
    lhs(11,25)=0;
    lhs(11,26)=clhs120;
    lhs(11,27)=0;
    lhs(11,28)=0;
    lhs(11,29)=clhs121;
    lhs(11,30)=0;
    lhs(11,31)=0;
    lhs(11,32)=clhs122;
    lhs(11,33)=0;
    lhs(11,34)=0;
    lhs(11,35)=clhs123;
    lhs(12,0)=0;
    lhs(12,1)=0;
    lhs(12,2)=0;
    lhs(12,3)=0;
    lhs(12,4)=0;
    lhs(12,5)=0;
    lhs(12,6)=0;
    lhs(12,7)=0;
    lhs(12,8)=0;
    lhs(12,9)=0;
    lhs(12,10)=0;
    lhs(12,11)=0;
    lhs(12,12)=-N1[0]*clhs11;
    lhs(12,13)=-N1[0]*clhs17;
    lhs(12,14)=-N1[0]*clhs23;
    lhs(12,15)=-N1[0]*clhs29;
    lhs(12,16)=-N1[0]*clhs35;
    lhs(12,17)=-N1[0]*clhs41;
    lhs(12,18)=-N1[0]*clhs47;
    lhs(12,19)=-N1[0]*clhs53;
    lhs(12,20)=-N1[0]*clhs59;
    lhs(12,21)=-N1[0]*clhs65;
    lhs(12,22)=-N1[0]*clhs71;
    lhs(12,23)=-N1[0]*clhs77;
    lhs(12,24)=clhs125;
    lhs(12,25)=0;
    lhs(12,26)=0;
    lhs(12,27)=clhs126;
    lhs(12,28)=0;
    lhs(12,29)=0;
    lhs(12,30)=clhs127;
    lhs(12,31)=0;
    lhs(12,32)=0;
    lhs(12,33)=clhs128;
    lhs(12,34)=0;
    lhs(12,35)=0;
    lhs(13,0)=0;
    lhs(13,1)=0;
    lhs(13,2)=0;
    lhs(13,3)=0;
    lhs(13,4)=0;
    lhs(13,5)=0;
    lhs(13,6)=0;
    lhs(13,7)=0;
    lhs(13,8)=0;
    lhs(13,9)=0;
    lhs(13,10)=0;
    lhs(13,11)=0;
    lhs(13,12)=-N1[0]*clhs84;
    lhs(13,13)=-N1[0]*clhs85;
    lhs(13,14)=-N1[0]*clhs86;
    lhs(13,15)=-N1[0]*clhs87;
    lhs(13,16)=-N1[0]*clhs88;
    lhs(13,17)=-N1[0]*clhs89;
    lhs(13,18)=-N1[0]*clhs90;
    lhs(13,19)=-N1[0]*clhs91;
    lhs(13,20)=-N1[0]*clhs92;
    lhs(13,21)=-N1[0]*clhs93;
    lhs(13,22)=-N1[0]*clhs94;
    lhs(13,23)=-N1[0]*clhs95;
    lhs(13,24)=0;
    lhs(13,25)=clhs125;
    lhs(13,26)=0;
    lhs(13,27)=0;
    lhs(13,28)=clhs126;
    lhs(13,29)=0;
    lhs(13,30)=0;
    lhs(13,31)=clhs127;
    lhs(13,32)=0;
    lhs(13,33)=0;
    lhs(13,34)=clhs128;
    lhs(13,35)=0;
    lhs(14,0)=0;
    lhs(14,1)=0;
    lhs(14,2)=0;
    lhs(14,3)=0;
    lhs(14,4)=0;
    lhs(14,5)=0;
    lhs(14,6)=0;
    lhs(14,7)=0;
    lhs(14,8)=0;
    lhs(14,9)=0;
    lhs(14,10)=0;
    lhs(14,11)=0;
    lhs(14,12)=-N1[0]*clhs97;
    lhs(14,13)=-N1[0]*clhs98;
    lhs(14,14)=-N1[0]*clhs99;
    lhs(14,15)=-N1[0]*clhs100;
    lhs(14,16)=-N1[0]*clhs101;
    lhs(14,17)=-N1[0]*clhs102;
    lhs(14,18)=-N1[0]*clhs103;
    lhs(14,19)=-N1[0]*clhs104;
    lhs(14,20)=-N1[0]*clhs105;
    lhs(14,21)=-N1[0]*clhs106;
    lhs(14,22)=-N1[0]*clhs107;
    lhs(14,23)=-N1[0]*clhs108;
    lhs(14,24)=0;
    lhs(14,25)=0;
    lhs(14,26)=clhs125;
    lhs(14,27)=0;
    lhs(14,28)=0;
    lhs(14,29)=clhs126;
    lhs(14,30)=0;
    lhs(14,31)=0;
    lhs(14,32)=clhs127;
    lhs(14,33)=0;
    lhs(14,34)=0;
    lhs(14,35)=clhs128;
    lhs(15,0)=0;
    lhs(15,1)=0;
    lhs(15,2)=0;
    lhs(15,3)=0;
    lhs(15,4)=0;
    lhs(15,5)=0;
    lhs(15,6)=0;
    lhs(15,7)=0;
    lhs(15,8)=0;
    lhs(15,9)=0;
    lhs(15,10)=0;
    lhs(15,11)=0;
    lhs(15,12)=-N1[1]*clhs11;
    lhs(15,13)=-N1[1]*clhs17;
    lhs(15,14)=-N1[1]*clhs23;
    lhs(15,15)=-N1[1]*clhs29;
    lhs(15,16)=-N1[1]*clhs35;
    lhs(15,17)=-N1[1]*clhs41;
    lhs(15,18)=-N1[1]*clhs47;
    lhs(15,19)=-N1[1]*clhs53;
    lhs(15,20)=-N1[1]*clhs59;
    lhs(15,21)=-N1[1]*clhs65;
    lhs(15,22)=-N1[1]*clhs71;
    lhs(15,23)=-N1[1]*clhs77;
    lhs(15,24)=clhs130;
    lhs(15,25)=0;
    lhs(15,26)=0;
    lhs(15,27)=clhs131;
    lhs(15,28)=0;
    lhs(15,29)=0;
    lhs(15,30)=clhs132;
    lhs(15,31)=0;
    lhs(15,32)=0;
    lhs(15,33)=clhs133;
    lhs(15,34)=0;
    lhs(15,35)=0;
    lhs(16,0)=0;
    lhs(16,1)=0;
    lhs(16,2)=0;
    lhs(16,3)=0;
    lhs(16,4)=0;
    lhs(16,5)=0;
    lhs(16,6)=0;
    lhs(16,7)=0;
    lhs(16,8)=0;
    lhs(16,9)=0;
    lhs(16,10)=0;
    lhs(16,11)=0;
    lhs(16,12)=-N1[1]*clhs84;
    lhs(16,13)=-N1[1]*clhs85;
    lhs(16,14)=-N1[1]*clhs86;
    lhs(16,15)=-N1[1]*clhs87;
    lhs(16,16)=-N1[1]*clhs88;
    lhs(16,17)=-N1[1]*clhs89;
    lhs(16,18)=-N1[1]*clhs90;
    lhs(16,19)=-N1[1]*clhs91;
    lhs(16,20)=-N1[1]*clhs92;
    lhs(16,21)=-N1[1]*clhs93;
    lhs(16,22)=-N1[1]*clhs94;
    lhs(16,23)=-N1[1]*clhs95;
    lhs(16,24)=0;
    lhs(16,25)=clhs130;
    lhs(16,26)=0;
    lhs(16,27)=0;
    lhs(16,28)=clhs131;
    lhs(16,29)=0;
    lhs(16,30)=0;
    lhs(16,31)=clhs132;
    lhs(16,32)=0;
    lhs(16,33)=0;
    lhs(16,34)=clhs133;
    lhs(16,35)=0;
    lhs(17,0)=0;
    lhs(17,1)=0;
    lhs(17,2)=0;
    lhs(17,3)=0;
    lhs(17,4)=0;
    lhs(17,5)=0;
    lhs(17,6)=0;
    lhs(17,7)=0;
    lhs(17,8)=0;
    lhs(17,9)=0;
    lhs(17,10)=0;
    lhs(17,11)=0;
    lhs(17,12)=-N1[1]*clhs97;
    lhs(17,13)=-N1[1]*clhs98;
    lhs(17,14)=-N1[1]*clhs99;
    lhs(17,15)=-N1[1]*clhs100;
    lhs(17,16)=-N1[1]*clhs101;
    lhs(17,17)=-N1[1]*clhs102;
    lhs(17,18)=-N1[1]*clhs103;
    lhs(17,19)=-N1[1]*clhs104;
    lhs(17,20)=-N1[1]*clhs105;
    lhs(17,21)=-N1[1]*clhs106;
    lhs(17,22)=-N1[1]*clhs107;
    lhs(17,23)=-N1[1]*clhs108;
    lhs(17,24)=0;
    lhs(17,25)=0;
    lhs(17,26)=clhs130;
    lhs(17,27)=0;
    lhs(17,28)=0;
    lhs(17,29)=clhs131;
    lhs(17,30)=0;
    lhs(17,31)=0;
    lhs(17,32)=clhs132;
    lhs(17,33)=0;
    lhs(17,34)=0;
    lhs(17,35)=clhs133;
    lhs(18,0)=0;
    lhs(18,1)=0;
    lhs(18,2)=0;
    lhs(18,3)=0;
    lhs(18,4)=0;
    lhs(18,5)=0;
    lhs(18,6)=0;
    lhs(18,7)=0;
    lhs(18,8)=0;
    lhs(18,9)=0;
    lhs(18,10)=0;
    lhs(18,11)=0;
    lhs(18,12)=-N1[2]*clhs11;
    lhs(18,13)=-N1[2]*clhs17;
    lhs(18,14)=-N1[2]*clhs23;
    lhs(18,15)=-N1[2]*clhs29;
    lhs(18,16)=-N1[2]*clhs35;
    lhs(18,17)=-N1[2]*clhs41;
    lhs(18,18)=-N1[2]*clhs47;
    lhs(18,19)=-N1[2]*clhs53;
    lhs(18,20)=-N1[2]*clhs59;
    lhs(18,21)=-N1[2]*clhs65;
    lhs(18,22)=-N1[2]*clhs71;
    lhs(18,23)=-N1[2]*clhs77;
    lhs(18,24)=clhs135;
    lhs(18,25)=0;
    lhs(18,26)=0;
    lhs(18,27)=clhs136;
    lhs(18,28)=0;
    lhs(18,29)=0;
    lhs(18,30)=clhs137;
    lhs(18,31)=0;
    lhs(18,32)=0;
    lhs(18,33)=clhs138;
    lhs(18,34)=0;
    lhs(18,35)=0;
    lhs(19,0)=0;
    lhs(19,1)=0;
    lhs(19,2)=0;
    lhs(19,3)=0;
    lhs(19,4)=0;
    lhs(19,5)=0;
    lhs(19,6)=0;
    lhs(19,7)=0;
    lhs(19,8)=0;
    lhs(19,9)=0;
    lhs(19,10)=0;
    lhs(19,11)=0;
    lhs(19,12)=-N1[2]*clhs84;
    lhs(19,13)=-N1[2]*clhs85;
    lhs(19,14)=-N1[2]*clhs86;
    lhs(19,15)=-N1[2]*clhs87;
    lhs(19,16)=-N1[2]*clhs88;
    lhs(19,17)=-N1[2]*clhs89;
    lhs(19,18)=-N1[2]*clhs90;
    lhs(19,19)=-N1[2]*clhs91;
    lhs(19,20)=-N1[2]*clhs92;
    lhs(19,21)=-N1[2]*clhs93;
    lhs(19,22)=-N1[2]*clhs94;
    lhs(19,23)=-N1[2]*clhs95;
    lhs(19,24)=0;
    lhs(19,25)=clhs135;
    lhs(19,26)=0;
    lhs(19,27)=0;
    lhs(19,28)=clhs136;
    lhs(19,29)=0;
    lhs(19,30)=0;
    lhs(19,31)=clhs137;
    lhs(19,32)=0;
    lhs(19,33)=0;
    lhs(19,34)=clhs138;
    lhs(19,35)=0;
    lhs(20,0)=0;
    lhs(20,1)=0;
    lhs(20,2)=0;
    lhs(20,3)=0;
    lhs(20,4)=0;
    lhs(20,5)=0;
    lhs(20,6)=0;
    lhs(20,7)=0;
    lhs(20,8)=0;
    lhs(20,9)=0;
    lhs(20,10)=0;
    lhs(20,11)=0;
    lhs(20,12)=-N1[2]*clhs97;
    lhs(20,13)=-N1[2]*clhs98;
    lhs(20,14)=-N1[2]*clhs99;
    lhs(20,15)=-N1[2]*clhs100;
    lhs(20,16)=-N1[2]*clhs101;
    lhs(20,17)=-N1[2]*clhs102;
    lhs(20,18)=-N1[2]*clhs103;
    lhs(20,19)=-N1[2]*clhs104;
    lhs(20,20)=-N1[2]*clhs105;
    lhs(20,21)=-N1[2]*clhs106;
    lhs(20,22)=-N1[2]*clhs107;
    lhs(20,23)=-N1[2]*clhs108;
    lhs(20,24)=0;
    lhs(20,25)=0;
    lhs(20,26)=clhs135;
    lhs(20,27)=0;
    lhs(20,28)=0;
    lhs(20,29)=clhs136;
    lhs(20,30)=0;
    lhs(20,31)=0;
    lhs(20,32)=clhs137;
    lhs(20,33)=0;
    lhs(20,34)=0;
    lhs(20,35)=clhs138;
    lhs(21,0)=0;
    lhs(21,1)=0;
    lhs(21,2)=0;
    lhs(21,3)=0;
    lhs(21,4)=0;
    lhs(21,5)=0;
    lhs(21,6)=0;
    lhs(21,7)=0;
    lhs(21,8)=0;
    lhs(21,9)=0;
    lhs(21,10)=0;
    lhs(21,11)=0;
    lhs(21,12)=-N1[3]*clhs11;
    lhs(21,13)=-N1[3]*clhs17;
    lhs(21,14)=-N1[3]*clhs23;
    lhs(21,15)=-N1[3]*clhs29;
    lhs(21,16)=-N1[3]*clhs35;
    lhs(21,17)=-N1[3]*clhs41;
    lhs(21,18)=-N1[3]*clhs47;
    lhs(21,19)=-N1[3]*clhs53;
    lhs(21,20)=-N1[3]*clhs59;
    lhs(21,21)=-N1[3]*clhs65;
    lhs(21,22)=-N1[3]*clhs71;
    lhs(21,23)=-N1[3]*clhs77;
    lhs(21,24)=clhs140;
    lhs(21,25)=0;
    lhs(21,26)=0;
    lhs(21,27)=clhs141;
    lhs(21,28)=0;
    lhs(21,29)=0;
    lhs(21,30)=clhs142;
    lhs(21,31)=0;
    lhs(21,32)=0;
    lhs(21,33)=clhs143;
    lhs(21,34)=0;
    lhs(21,35)=0;
    lhs(22,0)=0;
    lhs(22,1)=0;
    lhs(22,2)=0;
    lhs(22,3)=0;
    lhs(22,4)=0;
    lhs(22,5)=0;
    lhs(22,6)=0;
    lhs(22,7)=0;
    lhs(22,8)=0;
    lhs(22,9)=0;
    lhs(22,10)=0;
    lhs(22,11)=0;
    lhs(22,12)=-N1[3]*clhs84;
    lhs(22,13)=-N1[3]*clhs85;
    lhs(22,14)=-N1[3]*clhs86;
    lhs(22,15)=-N1[3]*clhs87;
    lhs(22,16)=-N1[3]*clhs88;
    lhs(22,17)=-N1[3]*clhs89;
    lhs(22,18)=-N1[3]*clhs90;
    lhs(22,19)=-N1[3]*clhs91;
    lhs(22,20)=-N1[3]*clhs92;
    lhs(22,21)=-N1[3]*clhs93;
    lhs(22,22)=-N1[3]*clhs94;
    lhs(22,23)=-N1[3]*clhs95;
    lhs(22,24)=0;
    lhs(22,25)=clhs140;
    lhs(22,26)=0;
    lhs(22,27)=0;
    lhs(22,28)=clhs141;
    lhs(22,29)=0;
    lhs(22,30)=0;
    lhs(22,31)=clhs142;
    lhs(22,32)=0;
    lhs(22,33)=0;
    lhs(22,34)=clhs143;
    lhs(22,35)=0;
    lhs(23,0)=0;
    lhs(23,1)=0;
    lhs(23,2)=0;
    lhs(23,3)=0;
    lhs(23,4)=0;
    lhs(23,5)=0;
    lhs(23,6)=0;
    lhs(23,7)=0;
    lhs(23,8)=0;
    lhs(23,9)=0;
    lhs(23,10)=0;
    lhs(23,11)=0;
    lhs(23,12)=-N1[3]*clhs97;
    lhs(23,13)=-N1[3]*clhs98;
    lhs(23,14)=-N1[3]*clhs99;
    lhs(23,15)=-N1[3]*clhs100;
    lhs(23,16)=-N1[3]*clhs101;
    lhs(23,17)=-N1[3]*clhs102;
    lhs(23,18)=-N1[3]*clhs103;
    lhs(23,19)=-N1[3]*clhs104;
    lhs(23,20)=-N1[3]*clhs105;
    lhs(23,21)=-N1[3]*clhs106;
    lhs(23,22)=-N1[3]*clhs107;
    lhs(23,23)=-N1[3]*clhs108;
    lhs(23,24)=0;
    lhs(23,25)=0;
    lhs(23,26)=clhs140;
    lhs(23,27)=0;
    lhs(23,28)=0;
    lhs(23,29)=clhs141;
    lhs(23,30)=0;
    lhs(23,31)=0;
    lhs(23,32)=clhs142;
    lhs(23,33)=0;
    lhs(23,34)=0;
    lhs(23,35)=clhs143;
    lhs(24,0)=-clhs145*clhs147;
    lhs(24,1)=-clhs147*clhs148;
    lhs(24,2)=-clhs147*clhs149;
    lhs(24,3)=-clhs147*clhs150;
    lhs(24,4)=-clhs147*clhs151;
    lhs(24,5)=-clhs147*clhs152;
    lhs(24,6)=-clhs147*clhs153;
    lhs(24,7)=-clhs147*clhs154;
    lhs(24,8)=-clhs147*clhs155;
    lhs(24,9)=-clhs147*clhs156;
    lhs(24,10)=-clhs147*clhs157;
    lhs(24,11)=-clhs147*clhs158;
    lhs(24,12)=-clhs1*clhs161 - clhs147*clhs160 - clhs159*DeltaNormals[0](0,0) - clhs162*clhs7;
    lhs(24,13)=-clhs12*clhs161 - clhs13*clhs162 - clhs147*clhs163 - clhs159*DeltaNormals[1](0,0);
    lhs(24,14)=-clhs147*clhs164 - clhs159*DeltaNormals[2](0,0) - clhs161*clhs18 - clhs162*clhs19;
    lhs(24,15)=-clhs147*clhs165 - clhs159*DeltaNormals[3](0,0) - clhs161*clhs24 - clhs162*clhs25;
    lhs(24,16)=-clhs147*clhs166 - clhs159*DeltaNormals[4](0,0) - clhs161*clhs30 - clhs162*clhs31;
    lhs(24,17)=-clhs147*clhs167 - clhs159*DeltaNormals[5](0,0) - clhs161*clhs36 - clhs162*clhs37;
    lhs(24,18)=-clhs147*clhs168 - clhs159*DeltaNormals[6](0,0) - clhs161*clhs42 - clhs162*clhs43;
    lhs(24,19)=-clhs147*clhs169 - clhs159*DeltaNormals[7](0,0) - clhs161*clhs48 - clhs162*clhs49;
    lhs(24,20)=-clhs147*clhs170 - clhs159*DeltaNormals[8](0,0) - clhs161*clhs54 - clhs162*clhs55;
    lhs(24,21)=-clhs147*clhs171 - clhs159*DeltaNormals[9](0,0) - clhs161*clhs60 - clhs162*clhs61;
    lhs(24,22)=-clhs147*clhs172 - clhs159*DeltaNormals[10](0,0) - clhs161*clhs66 - clhs162*clhs67;
    lhs(24,23)=-clhs147*clhs173 - clhs159*DeltaNormals[11](0,0) - clhs161*clhs72 - clhs162*clhs73;
    lhs(24,24)=0;
    lhs(24,25)=0;
    lhs(24,26)=0;
    lhs(24,27)=0;
    lhs(24,28)=0;
    lhs(24,29)=0;
    lhs(24,30)=0;
    lhs(24,31)=0;
    lhs(24,32)=0;
    lhs(24,33)=0;
    lhs(24,34)=0;
    lhs(24,35)=0;
    lhs(25,0)=-clhs145*clhs175;
    lhs(25,1)=-clhs148*clhs175;
    lhs(25,2)=-clhs149*clhs175;
    lhs(25,3)=-clhs150*clhs175;
    lhs(25,4)=-clhs151*clhs175;
    lhs(25,5)=-clhs152*clhs175;
    lhs(25,6)=-clhs153*clhs175;
    lhs(25,7)=-clhs154*clhs175;
    lhs(25,8)=-clhs155*clhs175;
    lhs(25,9)=-clhs156*clhs175;
    lhs(25,10)=-clhs157*clhs175;
    lhs(25,11)=-clhs158*clhs175;
    lhs(25,12)=-clhs1*clhs176 - clhs159*DeltaNormals[0](0,1) - clhs160*clhs175 - clhs177*clhs7;
    lhs(25,13)=-clhs12*clhs176 - clhs13*clhs177 - clhs159*DeltaNormals[1](0,1) - clhs163*clhs175;
    lhs(25,14)=-clhs159*DeltaNormals[2](0,1) - clhs164*clhs175 - clhs176*clhs18 - clhs177*clhs19;
    lhs(25,15)=-clhs159*DeltaNormals[3](0,1) - clhs165*clhs175 - clhs176*clhs24 - clhs177*clhs25;
    lhs(25,16)=-clhs159*DeltaNormals[4](0,1) - clhs166*clhs175 - clhs176*clhs30 - clhs177*clhs31;
    lhs(25,17)=-clhs159*DeltaNormals[5](0,1) - clhs167*clhs175 - clhs176*clhs36 - clhs177*clhs37;
    lhs(25,18)=-clhs159*DeltaNormals[6](0,1) - clhs168*clhs175 - clhs176*clhs42 - clhs177*clhs43;
    lhs(25,19)=-clhs159*DeltaNormals[7](0,1) - clhs169*clhs175 - clhs176*clhs48 - clhs177*clhs49;
    lhs(25,20)=-clhs159*DeltaNormals[8](0,1) - clhs170*clhs175 - clhs176*clhs54 - clhs177*clhs55;
    lhs(25,21)=-clhs159*DeltaNormals[9](0,1) - clhs171*clhs175 - clhs176*clhs60 - clhs177*clhs61;
    lhs(25,22)=-clhs159*DeltaNormals[10](0,1) - clhs172*clhs175 - clhs176*clhs66 - clhs177*clhs67;
    lhs(25,23)=-clhs159*DeltaNormals[11](0,1) - clhs173*clhs175 - clhs176*clhs72 - clhs177*clhs73;
    lhs(25,24)=0;
    lhs(25,25)=0;
    lhs(25,26)=0;
    lhs(25,27)=0;
    lhs(25,28)=0;
    lhs(25,29)=0;
    lhs(25,30)=0;
    lhs(25,31)=0;
    lhs(25,32)=0;
    lhs(25,33)=0;
    lhs(25,34)=0;
    lhs(25,35)=0;
    lhs(26,0)=-clhs145*clhs179;
    lhs(26,1)=-clhs148*clhs179;
    lhs(26,2)=-clhs149*clhs179;
    lhs(26,3)=-clhs150*clhs179;
    lhs(26,4)=-clhs151*clhs179;
    lhs(26,5)=-clhs152*clhs179;
    lhs(26,6)=-clhs153*clhs179;
    lhs(26,7)=-clhs154*clhs179;
    lhs(26,8)=-clhs155*clhs179;
    lhs(26,9)=-clhs156*clhs179;
    lhs(26,10)=-clhs157*clhs179;
    lhs(26,11)=-clhs158*clhs179;
    lhs(26,12)=-clhs1*clhs180 - clhs159*DeltaNormals[0](0,2) - clhs160*clhs179 - clhs181*clhs7;
    lhs(26,13)=-clhs12*clhs180 - clhs13*clhs181 - clhs159*DeltaNormals[1](0,2) - clhs163*clhs179;
    lhs(26,14)=-clhs159*DeltaNormals[2](0,2) - clhs164*clhs179 - clhs18*clhs180 - clhs181*clhs19;
    lhs(26,15)=-clhs159*DeltaNormals[3](0,2) - clhs165*clhs179 - clhs180*clhs24 - clhs181*clhs25;
    lhs(26,16)=-clhs159*DeltaNormals[4](0,2) - clhs166*clhs179 - clhs180*clhs30 - clhs181*clhs31;
    lhs(26,17)=-clhs159*DeltaNormals[5](0,2) - clhs167*clhs179 - clhs180*clhs36 - clhs181*clhs37;
    lhs(26,18)=-clhs159*DeltaNormals[6](0,2) - clhs168*clhs179 - clhs180*clhs42 - clhs181*clhs43;
    lhs(26,19)=-clhs159*DeltaNormals[7](0,2) - clhs169*clhs179 - clhs180*clhs48 - clhs181*clhs49;
    lhs(26,20)=-clhs159*DeltaNormals[8](0,2) - clhs170*clhs179 - clhs180*clhs54 - clhs181*clhs55;
    lhs(26,21)=-clhs159*DeltaNormals[9](0,2) - clhs171*clhs179 - clhs180*clhs60 - clhs181*clhs61;
    lhs(26,22)=-clhs159*DeltaNormals[10](0,2) - clhs172*clhs179 - clhs180*clhs66 - clhs181*clhs67;
    lhs(26,23)=-clhs159*DeltaNormals[11](0,2) - clhs173*clhs179 - clhs180*clhs72 - clhs181*clhs73;
    lhs(26,24)=0;
    lhs(26,25)=0;
    lhs(26,26)=0;
    lhs(26,27)=0;
    lhs(26,28)=0;
    lhs(26,29)=0;
    lhs(26,30)=0;
    lhs(26,31)=0;
    lhs(26,32)=0;
    lhs(26,33)=0;
    lhs(26,34)=0;
    lhs(26,35)=0;
    lhs(27,0)=-clhs145*clhs183;
    lhs(27,1)=-clhs148*clhs183;
    lhs(27,2)=-clhs149*clhs183;
    lhs(27,3)=-clhs150*clhs183;
    lhs(27,4)=-clhs151*clhs183;
    lhs(27,5)=-clhs152*clhs183;
    lhs(27,6)=-clhs153*clhs183;
    lhs(27,7)=-clhs154*clhs183;
    lhs(27,8)=-clhs155*clhs183;
    lhs(27,9)=-clhs156*clhs183;
    lhs(27,10)=-clhs157*clhs183;
    lhs(27,11)=-clhs158*clhs183;
    lhs(27,12)=-clhs1*clhs185 - clhs160*clhs183 - clhs184*DeltaNormals[0](1,0) - clhs186*clhs8;
    lhs(27,13)=-clhs12*clhs185 - clhs14*clhs186 - clhs163*clhs183 - clhs184*DeltaNormals[1](1,0);
    lhs(27,14)=-clhs164*clhs183 - clhs18*clhs185 - clhs184*DeltaNormals[2](1,0) - clhs186*clhs20;
    lhs(27,15)=-clhs165*clhs183 - clhs184*DeltaNormals[3](1,0) - clhs185*clhs24 - clhs186*clhs26;
    lhs(27,16)=-clhs166*clhs183 - clhs184*DeltaNormals[4](1,0) - clhs185*clhs30 - clhs186*clhs32;
    lhs(27,17)=-clhs167*clhs183 - clhs184*DeltaNormals[5](1,0) - clhs185*clhs36 - clhs186*clhs38;
    lhs(27,18)=-clhs168*clhs183 - clhs184*DeltaNormals[6](1,0) - clhs185*clhs42 - clhs186*clhs44;
    lhs(27,19)=-clhs169*clhs183 - clhs184*DeltaNormals[7](1,0) - clhs185*clhs48 - clhs186*clhs50;
    lhs(27,20)=-clhs170*clhs183 - clhs184*DeltaNormals[8](1,0) - clhs185*clhs54 - clhs186*clhs56;
    lhs(27,21)=-clhs171*clhs183 - clhs184*DeltaNormals[9](1,0) - clhs185*clhs60 - clhs186*clhs62;
    lhs(27,22)=-clhs172*clhs183 - clhs184*DeltaNormals[10](1,0) - clhs185*clhs66 - clhs186*clhs68;
    lhs(27,23)=-clhs173*clhs183 - clhs184*DeltaNormals[11](1,0) - clhs185*clhs72 - clhs186*clhs74;
    lhs(27,24)=0;
    lhs(27,25)=0;
    lhs(27,26)=0;
    lhs(27,27)=0;
    lhs(27,28)=0;
    lhs(27,29)=0;
    lhs(27,30)=0;
    lhs(27,31)=0;
    lhs(27,32)=0;
    lhs(27,33)=0;
    lhs(27,34)=0;
    lhs(27,35)=0;
    lhs(28,0)=-clhs145*clhs188;
    lhs(28,1)=-clhs148*clhs188;
    lhs(28,2)=-clhs149*clhs188;
    lhs(28,3)=-clhs150*clhs188;
    lhs(28,4)=-clhs151*clhs188;
    lhs(28,5)=-clhs152*clhs188;
    lhs(28,6)=-clhs153*clhs188;
    lhs(28,7)=-clhs154*clhs188;
    lhs(28,8)=-clhs155*clhs188;
    lhs(28,9)=-clhs156*clhs188;
    lhs(28,10)=-clhs157*clhs188;
    lhs(28,11)=-clhs158*clhs188;
    lhs(28,12)=-clhs1*clhs189 - clhs160*clhs188 - clhs184*DeltaNormals[0](1,1) - clhs190*clhs8;
    lhs(28,13)=-clhs12*clhs189 - clhs14*clhs190 - clhs163*clhs188 - clhs184*DeltaNormals[1](1,1);
    lhs(28,14)=-clhs164*clhs188 - clhs18*clhs189 - clhs184*DeltaNormals[2](1,1) - clhs190*clhs20;
    lhs(28,15)=-clhs165*clhs188 - clhs184*DeltaNormals[3](1,1) - clhs189*clhs24 - clhs190*clhs26;
    lhs(28,16)=-clhs166*clhs188 - clhs184*DeltaNormals[4](1,1) - clhs189*clhs30 - clhs190*clhs32;
    lhs(28,17)=-clhs167*clhs188 - clhs184*DeltaNormals[5](1,1) - clhs189*clhs36 - clhs190*clhs38;
    lhs(28,18)=-clhs168*clhs188 - clhs184*DeltaNormals[6](1,1) - clhs189*clhs42 - clhs190*clhs44;
    lhs(28,19)=-clhs169*clhs188 - clhs184*DeltaNormals[7](1,1) - clhs189*clhs48 - clhs190*clhs50;
    lhs(28,20)=-clhs170*clhs188 - clhs184*DeltaNormals[8](1,1) - clhs189*clhs54 - clhs190*clhs56;
    lhs(28,21)=-clhs171*clhs188 - clhs184*DeltaNormals[9](1,1) - clhs189*clhs60 - clhs190*clhs62;
    lhs(28,22)=-clhs172*clhs188 - clhs184*DeltaNormals[10](1,1) - clhs189*clhs66 - clhs190*clhs68;
    lhs(28,23)=-clhs173*clhs188 - clhs184*DeltaNormals[11](1,1) - clhs189*clhs72 - clhs190*clhs74;
    lhs(28,24)=0;
    lhs(28,25)=0;
    lhs(28,26)=0;
    lhs(28,27)=0;
    lhs(28,28)=0;
    lhs(28,29)=0;
    lhs(28,30)=0;
    lhs(28,31)=0;
    lhs(28,32)=0;
    lhs(28,33)=0;
    lhs(28,34)=0;
    lhs(28,35)=0;
    lhs(29,0)=-clhs145*clhs192;
    lhs(29,1)=-clhs148*clhs192;
    lhs(29,2)=-clhs149*clhs192;
    lhs(29,3)=-clhs150*clhs192;
    lhs(29,4)=-clhs151*clhs192;
    lhs(29,5)=-clhs152*clhs192;
    lhs(29,6)=-clhs153*clhs192;
    lhs(29,7)=-clhs154*clhs192;
    lhs(29,8)=-clhs155*clhs192;
    lhs(29,9)=-clhs156*clhs192;
    lhs(29,10)=-clhs157*clhs192;
    lhs(29,11)=-clhs158*clhs192;
    lhs(29,12)=-clhs1*clhs193 - clhs160*clhs192 - clhs184*DeltaNormals[0](1,2) - clhs194*clhs8;
    lhs(29,13)=-clhs12*clhs193 - clhs14*clhs194 - clhs163*clhs192 - clhs184*DeltaNormals[1](1,2);
    lhs(29,14)=-clhs164*clhs192 - clhs18*clhs193 - clhs184*DeltaNormals[2](1,2) - clhs194*clhs20;
    lhs(29,15)=-clhs165*clhs192 - clhs184*DeltaNormals[3](1,2) - clhs193*clhs24 - clhs194*clhs26;
    lhs(29,16)=-clhs166*clhs192 - clhs184*DeltaNormals[4](1,2) - clhs193*clhs30 - clhs194*clhs32;
    lhs(29,17)=-clhs167*clhs192 - clhs184*DeltaNormals[5](1,2) - clhs193*clhs36 - clhs194*clhs38;
    lhs(29,18)=-clhs168*clhs192 - clhs184*DeltaNormals[6](1,2) - clhs193*clhs42 - clhs194*clhs44;
    lhs(29,19)=-clhs169*clhs192 - clhs184*DeltaNormals[7](1,2) - clhs193*clhs48 - clhs194*clhs50;
    lhs(29,20)=-clhs170*clhs192 - clhs184*DeltaNormals[8](1,2) - clhs193*clhs54 - clhs194*clhs56;
    lhs(29,21)=-clhs171*clhs192 - clhs184*DeltaNormals[9](1,2) - clhs193*clhs60 - clhs194*clhs62;
    lhs(29,22)=-clhs172*clhs192 - clhs184*DeltaNormals[10](1,2) - clhs193*clhs66 - clhs194*clhs68;
    lhs(29,23)=-clhs173*clhs192 - clhs184*DeltaNormals[11](1,2) - clhs193*clhs72 - clhs194*clhs74;
    lhs(29,24)=0;
    lhs(29,25)=0;
    lhs(29,26)=0;
    lhs(29,27)=0;
    lhs(29,28)=0;
    lhs(29,29)=0;
    lhs(29,30)=0;
    lhs(29,31)=0;
    lhs(29,32)=0;
    lhs(29,33)=0;
    lhs(29,34)=0;
    lhs(29,35)=0;
    lhs(30,0)=-clhs145*clhs196;
    lhs(30,1)=-clhs148*clhs196;
    lhs(30,2)=-clhs149*clhs196;
    lhs(30,3)=-clhs150*clhs196;
    lhs(30,4)=-clhs151*clhs196;
    lhs(30,5)=-clhs152*clhs196;
    lhs(30,6)=-clhs153*clhs196;
    lhs(30,7)=-clhs154*clhs196;
    lhs(30,8)=-clhs155*clhs196;
    lhs(30,9)=-clhs156*clhs196;
    lhs(30,10)=-clhs157*clhs196;
    lhs(30,11)=-clhs158*clhs196;
    lhs(30,12)=-clhs1*clhs198 - clhs160*clhs196 - clhs197*DeltaNormals[0](2,0) - clhs199*clhs9;
    lhs(30,13)=-clhs12*clhs198 - clhs15*clhs199 - clhs163*clhs196 - clhs197*DeltaNormals[1](2,0);
    lhs(30,14)=-clhs164*clhs196 - clhs18*clhs198 - clhs197*DeltaNormals[2](2,0) - clhs199*clhs21;
    lhs(30,15)=-clhs165*clhs196 - clhs197*DeltaNormals[3](2,0) - clhs198*clhs24 - clhs199*clhs27;
    lhs(30,16)=-clhs166*clhs196 - clhs197*DeltaNormals[4](2,0) - clhs198*clhs30 - clhs199*clhs33;
    lhs(30,17)=-clhs167*clhs196 - clhs197*DeltaNormals[5](2,0) - clhs198*clhs36 - clhs199*clhs39;
    lhs(30,18)=-clhs168*clhs196 - clhs197*DeltaNormals[6](2,0) - clhs198*clhs42 - clhs199*clhs45;
    lhs(30,19)=-clhs169*clhs196 - clhs197*DeltaNormals[7](2,0) - clhs198*clhs48 - clhs199*clhs51;
    lhs(30,20)=-clhs170*clhs196 - clhs197*DeltaNormals[8](2,0) - clhs198*clhs54 - clhs199*clhs57;
    lhs(30,21)=-clhs171*clhs196 - clhs197*DeltaNormals[9](2,0) - clhs198*clhs60 - clhs199*clhs63;
    lhs(30,22)=-clhs172*clhs196 - clhs197*DeltaNormals[10](2,0) - clhs198*clhs66 - clhs199*clhs69;
    lhs(30,23)=-clhs173*clhs196 - clhs197*DeltaNormals[11](2,0) - clhs198*clhs72 - clhs199*clhs75;
    lhs(30,24)=0;
    lhs(30,25)=0;
    lhs(30,26)=0;
    lhs(30,27)=0;
    lhs(30,28)=0;
    lhs(30,29)=0;
    lhs(30,30)=0;
    lhs(30,31)=0;
    lhs(30,32)=0;
    lhs(30,33)=0;
    lhs(30,34)=0;
    lhs(30,35)=0;
    lhs(31,0)=-clhs145*clhs201;
    lhs(31,1)=-clhs148*clhs201;
    lhs(31,2)=-clhs149*clhs201;
    lhs(31,3)=-clhs150*clhs201;
    lhs(31,4)=-clhs151*clhs201;
    lhs(31,5)=-clhs152*clhs201;
    lhs(31,6)=-clhs153*clhs201;
    lhs(31,7)=-clhs154*clhs201;
    lhs(31,8)=-clhs155*clhs201;
    lhs(31,9)=-clhs156*clhs201;
    lhs(31,10)=-clhs157*clhs201;
    lhs(31,11)=-clhs158*clhs201;
    lhs(31,12)=-clhs1*clhs202 - clhs160*clhs201 - clhs197*DeltaNormals[0](2,1) - clhs203*clhs9;
    lhs(31,13)=-clhs12*clhs202 - clhs15*clhs203 - clhs163*clhs201 - clhs197*DeltaNormals[1](2,1);
    lhs(31,14)=-clhs164*clhs201 - clhs18*clhs202 - clhs197*DeltaNormals[2](2,1) - clhs203*clhs21;
    lhs(31,15)=-clhs165*clhs201 - clhs197*DeltaNormals[3](2,1) - clhs202*clhs24 - clhs203*clhs27;
    lhs(31,16)=-clhs166*clhs201 - clhs197*DeltaNormals[4](2,1) - clhs202*clhs30 - clhs203*clhs33;
    lhs(31,17)=-clhs167*clhs201 - clhs197*DeltaNormals[5](2,1) - clhs202*clhs36 - clhs203*clhs39;
    lhs(31,18)=-clhs168*clhs201 - clhs197*DeltaNormals[6](2,1) - clhs202*clhs42 - clhs203*clhs45;
    lhs(31,19)=-clhs169*clhs201 - clhs197*DeltaNormals[7](2,1) - clhs202*clhs48 - clhs203*clhs51;
    lhs(31,20)=-clhs170*clhs201 - clhs197*DeltaNormals[8](2,1) - clhs202*clhs54 - clhs203*clhs57;
    lhs(31,21)=-clhs171*clhs201 - clhs197*DeltaNormals[9](2,1) - clhs202*clhs60 - clhs203*clhs63;
    lhs(31,22)=-clhs172*clhs201 - clhs197*DeltaNormals[10](2,1) - clhs202*clhs66 - clhs203*clhs69;
    lhs(31,23)=-clhs173*clhs201 - clhs197*DeltaNormals[11](2,1) - clhs202*clhs72 - clhs203*clhs75;
    lhs(31,24)=0;
    lhs(31,25)=0;
    lhs(31,26)=0;
    lhs(31,27)=0;
    lhs(31,28)=0;
    lhs(31,29)=0;
    lhs(31,30)=0;
    lhs(31,31)=0;
    lhs(31,32)=0;
    lhs(31,33)=0;
    lhs(31,34)=0;
    lhs(31,35)=0;
    lhs(32,0)=-clhs145*clhs205;
    lhs(32,1)=-clhs148*clhs205;
    lhs(32,2)=-clhs149*clhs205;
    lhs(32,3)=-clhs150*clhs205;
    lhs(32,4)=-clhs151*clhs205;
    lhs(32,5)=-clhs152*clhs205;
    lhs(32,6)=-clhs153*clhs205;
    lhs(32,7)=-clhs154*clhs205;
    lhs(32,8)=-clhs155*clhs205;
    lhs(32,9)=-clhs156*clhs205;
    lhs(32,10)=-clhs157*clhs205;
    lhs(32,11)=-clhs158*clhs205;
    lhs(32,12)=-clhs1*clhs206 - clhs160*clhs205 - clhs197*DeltaNormals[0](2,2) - clhs207*clhs9;
    lhs(32,13)=-clhs12*clhs206 - clhs15*clhs207 - clhs163*clhs205 - clhs197*DeltaNormals[1](2,2);
    lhs(32,14)=-clhs164*clhs205 - clhs18*clhs206 - clhs197*DeltaNormals[2](2,2) - clhs207*clhs21;
    lhs(32,15)=-clhs165*clhs205 - clhs197*DeltaNormals[3](2,2) - clhs206*clhs24 - clhs207*clhs27;
    lhs(32,16)=-clhs166*clhs205 - clhs197*DeltaNormals[4](2,2) - clhs206*clhs30 - clhs207*clhs33;
    lhs(32,17)=-clhs167*clhs205 - clhs197*DeltaNormals[5](2,2) - clhs206*clhs36 - clhs207*clhs39;
    lhs(32,18)=-clhs168*clhs205 - clhs197*DeltaNormals[6](2,2) - clhs206*clhs42 - clhs207*clhs45;
    lhs(32,19)=-clhs169*clhs205 - clhs197*DeltaNormals[7](2,2) - clhs206*clhs48 - clhs207*clhs51;
    lhs(32,20)=-clhs170*clhs205 - clhs197*DeltaNormals[8](2,2) - clhs206*clhs54 - clhs207*clhs57;
    lhs(32,21)=-clhs171*clhs205 - clhs197*DeltaNormals[9](2,2) - clhs206*clhs60 - clhs207*clhs63;
    lhs(32,22)=-clhs172*clhs205 - clhs197*DeltaNormals[10](2,2) - clhs206*clhs66 - clhs207*clhs69;
    lhs(32,23)=-clhs173*clhs205 - clhs197*DeltaNormals[11](2,2) - clhs206*clhs72 - clhs207*clhs75;
    lhs(32,24)=0;
    lhs(32,25)=0;
    lhs(32,26)=0;
    lhs(32,27)=0;
    lhs(32,28)=0;
    lhs(32,29)=0;
    lhs(32,30)=0;
    lhs(32,31)=0;
    lhs(32,32)=0;
    lhs(32,33)=0;
    lhs(32,34)=0;
    lhs(32,35)=0;
    lhs(33,0)=-clhs145*clhs209;
    lhs(33,1)=-clhs148*clhs209;
    lhs(33,2)=-clhs149*clhs209;
    lhs(33,3)=-clhs150*clhs209;
    lhs(33,4)=-clhs151*clhs209;
    lhs(33,5)=-clhs152*clhs209;
    lhs(33,6)=-clhs153*clhs209;
    lhs(33,7)=-clhs154*clhs209;
    lhs(33,8)=-clhs155*clhs209;
    lhs(33,9)=-clhs156*clhs209;
    lhs(33,10)=-clhs157*clhs209;
    lhs(33,11)=-clhs158*clhs209;
    lhs(33,12)=-clhs1*clhs211 - clhs10*clhs212 - clhs160*clhs209 - clhs210*DeltaNormals[0](3,0);
    lhs(33,13)=-clhs12*clhs211 - clhs16*clhs212 - clhs163*clhs209 - clhs210*DeltaNormals[1](3,0);
    lhs(33,14)=-clhs164*clhs209 - clhs18*clhs211 - clhs210*DeltaNormals[2](3,0) - clhs212*clhs22;
    lhs(33,15)=-clhs165*clhs209 - clhs210*DeltaNormals[3](3,0) - clhs211*clhs24 - clhs212*clhs28;
    lhs(33,16)=-clhs166*clhs209 - clhs210*DeltaNormals[4](3,0) - clhs211*clhs30 - clhs212*clhs34;
    lhs(33,17)=-clhs167*clhs209 - clhs210*DeltaNormals[5](3,0) - clhs211*clhs36 - clhs212*clhs40;
    lhs(33,18)=-clhs168*clhs209 - clhs210*DeltaNormals[6](3,0) - clhs211*clhs42 - clhs212*clhs46;
    lhs(33,19)=-clhs169*clhs209 - clhs210*DeltaNormals[7](3,0) - clhs211*clhs48 - clhs212*clhs52;
    lhs(33,20)=-clhs170*clhs209 - clhs210*DeltaNormals[8](3,0) - clhs211*clhs54 - clhs212*clhs58;
    lhs(33,21)=-clhs171*clhs209 - clhs210*DeltaNormals[9](3,0) - clhs211*clhs60 - clhs212*clhs64;
    lhs(33,22)=-clhs172*clhs209 - clhs210*DeltaNormals[10](3,0) - clhs211*clhs66 - clhs212*clhs70;
    lhs(33,23)=-clhs173*clhs209 - clhs210*DeltaNormals[11](3,0) - clhs211*clhs72 - clhs212*clhs76;
    lhs(33,24)=0;
    lhs(33,25)=0;
    lhs(33,26)=0;
    lhs(33,27)=0;
    lhs(33,28)=0;
    lhs(33,29)=0;
    lhs(33,30)=0;
    lhs(33,31)=0;
    lhs(33,32)=0;
    lhs(33,33)=0;
    lhs(33,34)=0;
    lhs(33,35)=0;
    lhs(34,0)=-clhs145*clhs214;
    lhs(34,1)=-clhs148*clhs214;
    lhs(34,2)=-clhs149*clhs214;
    lhs(34,3)=-clhs150*clhs214;
    lhs(34,4)=-clhs151*clhs214;
    lhs(34,5)=-clhs152*clhs214;
    lhs(34,6)=-clhs153*clhs214;
    lhs(34,7)=-clhs154*clhs214;
    lhs(34,8)=-clhs155*clhs214;
    lhs(34,9)=-clhs156*clhs214;
    lhs(34,10)=-clhs157*clhs214;
    lhs(34,11)=-clhs158*clhs214;
    lhs(34,12)=-clhs1*clhs215 - clhs10*clhs216 - clhs160*clhs214 - clhs210*DeltaNormals[0](3,1);
    lhs(34,13)=-clhs12*clhs215 - clhs16*clhs216 - clhs163*clhs214 - clhs210*DeltaNormals[1](3,1);
    lhs(34,14)=-clhs164*clhs214 - clhs18*clhs215 - clhs210*DeltaNormals[2](3,1) - clhs216*clhs22;
    lhs(34,15)=-clhs165*clhs214 - clhs210*DeltaNormals[3](3,1) - clhs215*clhs24 - clhs216*clhs28;
    lhs(34,16)=-clhs166*clhs214 - clhs210*DeltaNormals[4](3,1) - clhs215*clhs30 - clhs216*clhs34;
    lhs(34,17)=-clhs167*clhs214 - clhs210*DeltaNormals[5](3,1) - clhs215*clhs36 - clhs216*clhs40;
    lhs(34,18)=-clhs168*clhs214 - clhs210*DeltaNormals[6](3,1) - clhs215*clhs42 - clhs216*clhs46;
    lhs(34,19)=-clhs169*clhs214 - clhs210*DeltaNormals[7](3,1) - clhs215*clhs48 - clhs216*clhs52;
    lhs(34,20)=-clhs170*clhs214 - clhs210*DeltaNormals[8](3,1) - clhs215*clhs54 - clhs216*clhs58;
    lhs(34,21)=-clhs171*clhs214 - clhs210*DeltaNormals[9](3,1) - clhs215*clhs60 - clhs216*clhs64;
    lhs(34,22)=-clhs172*clhs214 - clhs210*DeltaNormals[10](3,1) - clhs215*clhs66 - clhs216*clhs70;
    lhs(34,23)=-clhs173*clhs214 - clhs210*DeltaNormals[11](3,1) - clhs215*clhs72 - clhs216*clhs76;
    lhs(34,24)=0;
    lhs(34,25)=0;
    lhs(34,26)=0;
    lhs(34,27)=0;
    lhs(34,28)=0;
    lhs(34,29)=0;
    lhs(34,30)=0;
    lhs(34,31)=0;
    lhs(34,32)=0;
    lhs(34,33)=0;
    lhs(34,34)=0;
    lhs(34,35)=0;
    lhs(35,0)=-clhs145*clhs218;
    lhs(35,1)=-clhs148*clhs218;
    lhs(35,2)=-clhs149*clhs218;
    lhs(35,3)=-clhs150*clhs218;
    lhs(35,4)=-clhs151*clhs218;
    lhs(35,5)=-clhs152*clhs218;
    lhs(35,6)=-clhs153*clhs218;
    lhs(35,7)=-clhs154*clhs218;
    lhs(35,8)=-clhs155*clhs218;
    lhs(35,9)=-clhs156*clhs218;
    lhs(35,10)=-clhs157*clhs218;
    lhs(35,11)=-clhs158*clhs218;
    lhs(35,12)=-clhs1*clhs219 - clhs10*clhs220 - clhs160*clhs218 - clhs210*DeltaNormals[0](3,2);
    lhs(35,13)=-clhs12*clhs219 - clhs16*clhs220 - clhs163*clhs218 - clhs210*DeltaNormals[1](3,2);
    lhs(35,14)=-clhs164*clhs218 - clhs18*clhs219 - clhs210*DeltaNormals[2](3,2) - clhs22*clhs220;
    lhs(35,15)=-clhs165*clhs218 - clhs210*DeltaNormals[3](3,2) - clhs219*clhs24 - clhs220*clhs28;
    lhs(35,16)=-clhs166*clhs218 - clhs210*DeltaNormals[4](3,2) - clhs219*clhs30 - clhs220*clhs34;
    lhs(35,17)=-clhs167*clhs218 - clhs210*DeltaNormals[5](3,2) - clhs219*clhs36 - clhs220*clhs40;
    lhs(35,18)=-clhs168*clhs218 - clhs210*DeltaNormals[6](3,2) - clhs219*clhs42 - clhs220*clhs46;
    lhs(35,19)=-clhs169*clhs218 - clhs210*DeltaNormals[7](3,2) - clhs219*clhs48 - clhs220*clhs52;
    lhs(35,20)=-clhs170*clhs218 - clhs210*DeltaNormals[8](3,2) - clhs219*clhs54 - clhs220*clhs58;
    lhs(35,21)=-clhs171*clhs218 - clhs210*DeltaNormals[9](3,2) - clhs219*clhs60 - clhs220*clhs64;
    lhs(35,22)=-clhs172*clhs218 - clhs210*DeltaNormals[10](3,2) - clhs219*clhs66 - clhs220*clhs70;
    lhs(35,23)=-clhs173*clhs218 - clhs210*DeltaNormals[11](3,2) - clhs219*clhs72 - clhs220*clhs76;
    lhs(35,24)=0;
    lhs(35,25)=0;
    lhs(35,26)=0;
    lhs(35,27)=0;
    lhs(35,28)=0;
    lhs(35,29)=0;
    lhs(35,30)=0;
    lhs(35,31)=0;
    lhs(35,32)=0;
    lhs(35,33)=0;
    lhs(35,34)=0;
    lhs(35,35)=0;

    
    return lhs;
}

    /***********************************************************************************/
    /***********************************************************************************/
    
    static inline bounded_matrix<double,36,36> ComputeGaussPointStickLHS(
        const array_1d<double,4> N1, 
        const array_1d<double,4> N2, 
        const array_1d<double,4> Phi, 
        const double detJ, 
        const double mu, 
        const ContactData<3,4>& rContactData
        )
{
    bounded_matrix<double,36,36> lhs;

    const bounded_matrix<double, 4, 3> normalslave = rContactData.Normal_s;
    const bounded_matrix<double, 4, 3> tan1slave   = rContactData.Tangent_xi_s;
    const bounded_matrix<double, 4, 3> tan2slave   = rContactData.Tangent_eta_s;
    const bounded_matrix<double, 4, 3> lm          = rContactData.LagrangeMultipliers;
    const double Dt              = rContactData.Dt;
    
    const bounded_matrix<double, 4, 3> v1 = rContactData.v1;
    const bounded_matrix<double, 4, 3> v2 = rContactData.v2;
    
    const std::vector<double> DeltaJs = rContactData.DeltaJ_s;
    const std::vector<array_1d<double,4>> DeltaPhi = rContactData.DeltaPhi;
    const std::vector<bounded_matrix<double, 4, 3>> DeltaNormals     = rContactData.Delta_Normal_s;
    const std::vector<bounded_matrix<double, 4, 3>> Deltatangentxis  = rContactData.Delta_Tangent_xi_s;
    const std::vector<bounded_matrix<double, 4, 3>> Deltatangentetas = rContactData.Delta_Tangent_eta_s;

    const double clhs0 =     1.0/Dt;
    const double clhs1 =     Phi[0]; // PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs2 =     detJ; // DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs3 =     N2[0]*clhs0*clhs1*clhs2;
    const double clhs4 =     tan1slave(0,0); // TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs5 =     tan1slave(1,0); // TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs6 =     tan1slave(2,0); // TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs7 =     tan1slave(3,0); // TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs8 =     N1[0]*clhs4 + N1[1]*clhs5 + N1[2]*clhs6 + N1[3]*clhs7;
    const double clhs9 =     tan2slave(0,0); // TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs10 =     tan2slave(1,0); // TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs11 =     tan2slave(2,0); // TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs12 =     tan2slave(3,0); // TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs13 =     N1[0]*clhs9 + N1[1]*clhs10 + N1[2]*clhs11 + N1[3]*clhs12;
    const double clhs14 =     clhs13*clhs9 + clhs4*clhs8;
    const double clhs15 =     tan1slave(0,1); // TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs16 =     tan1slave(1,1); // TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs17 =     tan1slave(2,1); // TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs18 =     tan1slave(3,1); // TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs19 =     N1[0]*clhs15 + N1[1]*clhs16 + N1[2]*clhs17 + N1[3]*clhs18;
    const double clhs20 =     tan2slave(0,1); // TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs21 =     tan2slave(1,1); // TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs22 =     tan2slave(2,1); // TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs23 =     tan2slave(3,1); // TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs24 =     N1[0]*clhs20 + N1[1]*clhs21 + N1[2]*clhs22 + N1[3]*clhs23;
    const double clhs25 =     clhs19*clhs4 + clhs24*clhs9;
    const double clhs26 =     tan1slave(0,2); // TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs27 =     tan1slave(1,2); // TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs28 =     tan1slave(2,2); // TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs29 =     tan1slave(3,2); // TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs30 =     N1[0]*clhs26 + N1[1]*clhs27 + N1[2]*clhs28 + N1[3]*clhs29;
    const double clhs31 =     tan2slave(0,2); // TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs32 =     tan2slave(1,2); // TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs33 =     tan2slave(2,2); // TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs34 =     tan2slave(3,2); // TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs35 =     N1[0]*clhs31 + N1[1]*clhs32 + N1[2]*clhs33 + N1[3]*clhs34;
    const double clhs36 =     clhs30*clhs4 + clhs35*clhs9;
    const double clhs37 =     N2[1]*clhs0*clhs1*clhs2;
    const double clhs38 =     N2[2]*clhs0*clhs1*clhs2;
    const double clhs39 =     N2[3]*clhs0*clhs1*clhs2;
    const double clhs40 =     Deltatangentxis[0](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs41 =     N1[0]*(Dt*v1(0,0)) + N1[1]*(Dt*v1(1,0)) + N1[2]*(Dt*v1(2,0)) + N1[3]*(Dt*v1(3,0)) - N2[0]*(Dt*v2(0,0)) - N2[1]*(Dt*v2(1,0)) - N2[2]*(Dt*v2(2,0)) - N2[3]*(Dt*v2(3,0));
    const double clhs42 =     N1[0]*(Dt*v1(0,1)) + N1[1]*(Dt*v1(1,1)) + N1[2]*(Dt*v1(2,1)) + N1[3]*(Dt*v1(3,1)) - N2[0]*(Dt*v2(0,1)) - N2[1]*(Dt*v2(1,1)) - N2[2]*(Dt*v2(2,1)) - N2[3]*(Dt*v2(3,1));
    const double clhs43 =     N1[0]*(Dt*v1(0,2)) + N1[1]*(Dt*v1(1,2)) + N1[2]*(Dt*v1(2,2)) + N1[3]*(Dt*v1(3,2)) - N2[0]*(Dt*v2(0,2)) - N2[1]*(Dt*v2(1,2)) - N2[2]*(Dt*v2(2,2)) - N2[3]*(Dt*v2(3,2));
    const double clhs44 =     clhs19*clhs42 + clhs30*clhs43 + clhs41*clhs8;
    const double clhs45 =     clhs1*clhs2*clhs44;
    const double clhs46 =     DeltaJs[0]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs47 =     clhs1*clhs4*clhs44;
    const double clhs48 =     DeltaPhi[0][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs49 =     clhs2*clhs4*clhs44;
    const double clhs50 =     Deltatangentetas[0](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs51 =     clhs13*clhs41 + clhs24*clhs42 + clhs35*clhs43;
    const double clhs52 =     clhs1*clhs2*clhs51;
    const double clhs53 =     clhs1*clhs51*clhs9;
    const double clhs54 =     clhs2*clhs51*clhs9;
    const double clhs55 =     Deltatangentxis[0](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs56 =     Deltatangentxis[0](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs57 =     Deltatangentxis[0](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs58 =     Deltatangentxis[0](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs59 =     Deltatangentxis[0](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs60 =     Deltatangentxis[0](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs61 =     Deltatangentxis[0](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs62 =     Deltatangentxis[0](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs63 =     Deltatangentxis[0](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs64 =     Deltatangentxis[0](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs65 =     Deltatangentxis[0](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs66 =     N1[0]*clhs8 + clhs41*(N1[0]*clhs40 + N1[1]*clhs55 + N1[2]*clhs56 + N1[3]*clhs57) + clhs42*(N1[0]*clhs58 + N1[1]*clhs59 + N1[2]*clhs60 + N1[3]*clhs61) + clhs43*(N1[0]*clhs62 + N1[1]*clhs63 + N1[2]*clhs64 + N1[3]*clhs65);
    const double clhs67 =     clhs1*clhs2*clhs66;
    const double clhs68 =     Deltatangentetas[0](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs69 =     Deltatangentetas[0](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs70 =     Deltatangentetas[0](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs71 =     Deltatangentetas[0](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs72 =     Deltatangentetas[0](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs73 =     Deltatangentetas[0](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs74 =     Deltatangentetas[0](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs75 =     Deltatangentetas[0](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs76 =     Deltatangentetas[0](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs77 =     Deltatangentetas[0](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs78 =     Deltatangentetas[0](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs79 =     N1[0]*clhs13 + clhs41*(N1[0]*clhs50 + N1[1]*clhs68 + N1[2]*clhs69 + N1[3]*clhs70) + clhs42*(N1[0]*clhs71 + N1[1]*clhs72 + N1[2]*clhs73 + N1[3]*clhs74) + clhs43*(N1[0]*clhs75 + N1[1]*clhs76 + N1[2]*clhs77 + N1[3]*clhs78);
    const double clhs80 =     clhs1*clhs2*clhs79;
    const double clhs81 =     Deltatangentxis[1](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs82 =     DeltaJs[1]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs83 =     DeltaPhi[1][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs84 =     Deltatangentetas[1](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs85 =     Deltatangentxis[1](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs86 =     Deltatangentxis[1](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs87 =     Deltatangentxis[1](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs88 =     Deltatangentxis[1](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs89 =     Deltatangentxis[1](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs90 =     Deltatangentxis[1](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs91 =     Deltatangentxis[1](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs92 =     Deltatangentxis[1](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs93 =     Deltatangentxis[1](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs94 =     Deltatangentxis[1](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs95 =     Deltatangentxis[1](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs96 =     N1[0]*clhs19 + clhs41*(N1[0]*clhs81 + N1[1]*clhs85 + N1[2]*clhs86 + N1[3]*clhs87) + clhs42*(N1[0]*clhs88 + N1[1]*clhs89 + N1[2]*clhs90 + N1[3]*clhs91) + clhs43*(N1[0]*clhs92 + N1[1]*clhs93 + N1[2]*clhs94 + N1[3]*clhs95);
    const double clhs97 =     clhs1*clhs2*clhs96;
    const double clhs98 =     Deltatangentetas[1](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs99 =     Deltatangentetas[1](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs100 =     Deltatangentetas[1](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs101 =     Deltatangentetas[1](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs102 =     Deltatangentetas[1](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs103 =     Deltatangentetas[1](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs104 =     Deltatangentetas[1](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs105 =     Deltatangentetas[1](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs106 =     Deltatangentetas[1](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs107 =     Deltatangentetas[1](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs108 =     Deltatangentetas[1](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs109 =     N1[0]*clhs24 + clhs41*(N1[0]*clhs84 + N1[1]*clhs98 + N1[2]*clhs99 + N1[3]*clhs100) + clhs42*(N1[0]*clhs101 + N1[1]*clhs102 + N1[2]*clhs103 + N1[3]*clhs104) + clhs43*(N1[0]*clhs105 + N1[1]*clhs106 + N1[2]*clhs107 + N1[3]*clhs108);
    const double clhs110 =     clhs1*clhs109*clhs2;
    const double clhs111 =     Deltatangentxis[2](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs112 =     DeltaJs[2]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs113 =     DeltaPhi[2][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs114 =     Deltatangentetas[2](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs115 =     Deltatangentxis[2](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs116 =     Deltatangentxis[2](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs117 =     Deltatangentxis[2](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs118 =     Deltatangentxis[2](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs119 =     Deltatangentxis[2](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs120 =     Deltatangentxis[2](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs121 =     Deltatangentxis[2](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs122 =     Deltatangentxis[2](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs123 =     Deltatangentxis[2](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs124 =     Deltatangentxis[2](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs125 =     Deltatangentxis[2](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs126 =     N1[0]*clhs30 + clhs41*(N1[0]*clhs111 + N1[1]*clhs115 + N1[2]*clhs116 + N1[3]*clhs117) + clhs42*(N1[0]*clhs118 + N1[1]*clhs119 + N1[2]*clhs120 + N1[3]*clhs121) + clhs43*(N1[0]*clhs122 + N1[1]*clhs123 + N1[2]*clhs124 + N1[3]*clhs125);
    const double clhs127 =     clhs1*clhs126*clhs2;
    const double clhs128 =     Deltatangentetas[2](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs129 =     Deltatangentetas[2](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs130 =     Deltatangentetas[2](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs131 =     Deltatangentetas[2](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs132 =     Deltatangentetas[2](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs133 =     Deltatangentetas[2](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs134 =     Deltatangentetas[2](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs135 =     Deltatangentetas[2](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs136 =     Deltatangentetas[2](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs137 =     Deltatangentetas[2](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs138 =     Deltatangentetas[2](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs139 =     N1[0]*clhs35 + clhs41*(N1[0]*clhs114 + N1[1]*clhs128 + N1[2]*clhs129 + N1[3]*clhs130) + clhs42*(N1[0]*clhs131 + N1[1]*clhs132 + N1[2]*clhs133 + N1[3]*clhs134) + clhs43*(N1[0]*clhs135 + N1[1]*clhs136 + N1[2]*clhs137 + N1[3]*clhs138);
    const double clhs140 =     clhs1*clhs139*clhs2;
    const double clhs141 =     Deltatangentxis[3](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs142 =     DeltaJs[3]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs143 =     DeltaPhi[3][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs144 =     Deltatangentetas[3](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs145 =     Deltatangentxis[3](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs146 =     Deltatangentxis[3](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs147 =     Deltatangentxis[3](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs148 =     Deltatangentxis[3](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs149 =     Deltatangentxis[3](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs150 =     Deltatangentxis[3](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs151 =     Deltatangentxis[3](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs152 =     Deltatangentxis[3](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs153 =     Deltatangentxis[3](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs154 =     Deltatangentxis[3](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs155 =     Deltatangentxis[3](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs156 =     N1[1]*clhs8 + clhs41*(N1[0]*clhs141 + N1[1]*clhs145 + N1[2]*clhs146 + N1[3]*clhs147) + clhs42*(N1[0]*clhs148 + N1[1]*clhs149 + N1[2]*clhs150 + N1[3]*clhs151) + clhs43*(N1[0]*clhs152 + N1[1]*clhs153 + N1[2]*clhs154 + N1[3]*clhs155);
    const double clhs157 =     clhs1*clhs156*clhs2;
    const double clhs158 =     Deltatangentetas[3](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs159 =     Deltatangentetas[3](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs160 =     Deltatangentetas[3](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs161 =     Deltatangentetas[3](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs162 =     Deltatangentetas[3](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs163 =     Deltatangentetas[3](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs164 =     Deltatangentetas[3](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs165 =     Deltatangentetas[3](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs166 =     Deltatangentetas[3](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs167 =     Deltatangentetas[3](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs168 =     Deltatangentetas[3](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs169 =     N1[1]*clhs13 + clhs41*(N1[0]*clhs144 + N1[1]*clhs158 + N1[2]*clhs159 + N1[3]*clhs160) + clhs42*(N1[0]*clhs161 + N1[1]*clhs162 + N1[2]*clhs163 + N1[3]*clhs164) + clhs43*(N1[0]*clhs165 + N1[1]*clhs166 + N1[2]*clhs167 + N1[3]*clhs168);
    const double clhs170 =     clhs1*clhs169*clhs2;
    const double clhs171 =     Deltatangentxis[4](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs172 =     DeltaJs[4]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs173 =     DeltaPhi[4][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs174 =     Deltatangentetas[4](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs175 =     Deltatangentxis[4](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs176 =     Deltatangentxis[4](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs177 =     Deltatangentxis[4](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs178 =     Deltatangentxis[4](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs179 =     Deltatangentxis[4](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs180 =     Deltatangentxis[4](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs181 =     Deltatangentxis[4](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs182 =     Deltatangentxis[4](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs183 =     Deltatangentxis[4](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs184 =     Deltatangentxis[4](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs185 =     Deltatangentxis[4](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs186 =     N1[1]*clhs19 + clhs41*(N1[0]*clhs171 + N1[1]*clhs175 + N1[2]*clhs176 + N1[3]*clhs177) + clhs42*(N1[0]*clhs178 + N1[1]*clhs179 + N1[2]*clhs180 + N1[3]*clhs181) + clhs43*(N1[0]*clhs182 + N1[1]*clhs183 + N1[2]*clhs184 + N1[3]*clhs185);
    const double clhs187 =     clhs1*clhs186*clhs2;
    const double clhs188 =     Deltatangentetas[4](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs189 =     Deltatangentetas[4](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs190 =     Deltatangentetas[4](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs191 =     Deltatangentetas[4](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs192 =     Deltatangentetas[4](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs193 =     Deltatangentetas[4](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs194 =     Deltatangentetas[4](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs195 =     Deltatangentetas[4](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs196 =     Deltatangentetas[4](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs197 =     Deltatangentetas[4](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs198 =     Deltatangentetas[4](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs199 =     N1[1]*clhs24 + clhs41*(N1[0]*clhs174 + N1[1]*clhs188 + N1[2]*clhs189 + N1[3]*clhs190) + clhs42*(N1[0]*clhs191 + N1[1]*clhs192 + N1[2]*clhs193 + N1[3]*clhs194) + clhs43*(N1[0]*clhs195 + N1[1]*clhs196 + N1[2]*clhs197 + N1[3]*clhs198);
    const double clhs200 =     clhs1*clhs199*clhs2;
    const double clhs201 =     Deltatangentxis[5](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs202 =     DeltaJs[5]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs203 =     DeltaPhi[5][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs204 =     Deltatangentetas[5](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs205 =     Deltatangentxis[5](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs206 =     Deltatangentxis[5](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs207 =     Deltatangentxis[5](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs208 =     Deltatangentxis[5](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs209 =     Deltatangentxis[5](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs210 =     Deltatangentxis[5](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs211 =     Deltatangentxis[5](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs212 =     Deltatangentxis[5](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs213 =     Deltatangentxis[5](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs214 =     Deltatangentxis[5](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs215 =     Deltatangentxis[5](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs216 =     N1[1]*clhs30 + clhs41*(N1[0]*clhs201 + N1[1]*clhs205 + N1[2]*clhs206 + N1[3]*clhs207) + clhs42*(N1[0]*clhs208 + N1[1]*clhs209 + N1[2]*clhs210 + N1[3]*clhs211) + clhs43*(N1[0]*clhs212 + N1[1]*clhs213 + N1[2]*clhs214 + N1[3]*clhs215);
    const double clhs217 =     clhs1*clhs2*clhs216;
    const double clhs218 =     Deltatangentetas[5](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs219 =     Deltatangentetas[5](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs220 =     Deltatangentetas[5](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs221 =     Deltatangentetas[5](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs222 =     Deltatangentetas[5](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs223 =     Deltatangentetas[5](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs224 =     Deltatangentetas[5](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs225 =     Deltatangentetas[5](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs226 =     Deltatangentetas[5](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs227 =     Deltatangentetas[5](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs228 =     Deltatangentetas[5](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs229 =     N1[1]*clhs35 + clhs41*(N1[0]*clhs204 + N1[1]*clhs218 + N1[2]*clhs219 + N1[3]*clhs220) + clhs42*(N1[0]*clhs221 + N1[1]*clhs222 + N1[2]*clhs223 + N1[3]*clhs224) + clhs43*(N1[0]*clhs225 + N1[1]*clhs226 + N1[2]*clhs227 + N1[3]*clhs228);
    const double clhs230 =     clhs1*clhs2*clhs229;
    const double clhs231 =     Deltatangentxis[6](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs232 =     DeltaJs[6]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs233 =     DeltaPhi[6][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs234 =     Deltatangentetas[6](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs235 =     Deltatangentxis[6](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs236 =     Deltatangentxis[6](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs237 =     Deltatangentxis[6](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs238 =     Deltatangentxis[6](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs239 =     Deltatangentxis[6](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs240 =     Deltatangentxis[6](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs241 =     Deltatangentxis[6](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs242 =     Deltatangentxis[6](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs243 =     Deltatangentxis[6](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs244 =     Deltatangentxis[6](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs245 =     Deltatangentxis[6](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs246 =     N1[2]*clhs8 + clhs41*(N1[0]*clhs231 + N1[1]*clhs235 + N1[2]*clhs236 + N1[3]*clhs237) + clhs42*(N1[0]*clhs238 + N1[1]*clhs239 + N1[2]*clhs240 + N1[3]*clhs241) + clhs43*(N1[0]*clhs242 + N1[1]*clhs243 + N1[2]*clhs244 + N1[3]*clhs245);
    const double clhs247 =     clhs1*clhs2*clhs246;
    const double clhs248 =     Deltatangentetas[6](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs249 =     Deltatangentetas[6](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs250 =     Deltatangentetas[6](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs251 =     Deltatangentetas[6](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs252 =     Deltatangentetas[6](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs253 =     Deltatangentetas[6](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs254 =     Deltatangentetas[6](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs255 =     Deltatangentetas[6](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs256 =     Deltatangentetas[6](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs257 =     Deltatangentetas[6](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs258 =     Deltatangentetas[6](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs259 =     N1[2]*clhs13 + clhs41*(N1[0]*clhs234 + N1[1]*clhs248 + N1[2]*clhs249 + N1[3]*clhs250) + clhs42*(N1[0]*clhs251 + N1[1]*clhs252 + N1[2]*clhs253 + N1[3]*clhs254) + clhs43*(N1[0]*clhs255 + N1[1]*clhs256 + N1[2]*clhs257 + N1[3]*clhs258);
    const double clhs260 =     clhs1*clhs2*clhs259;
    const double clhs261 =     Deltatangentxis[7](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs262 =     DeltaJs[7]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs263 =     DeltaPhi[7][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs264 =     Deltatangentetas[7](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs265 =     Deltatangentxis[7](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs266 =     Deltatangentxis[7](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs267 =     Deltatangentxis[7](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs268 =     Deltatangentxis[7](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs269 =     Deltatangentxis[7](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs270 =     Deltatangentxis[7](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs271 =     Deltatangentxis[7](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs272 =     Deltatangentxis[7](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs273 =     Deltatangentxis[7](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs274 =     Deltatangentxis[7](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs275 =     Deltatangentxis[7](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs276 =     N1[2]*clhs19 + clhs41*(N1[0]*clhs261 + N1[1]*clhs265 + N1[2]*clhs266 + N1[3]*clhs267) + clhs42*(N1[0]*clhs268 + N1[1]*clhs269 + N1[2]*clhs270 + N1[3]*clhs271) + clhs43*(N1[0]*clhs272 + N1[1]*clhs273 + N1[2]*clhs274 + N1[3]*clhs275);
    const double clhs277 =     clhs1*clhs2*clhs276;
    const double clhs278 =     Deltatangentetas[7](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs279 =     Deltatangentetas[7](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs280 =     Deltatangentetas[7](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs281 =     Deltatangentetas[7](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs282 =     Deltatangentetas[7](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs283 =     Deltatangentetas[7](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs284 =     Deltatangentetas[7](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs285 =     Deltatangentetas[7](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs286 =     Deltatangentetas[7](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs287 =     Deltatangentetas[7](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs288 =     Deltatangentetas[7](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs289 =     N1[2]*clhs24 + clhs41*(N1[0]*clhs264 + N1[1]*clhs278 + N1[2]*clhs279 + N1[3]*clhs280) + clhs42*(N1[0]*clhs281 + N1[1]*clhs282 + N1[2]*clhs283 + N1[3]*clhs284) + clhs43*(N1[0]*clhs285 + N1[1]*clhs286 + N1[2]*clhs287 + N1[3]*clhs288);
    const double clhs290 =     clhs1*clhs2*clhs289;
    const double clhs291 =     Deltatangentxis[8](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs292 =     DeltaJs[8]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs293 =     DeltaPhi[8][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs294 =     Deltatangentetas[8](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs295 =     Deltatangentxis[8](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs296 =     Deltatangentxis[8](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs297 =     Deltatangentxis[8](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs298 =     Deltatangentxis[8](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs299 =     Deltatangentxis[8](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs300 =     Deltatangentxis[8](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs301 =     Deltatangentxis[8](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs302 =     Deltatangentxis[8](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs303 =     Deltatangentxis[8](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs304 =     Deltatangentxis[8](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs305 =     Deltatangentxis[8](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs306 =     N1[2]*clhs30 + clhs41*(N1[0]*clhs291 + N1[1]*clhs295 + N1[2]*clhs296 + N1[3]*clhs297) + clhs42*(N1[0]*clhs298 + N1[1]*clhs299 + N1[2]*clhs300 + N1[3]*clhs301) + clhs43*(N1[0]*clhs302 + N1[1]*clhs303 + N1[2]*clhs304 + N1[3]*clhs305);
    const double clhs307 =     clhs1*clhs2*clhs306;
    const double clhs308 =     Deltatangentetas[8](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs309 =     Deltatangentetas[8](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs310 =     Deltatangentetas[8](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs311 =     Deltatangentetas[8](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs312 =     Deltatangentetas[8](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs313 =     Deltatangentetas[8](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs314 =     Deltatangentetas[8](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs315 =     Deltatangentetas[8](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs316 =     Deltatangentetas[8](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs317 =     Deltatangentetas[8](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs318 =     Deltatangentetas[8](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs319 =     N1[2]*clhs35 + clhs41*(N1[0]*clhs294 + N1[1]*clhs308 + N1[2]*clhs309 + N1[3]*clhs310) + clhs42*(N1[0]*clhs311 + N1[1]*clhs312 + N1[2]*clhs313 + N1[3]*clhs314) + clhs43*(N1[0]*clhs315 + N1[1]*clhs316 + N1[2]*clhs317 + N1[3]*clhs318);
    const double clhs320 =     clhs1*clhs2*clhs319;
    const double clhs321 =     Deltatangentxis[9](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs322 =     DeltaJs[9]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs323 =     DeltaPhi[9][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs324 =     Deltatangentetas[9](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs325 =     Deltatangentxis[9](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs326 =     Deltatangentxis[9](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs327 =     Deltatangentxis[9](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs328 =     Deltatangentxis[9](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs329 =     Deltatangentxis[9](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs330 =     Deltatangentxis[9](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs331 =     Deltatangentxis[9](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs332 =     Deltatangentxis[9](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs333 =     Deltatangentxis[9](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs334 =     Deltatangentxis[9](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs335 =     Deltatangentxis[9](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs336 =     N1[3]*clhs8 + clhs41*(N1[0]*clhs321 + N1[1]*clhs325 + N1[2]*clhs326 + N1[3]*clhs327) + clhs42*(N1[0]*clhs328 + N1[1]*clhs329 + N1[2]*clhs330 + N1[3]*clhs331) + clhs43*(N1[0]*clhs332 + N1[1]*clhs333 + N1[2]*clhs334 + N1[3]*clhs335);
    const double clhs337 =     clhs1*clhs2*clhs336;
    const double clhs338 =     Deltatangentetas[9](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs339 =     Deltatangentetas[9](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs340 =     Deltatangentetas[9](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs341 =     Deltatangentetas[9](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs342 =     Deltatangentetas[9](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs343 =     Deltatangentetas[9](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs344 =     Deltatangentetas[9](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs345 =     Deltatangentetas[9](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs346 =     Deltatangentetas[9](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs347 =     Deltatangentetas[9](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs348 =     Deltatangentetas[9](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs349 =     N1[3]*clhs13 + clhs41*(N1[0]*clhs324 + N1[1]*clhs338 + N1[2]*clhs339 + N1[3]*clhs340) + clhs42*(N1[0]*clhs341 + N1[1]*clhs342 + N1[2]*clhs343 + N1[3]*clhs344) + clhs43*(N1[0]*clhs345 + N1[1]*clhs346 + N1[2]*clhs347 + N1[3]*clhs348);
    const double clhs350 =     clhs1*clhs2*clhs349;
    const double clhs351 =     Deltatangentxis[10](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs352 =     DeltaJs[10]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs353 =     DeltaPhi[10][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs354 =     Deltatangentetas[10](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs355 =     Deltatangentxis[10](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs356 =     Deltatangentxis[10](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs357 =     Deltatangentxis[10](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs358 =     Deltatangentxis[10](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs359 =     Deltatangentxis[10](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs360 =     Deltatangentxis[10](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs361 =     Deltatangentxis[10](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs362 =     Deltatangentxis[10](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs363 =     Deltatangentxis[10](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs364 =     Deltatangentxis[10](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs365 =     Deltatangentxis[10](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs366 =     N1[3]*clhs19 + clhs41*(N1[0]*clhs351 + N1[1]*clhs355 + N1[2]*clhs356 + N1[3]*clhs357) + clhs42*(N1[0]*clhs358 + N1[1]*clhs359 + N1[2]*clhs360 + N1[3]*clhs361) + clhs43*(N1[0]*clhs362 + N1[1]*clhs363 + N1[2]*clhs364 + N1[3]*clhs365);
    const double clhs367 =     clhs1*clhs2*clhs366;
    const double clhs368 =     Deltatangentetas[10](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs369 =     Deltatangentetas[10](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs370 =     Deltatangentetas[10](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs371 =     Deltatangentetas[10](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs372 =     Deltatangentetas[10](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs373 =     Deltatangentetas[10](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs374 =     Deltatangentetas[10](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs375 =     Deltatangentetas[10](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs376 =     Deltatangentetas[10](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs377 =     Deltatangentetas[10](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs378 =     Deltatangentetas[10](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs379 =     N1[3]*clhs24 + clhs41*(N1[0]*clhs354 + N1[1]*clhs368 + N1[2]*clhs369 + N1[3]*clhs370) + clhs42*(N1[0]*clhs371 + N1[1]*clhs372 + N1[2]*clhs373 + N1[3]*clhs374) + clhs43*(N1[0]*clhs375 + N1[1]*clhs376 + N1[2]*clhs377 + N1[3]*clhs378);
    const double clhs380 =     clhs1*clhs2*clhs379;
    const double clhs381 =     Deltatangentxis[11](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs382 =     DeltaJs[11]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs383 =     DeltaPhi[11][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs384 =     Deltatangentetas[11](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs385 =     Deltatangentxis[11](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs386 =     Deltatangentxis[11](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs387 =     Deltatangentxis[11](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs388 =     Deltatangentxis[11](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs389 =     Deltatangentxis[11](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs390 =     Deltatangentxis[11](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs391 =     Deltatangentxis[11](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs392 =     Deltatangentxis[11](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs393 =     Deltatangentxis[11](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs394 =     Deltatangentxis[11](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs395 =     Deltatangentxis[11](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs396 =     N1[3]*clhs30 + clhs41*(N1[0]*clhs381 + N1[1]*clhs385 + N1[2]*clhs386 + N1[3]*clhs387) + clhs42*(N1[0]*clhs388 + N1[1]*clhs389 + N1[2]*clhs390 + N1[3]*clhs391) + clhs43*(N1[0]*clhs392 + N1[1]*clhs393 + N1[2]*clhs394 + N1[3]*clhs395);
    const double clhs397 =     clhs1*clhs2*clhs396;
    const double clhs398 =     Deltatangentetas[11](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs399 =     Deltatangentetas[11](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs400 =     Deltatangentetas[11](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs401 =     Deltatangentetas[11](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs402 =     Deltatangentetas[11](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs403 =     Deltatangentetas[11](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs404 =     Deltatangentetas[11](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs405 =     Deltatangentetas[11](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs406 =     Deltatangentetas[11](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs407 =     Deltatangentetas[11](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs408 =     Deltatangentetas[11](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs409 =     N1[3]*clhs35 + clhs41*(N1[0]*clhs384 + N1[1]*clhs398 + N1[2]*clhs399 + N1[3]*clhs400) + clhs42*(N1[0]*clhs401 + N1[1]*clhs402 + N1[2]*clhs403 + N1[3]*clhs404) + clhs43*(N1[0]*clhs405 + N1[1]*clhs406 + N1[2]*clhs407 + N1[3]*clhs408);
    const double clhs410 =     clhs1*clhs2*clhs409;
    const double clhs411 =     clhs13*clhs20 + clhs15*clhs8;
    const double clhs412 =     clhs15*clhs19 + clhs20*clhs24;
    const double clhs413 =     clhs15*clhs30 + clhs20*clhs35;
    const double clhs414 =     clhs1*clhs15*clhs44;
    const double clhs415 =     clhs15*clhs2*clhs44;
    const double clhs416 =     clhs1*clhs20*clhs51;
    const double clhs417 =     clhs2*clhs20*clhs51;
    const double clhs418 =     clhs13*clhs31 + clhs26*clhs8;
    const double clhs419 =     clhs19*clhs26 + clhs24*clhs31;
    const double clhs420 =     clhs26*clhs30 + clhs31*clhs35;
    const double clhs421 =     clhs1*clhs26*clhs44;
    const double clhs422 =     clhs2*clhs26*clhs44;
    const double clhs423 =     clhs1*clhs31*clhs51;
    const double clhs424 =     clhs2*clhs31*clhs51;
    const double clhs425 =     Phi[1]; // PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs426 =     N2[0]*clhs0*clhs2*clhs425;
    const double clhs427 =     clhs10*clhs13 + clhs5*clhs8;
    const double clhs428 =     clhs10*clhs24 + clhs19*clhs5;
    const double clhs429 =     clhs10*clhs35 + clhs30*clhs5;
    const double clhs430 =     N2[1]*clhs0*clhs2*clhs425;
    const double clhs431 =     N2[2]*clhs0*clhs2*clhs425;
    const double clhs432 =     N2[3]*clhs0*clhs2*clhs425;
    const double clhs433 =     clhs2*clhs425*clhs44;
    const double clhs434 =     clhs425*clhs44*clhs5;
    const double clhs435 =     DeltaPhi[0][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs436 =     clhs2*clhs44*clhs5;
    const double clhs437 =     clhs2*clhs425*clhs51;
    const double clhs438 =     clhs10*clhs425*clhs51;
    const double clhs439 =     clhs10*clhs2*clhs51;
    const double clhs440 =     clhs2*clhs425*clhs66;
    const double clhs441 =     clhs2*clhs425*clhs79;
    const double clhs442 =     DeltaPhi[1][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs443 =     clhs2*clhs425*clhs96;
    const double clhs444 =     clhs109*clhs2*clhs425;
    const double clhs445 =     DeltaPhi[2][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs446 =     clhs126*clhs2*clhs425;
    const double clhs447 =     clhs139*clhs2*clhs425;
    const double clhs448 =     DeltaPhi[3][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs449 =     clhs156*clhs2*clhs425;
    const double clhs450 =     clhs169*clhs2*clhs425;
    const double clhs451 =     DeltaPhi[4][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs452 =     clhs186*clhs2*clhs425;
    const double clhs453 =     clhs199*clhs2*clhs425;
    const double clhs454 =     DeltaPhi[5][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs455 =     clhs2*clhs216*clhs425;
    const double clhs456 =     clhs2*clhs229*clhs425;
    const double clhs457 =     DeltaPhi[6][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs458 =     clhs2*clhs246*clhs425;
    const double clhs459 =     clhs2*clhs259*clhs425;
    const double clhs460 =     DeltaPhi[7][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs461 =     clhs2*clhs276*clhs425;
    const double clhs462 =     clhs2*clhs289*clhs425;
    const double clhs463 =     DeltaPhi[8][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs464 =     clhs2*clhs306*clhs425;
    const double clhs465 =     clhs2*clhs319*clhs425;
    const double clhs466 =     DeltaPhi[9][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs467 =     clhs2*clhs336*clhs425;
    const double clhs468 =     clhs2*clhs349*clhs425;
    const double clhs469 =     DeltaPhi[10][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs470 =     clhs2*clhs366*clhs425;
    const double clhs471 =     clhs2*clhs379*clhs425;
    const double clhs472 =     DeltaPhi[11][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs473 =     clhs2*clhs396*clhs425;
    const double clhs474 =     clhs2*clhs409*clhs425;
    const double clhs475 =     clhs13*clhs21 + clhs16*clhs8;
    const double clhs476 =     clhs16*clhs19 + clhs21*clhs24;
    const double clhs477 =     clhs16*clhs30 + clhs21*clhs35;
    const double clhs478 =     clhs16*clhs425*clhs44;
    const double clhs479 =     clhs16*clhs2*clhs44;
    const double clhs480 =     clhs21*clhs425*clhs51;
    const double clhs481 =     clhs2*clhs21*clhs51;
    const double clhs482 =     clhs13*clhs32 + clhs27*clhs8;
    const double clhs483 =     clhs19*clhs27 + clhs24*clhs32;
    const double clhs484 =     clhs27*clhs30 + clhs32*clhs35;
    const double clhs485 =     clhs27*clhs425*clhs44;
    const double clhs486 =     clhs2*clhs27*clhs44;
    const double clhs487 =     clhs32*clhs425*clhs51;
    const double clhs488 =     clhs2*clhs32*clhs51;
    const double clhs489 =     Phi[2]; // PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs490 =     N2[0]*clhs0*clhs2*clhs489;
    const double clhs491 =     clhs11*clhs13 + clhs6*clhs8;
    const double clhs492 =     clhs11*clhs24 + clhs19*clhs6;
    const double clhs493 =     clhs11*clhs35 + clhs30*clhs6;
    const double clhs494 =     N2[1]*clhs0*clhs2*clhs489;
    const double clhs495 =     N2[2]*clhs0*clhs2*clhs489;
    const double clhs496 =     N2[3]*clhs0*clhs2*clhs489;
    const double clhs497 =     clhs2*clhs44*clhs489;
    const double clhs498 =     clhs44*clhs489*clhs6;
    const double clhs499 =     DeltaPhi[0][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs500 =     clhs2*clhs44*clhs6;
    const double clhs501 =     clhs2*clhs489*clhs51;
    const double clhs502 =     clhs11*clhs489*clhs51;
    const double clhs503 =     clhs11*clhs2*clhs51;
    const double clhs504 =     clhs2*clhs489*clhs66;
    const double clhs505 =     clhs2*clhs489*clhs79;
    const double clhs506 =     DeltaPhi[1][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs507 =     clhs2*clhs489*clhs96;
    const double clhs508 =     clhs109*clhs2*clhs489;
    const double clhs509 =     DeltaPhi[2][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs510 =     clhs126*clhs2*clhs489;
    const double clhs511 =     clhs139*clhs2*clhs489;
    const double clhs512 =     DeltaPhi[3][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs513 =     clhs156*clhs2*clhs489;
    const double clhs514 =     clhs169*clhs2*clhs489;
    const double clhs515 =     DeltaPhi[4][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs516 =     clhs186*clhs2*clhs489;
    const double clhs517 =     clhs199*clhs2*clhs489;
    const double clhs518 =     DeltaPhi[5][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs519 =     clhs2*clhs216*clhs489;
    const double clhs520 =     clhs2*clhs229*clhs489;
    const double clhs521 =     DeltaPhi[6][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs522 =     clhs2*clhs246*clhs489;
    const double clhs523 =     clhs2*clhs259*clhs489;
    const double clhs524 =     DeltaPhi[7][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs525 =     clhs2*clhs276*clhs489;
    const double clhs526 =     clhs2*clhs289*clhs489;
    const double clhs527 =     DeltaPhi[8][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs528 =     clhs2*clhs306*clhs489;
    const double clhs529 =     clhs2*clhs319*clhs489;
    const double clhs530 =     DeltaPhi[9][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs531 =     clhs2*clhs336*clhs489;
    const double clhs532 =     clhs2*clhs349*clhs489;
    const double clhs533 =     DeltaPhi[10][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs534 =     clhs2*clhs366*clhs489;
    const double clhs535 =     clhs2*clhs379*clhs489;
    const double clhs536 =     DeltaPhi[11][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs537 =     clhs2*clhs396*clhs489;
    const double clhs538 =     clhs2*clhs409*clhs489;
    const double clhs539 =     clhs13*clhs22 + clhs17*clhs8;
    const double clhs540 =     clhs17*clhs19 + clhs22*clhs24;
    const double clhs541 =     clhs17*clhs30 + clhs22*clhs35;
    const double clhs542 =     clhs17*clhs44*clhs489;
    const double clhs543 =     clhs17*clhs2*clhs44;
    const double clhs544 =     clhs22*clhs489*clhs51;
    const double clhs545 =     clhs2*clhs22*clhs51;
    const double clhs546 =     clhs13*clhs33 + clhs28*clhs8;
    const double clhs547 =     clhs19*clhs28 + clhs24*clhs33;
    const double clhs548 =     clhs28*clhs30 + clhs33*clhs35;
    const double clhs549 =     clhs28*clhs44*clhs489;
    const double clhs550 =     clhs2*clhs28*clhs44;
    const double clhs551 =     clhs33*clhs489*clhs51;
    const double clhs552 =     clhs2*clhs33*clhs51;
    const double clhs553 =     Phi[3]; // PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs554 =     N2[0]*clhs0*clhs2*clhs553;
    const double clhs555 =     clhs12*clhs13 + clhs7*clhs8;
    const double clhs556 =     clhs12*clhs24 + clhs19*clhs7;
    const double clhs557 =     clhs12*clhs35 + clhs30*clhs7;
    const double clhs558 =     N2[1]*clhs0*clhs2*clhs553;
    const double clhs559 =     N2[2]*clhs0*clhs2*clhs553;
    const double clhs560 =     N2[3]*clhs0*clhs2*clhs553;
    const double clhs561 =     clhs2*clhs44*clhs553;
    const double clhs562 =     clhs44*clhs553*clhs7;
    const double clhs563 =     DeltaPhi[0][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs564 =     clhs2*clhs44*clhs7;
    const double clhs565 =     clhs2*clhs51*clhs553;
    const double clhs566 =     clhs12*clhs51*clhs553;
    const double clhs567 =     clhs12*clhs2*clhs51;
    const double clhs568 =     clhs2*clhs553*clhs66;
    const double clhs569 =     clhs2*clhs553*clhs79;
    const double clhs570 =     DeltaPhi[1][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs571 =     clhs2*clhs553*clhs96;
    const double clhs572 =     clhs109*clhs2*clhs553;
    const double clhs573 =     DeltaPhi[2][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs574 =     clhs126*clhs2*clhs553;
    const double clhs575 =     clhs139*clhs2*clhs553;
    const double clhs576 =     DeltaPhi[3][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs577 =     clhs156*clhs2*clhs553;
    const double clhs578 =     clhs169*clhs2*clhs553;
    const double clhs579 =     DeltaPhi[4][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs580 =     clhs186*clhs2*clhs553;
    const double clhs581 =     clhs199*clhs2*clhs553;
    const double clhs582 =     DeltaPhi[5][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs583 =     clhs2*clhs216*clhs553;
    const double clhs584 =     clhs2*clhs229*clhs553;
    const double clhs585 =     DeltaPhi[6][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs586 =     clhs2*clhs246*clhs553;
    const double clhs587 =     clhs2*clhs259*clhs553;
    const double clhs588 =     DeltaPhi[7][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs589 =     clhs2*clhs276*clhs553;
    const double clhs590 =     clhs2*clhs289*clhs553;
    const double clhs591 =     DeltaPhi[8][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs592 =     clhs2*clhs306*clhs553;
    const double clhs593 =     clhs2*clhs319*clhs553;
    const double clhs594 =     DeltaPhi[9][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs595 =     clhs2*clhs336*clhs553;
    const double clhs596 =     clhs2*clhs349*clhs553;
    const double clhs597 =     DeltaPhi[10][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs598 =     clhs2*clhs366*clhs553;
    const double clhs599 =     clhs2*clhs379*clhs553;
    const double clhs600 =     DeltaPhi[11][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs601 =     clhs2*clhs396*clhs553;
    const double clhs602 =     clhs2*clhs409*clhs553;
    const double clhs603 =     clhs13*clhs23 + clhs18*clhs8;
    const double clhs604 =     clhs18*clhs19 + clhs23*clhs24;
    const double clhs605 =     clhs18*clhs30 + clhs23*clhs35;
    const double clhs606 =     clhs18*clhs44*clhs553;
    const double clhs607 =     clhs18*clhs2*clhs44;
    const double clhs608 =     clhs23*clhs51*clhs553;
    const double clhs609 =     clhs2*clhs23*clhs51;
    const double clhs610 =     clhs13*clhs34 + clhs29*clhs8;
    const double clhs611 =     clhs19*clhs29 + clhs24*clhs34;
    const double clhs612 =     clhs29*clhs30 + clhs34*clhs35;
    const double clhs613 =     clhs29*clhs44*clhs553;
    const double clhs614 =     clhs2*clhs29*clhs44;
    const double clhs615 =     clhs34*clhs51*clhs553;
    const double clhs616 =     clhs2*clhs34*clhs51;

    lhs(0,0)=0;
    lhs(0,1)=0;
    lhs(0,2)=0;
    lhs(0,3)=0;
    lhs(0,4)=0;
    lhs(0,5)=0;
    lhs(0,6)=0;
    lhs(0,7)=0;
    lhs(0,8)=0;
    lhs(0,9)=0;
    lhs(0,10)=0;
    lhs(0,11)=0;
    lhs(0,12)=0;
    lhs(0,13)=0;
    lhs(0,14)=0;
    lhs(0,15)=0;
    lhs(0,16)=0;
    lhs(0,17)=0;
    lhs(0,18)=0;
    lhs(0,19)=0;
    lhs(0,20)=0;
    lhs(0,21)=0;
    lhs(0,22)=0;
    lhs(0,23)=0;
    lhs(0,24)=0;
    lhs(0,25)=0;
    lhs(0,26)=0;
    lhs(0,27)=0;
    lhs(0,28)=0;
    lhs(0,29)=0;
    lhs(0,30)=0;
    lhs(0,31)=0;
    lhs(0,32)=0;
    lhs(0,33)=0;
    lhs(0,34)=0;
    lhs(0,35)=0;
    lhs(1,0)=0;
    lhs(1,1)=0;
    lhs(1,2)=0;
    lhs(1,3)=0;
    lhs(1,4)=0;
    lhs(1,5)=0;
    lhs(1,6)=0;
    lhs(1,7)=0;
    lhs(1,8)=0;
    lhs(1,9)=0;
    lhs(1,10)=0;
    lhs(1,11)=0;
    lhs(1,12)=0;
    lhs(1,13)=0;
    lhs(1,14)=0;
    lhs(1,15)=0;
    lhs(1,16)=0;
    lhs(1,17)=0;
    lhs(1,18)=0;
    lhs(1,19)=0;
    lhs(1,20)=0;
    lhs(1,21)=0;
    lhs(1,22)=0;
    lhs(1,23)=0;
    lhs(1,24)=0;
    lhs(1,25)=0;
    lhs(1,26)=0;
    lhs(1,27)=0;
    lhs(1,28)=0;
    lhs(1,29)=0;
    lhs(1,30)=0;
    lhs(1,31)=0;
    lhs(1,32)=0;
    lhs(1,33)=0;
    lhs(1,34)=0;
    lhs(1,35)=0;
    lhs(2,0)=0;
    lhs(2,1)=0;
    lhs(2,2)=0;
    lhs(2,3)=0;
    lhs(2,4)=0;
    lhs(2,5)=0;
    lhs(2,6)=0;
    lhs(2,7)=0;
    lhs(2,8)=0;
    lhs(2,9)=0;
    lhs(2,10)=0;
    lhs(2,11)=0;
    lhs(2,12)=0;
    lhs(2,13)=0;
    lhs(2,14)=0;
    lhs(2,15)=0;
    lhs(2,16)=0;
    lhs(2,17)=0;
    lhs(2,18)=0;
    lhs(2,19)=0;
    lhs(2,20)=0;
    lhs(2,21)=0;
    lhs(2,22)=0;
    lhs(2,23)=0;
    lhs(2,24)=0;
    lhs(2,25)=0;
    lhs(2,26)=0;
    lhs(2,27)=0;
    lhs(2,28)=0;
    lhs(2,29)=0;
    lhs(2,30)=0;
    lhs(2,31)=0;
    lhs(2,32)=0;
    lhs(2,33)=0;
    lhs(2,34)=0;
    lhs(2,35)=0;
    lhs(3,0)=0;
    lhs(3,1)=0;
    lhs(3,2)=0;
    lhs(3,3)=0;
    lhs(3,4)=0;
    lhs(3,5)=0;
    lhs(3,6)=0;
    lhs(3,7)=0;
    lhs(3,8)=0;
    lhs(3,9)=0;
    lhs(3,10)=0;
    lhs(3,11)=0;
    lhs(3,12)=0;
    lhs(3,13)=0;
    lhs(3,14)=0;
    lhs(3,15)=0;
    lhs(3,16)=0;
    lhs(3,17)=0;
    lhs(3,18)=0;
    lhs(3,19)=0;
    lhs(3,20)=0;
    lhs(3,21)=0;
    lhs(3,22)=0;
    lhs(3,23)=0;
    lhs(3,24)=0;
    lhs(3,25)=0;
    lhs(3,26)=0;
    lhs(3,27)=0;
    lhs(3,28)=0;
    lhs(3,29)=0;
    lhs(3,30)=0;
    lhs(3,31)=0;
    lhs(3,32)=0;
    lhs(3,33)=0;
    lhs(3,34)=0;
    lhs(3,35)=0;
    lhs(4,0)=0;
    lhs(4,1)=0;
    lhs(4,2)=0;
    lhs(4,3)=0;
    lhs(4,4)=0;
    lhs(4,5)=0;
    lhs(4,6)=0;
    lhs(4,7)=0;
    lhs(4,8)=0;
    lhs(4,9)=0;
    lhs(4,10)=0;
    lhs(4,11)=0;
    lhs(4,12)=0;
    lhs(4,13)=0;
    lhs(4,14)=0;
    lhs(4,15)=0;
    lhs(4,16)=0;
    lhs(4,17)=0;
    lhs(4,18)=0;
    lhs(4,19)=0;
    lhs(4,20)=0;
    lhs(4,21)=0;
    lhs(4,22)=0;
    lhs(4,23)=0;
    lhs(4,24)=0;
    lhs(4,25)=0;
    lhs(4,26)=0;
    lhs(4,27)=0;
    lhs(4,28)=0;
    lhs(4,29)=0;
    lhs(4,30)=0;
    lhs(4,31)=0;
    lhs(4,32)=0;
    lhs(4,33)=0;
    lhs(4,34)=0;
    lhs(4,35)=0;
    lhs(5,0)=0;
    lhs(5,1)=0;
    lhs(5,2)=0;
    lhs(5,3)=0;
    lhs(5,4)=0;
    lhs(5,5)=0;
    lhs(5,6)=0;
    lhs(5,7)=0;
    lhs(5,8)=0;
    lhs(5,9)=0;
    lhs(5,10)=0;
    lhs(5,11)=0;
    lhs(5,12)=0;
    lhs(5,13)=0;
    lhs(5,14)=0;
    lhs(5,15)=0;
    lhs(5,16)=0;
    lhs(5,17)=0;
    lhs(5,18)=0;
    lhs(5,19)=0;
    lhs(5,20)=0;
    lhs(5,21)=0;
    lhs(5,22)=0;
    lhs(5,23)=0;
    lhs(5,24)=0;
    lhs(5,25)=0;
    lhs(5,26)=0;
    lhs(5,27)=0;
    lhs(5,28)=0;
    lhs(5,29)=0;
    lhs(5,30)=0;
    lhs(5,31)=0;
    lhs(5,32)=0;
    lhs(5,33)=0;
    lhs(5,34)=0;
    lhs(5,35)=0;
    lhs(6,0)=0;
    lhs(6,1)=0;
    lhs(6,2)=0;
    lhs(6,3)=0;
    lhs(6,4)=0;
    lhs(6,5)=0;
    lhs(6,6)=0;
    lhs(6,7)=0;
    lhs(6,8)=0;
    lhs(6,9)=0;
    lhs(6,10)=0;
    lhs(6,11)=0;
    lhs(6,12)=0;
    lhs(6,13)=0;
    lhs(6,14)=0;
    lhs(6,15)=0;
    lhs(6,16)=0;
    lhs(6,17)=0;
    lhs(6,18)=0;
    lhs(6,19)=0;
    lhs(6,20)=0;
    lhs(6,21)=0;
    lhs(6,22)=0;
    lhs(6,23)=0;
    lhs(6,24)=0;
    lhs(6,25)=0;
    lhs(6,26)=0;
    lhs(6,27)=0;
    lhs(6,28)=0;
    lhs(6,29)=0;
    lhs(6,30)=0;
    lhs(6,31)=0;
    lhs(6,32)=0;
    lhs(6,33)=0;
    lhs(6,34)=0;
    lhs(6,35)=0;
    lhs(7,0)=0;
    lhs(7,1)=0;
    lhs(7,2)=0;
    lhs(7,3)=0;
    lhs(7,4)=0;
    lhs(7,5)=0;
    lhs(7,6)=0;
    lhs(7,7)=0;
    lhs(7,8)=0;
    lhs(7,9)=0;
    lhs(7,10)=0;
    lhs(7,11)=0;
    lhs(7,12)=0;
    lhs(7,13)=0;
    lhs(7,14)=0;
    lhs(7,15)=0;
    lhs(7,16)=0;
    lhs(7,17)=0;
    lhs(7,18)=0;
    lhs(7,19)=0;
    lhs(7,20)=0;
    lhs(7,21)=0;
    lhs(7,22)=0;
    lhs(7,23)=0;
    lhs(7,24)=0;
    lhs(7,25)=0;
    lhs(7,26)=0;
    lhs(7,27)=0;
    lhs(7,28)=0;
    lhs(7,29)=0;
    lhs(7,30)=0;
    lhs(7,31)=0;
    lhs(7,32)=0;
    lhs(7,33)=0;
    lhs(7,34)=0;
    lhs(7,35)=0;
    lhs(8,0)=0;
    lhs(8,1)=0;
    lhs(8,2)=0;
    lhs(8,3)=0;
    lhs(8,4)=0;
    lhs(8,5)=0;
    lhs(8,6)=0;
    lhs(8,7)=0;
    lhs(8,8)=0;
    lhs(8,9)=0;
    lhs(8,10)=0;
    lhs(8,11)=0;
    lhs(8,12)=0;
    lhs(8,13)=0;
    lhs(8,14)=0;
    lhs(8,15)=0;
    lhs(8,16)=0;
    lhs(8,17)=0;
    lhs(8,18)=0;
    lhs(8,19)=0;
    lhs(8,20)=0;
    lhs(8,21)=0;
    lhs(8,22)=0;
    lhs(8,23)=0;
    lhs(8,24)=0;
    lhs(8,25)=0;
    lhs(8,26)=0;
    lhs(8,27)=0;
    lhs(8,28)=0;
    lhs(8,29)=0;
    lhs(8,30)=0;
    lhs(8,31)=0;
    lhs(8,32)=0;
    lhs(8,33)=0;
    lhs(8,34)=0;
    lhs(8,35)=0;
    lhs(9,0)=0;
    lhs(9,1)=0;
    lhs(9,2)=0;
    lhs(9,3)=0;
    lhs(9,4)=0;
    lhs(9,5)=0;
    lhs(9,6)=0;
    lhs(9,7)=0;
    lhs(9,8)=0;
    lhs(9,9)=0;
    lhs(9,10)=0;
    lhs(9,11)=0;
    lhs(9,12)=0;
    lhs(9,13)=0;
    lhs(9,14)=0;
    lhs(9,15)=0;
    lhs(9,16)=0;
    lhs(9,17)=0;
    lhs(9,18)=0;
    lhs(9,19)=0;
    lhs(9,20)=0;
    lhs(9,21)=0;
    lhs(9,22)=0;
    lhs(9,23)=0;
    lhs(9,24)=0;
    lhs(9,25)=0;
    lhs(9,26)=0;
    lhs(9,27)=0;
    lhs(9,28)=0;
    lhs(9,29)=0;
    lhs(9,30)=0;
    lhs(9,31)=0;
    lhs(9,32)=0;
    lhs(9,33)=0;
    lhs(9,34)=0;
    lhs(9,35)=0;
    lhs(10,0)=0;
    lhs(10,1)=0;
    lhs(10,2)=0;
    lhs(10,3)=0;
    lhs(10,4)=0;
    lhs(10,5)=0;
    lhs(10,6)=0;
    lhs(10,7)=0;
    lhs(10,8)=0;
    lhs(10,9)=0;
    lhs(10,10)=0;
    lhs(10,11)=0;
    lhs(10,12)=0;
    lhs(10,13)=0;
    lhs(10,14)=0;
    lhs(10,15)=0;
    lhs(10,16)=0;
    lhs(10,17)=0;
    lhs(10,18)=0;
    lhs(10,19)=0;
    lhs(10,20)=0;
    lhs(10,21)=0;
    lhs(10,22)=0;
    lhs(10,23)=0;
    lhs(10,24)=0;
    lhs(10,25)=0;
    lhs(10,26)=0;
    lhs(10,27)=0;
    lhs(10,28)=0;
    lhs(10,29)=0;
    lhs(10,30)=0;
    lhs(10,31)=0;
    lhs(10,32)=0;
    lhs(10,33)=0;
    lhs(10,34)=0;
    lhs(10,35)=0;
    lhs(11,0)=0;
    lhs(11,1)=0;
    lhs(11,2)=0;
    lhs(11,3)=0;
    lhs(11,4)=0;
    lhs(11,5)=0;
    lhs(11,6)=0;
    lhs(11,7)=0;
    lhs(11,8)=0;
    lhs(11,9)=0;
    lhs(11,10)=0;
    lhs(11,11)=0;
    lhs(11,12)=0;
    lhs(11,13)=0;
    lhs(11,14)=0;
    lhs(11,15)=0;
    lhs(11,16)=0;
    lhs(11,17)=0;
    lhs(11,18)=0;
    lhs(11,19)=0;
    lhs(11,20)=0;
    lhs(11,21)=0;
    lhs(11,22)=0;
    lhs(11,23)=0;
    lhs(11,24)=0;
    lhs(11,25)=0;
    lhs(11,26)=0;
    lhs(11,27)=0;
    lhs(11,28)=0;
    lhs(11,29)=0;
    lhs(11,30)=0;
    lhs(11,31)=0;
    lhs(11,32)=0;
    lhs(11,33)=0;
    lhs(11,34)=0;
    lhs(11,35)=0;
    lhs(12,0)=0;
    lhs(12,1)=0;
    lhs(12,2)=0;
    lhs(12,3)=0;
    lhs(12,4)=0;
    lhs(12,5)=0;
    lhs(12,6)=0;
    lhs(12,7)=0;
    lhs(12,8)=0;
    lhs(12,9)=0;
    lhs(12,10)=0;
    lhs(12,11)=0;
    lhs(12,12)=0;
    lhs(12,13)=0;
    lhs(12,14)=0;
    lhs(12,15)=0;
    lhs(12,16)=0;
    lhs(12,17)=0;
    lhs(12,18)=0;
    lhs(12,19)=0;
    lhs(12,20)=0;
    lhs(12,21)=0;
    lhs(12,22)=0;
    lhs(12,23)=0;
    lhs(12,24)=0;
    lhs(12,25)=0;
    lhs(12,26)=0;
    lhs(12,27)=0;
    lhs(12,28)=0;
    lhs(12,29)=0;
    lhs(12,30)=0;
    lhs(12,31)=0;
    lhs(12,32)=0;
    lhs(12,33)=0;
    lhs(12,34)=0;
    lhs(12,35)=0;
    lhs(13,0)=0;
    lhs(13,1)=0;
    lhs(13,2)=0;
    lhs(13,3)=0;
    lhs(13,4)=0;
    lhs(13,5)=0;
    lhs(13,6)=0;
    lhs(13,7)=0;
    lhs(13,8)=0;
    lhs(13,9)=0;
    lhs(13,10)=0;
    lhs(13,11)=0;
    lhs(13,12)=0;
    lhs(13,13)=0;
    lhs(13,14)=0;
    lhs(13,15)=0;
    lhs(13,16)=0;
    lhs(13,17)=0;
    lhs(13,18)=0;
    lhs(13,19)=0;
    lhs(13,20)=0;
    lhs(13,21)=0;
    lhs(13,22)=0;
    lhs(13,23)=0;
    lhs(13,24)=0;
    lhs(13,25)=0;
    lhs(13,26)=0;
    lhs(13,27)=0;
    lhs(13,28)=0;
    lhs(13,29)=0;
    lhs(13,30)=0;
    lhs(13,31)=0;
    lhs(13,32)=0;
    lhs(13,33)=0;
    lhs(13,34)=0;
    lhs(13,35)=0;
    lhs(14,0)=0;
    lhs(14,1)=0;
    lhs(14,2)=0;
    lhs(14,3)=0;
    lhs(14,4)=0;
    lhs(14,5)=0;
    lhs(14,6)=0;
    lhs(14,7)=0;
    lhs(14,8)=0;
    lhs(14,9)=0;
    lhs(14,10)=0;
    lhs(14,11)=0;
    lhs(14,12)=0;
    lhs(14,13)=0;
    lhs(14,14)=0;
    lhs(14,15)=0;
    lhs(14,16)=0;
    lhs(14,17)=0;
    lhs(14,18)=0;
    lhs(14,19)=0;
    lhs(14,20)=0;
    lhs(14,21)=0;
    lhs(14,22)=0;
    lhs(14,23)=0;
    lhs(14,24)=0;
    lhs(14,25)=0;
    lhs(14,26)=0;
    lhs(14,27)=0;
    lhs(14,28)=0;
    lhs(14,29)=0;
    lhs(14,30)=0;
    lhs(14,31)=0;
    lhs(14,32)=0;
    lhs(14,33)=0;
    lhs(14,34)=0;
    lhs(14,35)=0;
    lhs(15,0)=0;
    lhs(15,1)=0;
    lhs(15,2)=0;
    lhs(15,3)=0;
    lhs(15,4)=0;
    lhs(15,5)=0;
    lhs(15,6)=0;
    lhs(15,7)=0;
    lhs(15,8)=0;
    lhs(15,9)=0;
    lhs(15,10)=0;
    lhs(15,11)=0;
    lhs(15,12)=0;
    lhs(15,13)=0;
    lhs(15,14)=0;
    lhs(15,15)=0;
    lhs(15,16)=0;
    lhs(15,17)=0;
    lhs(15,18)=0;
    lhs(15,19)=0;
    lhs(15,20)=0;
    lhs(15,21)=0;
    lhs(15,22)=0;
    lhs(15,23)=0;
    lhs(15,24)=0;
    lhs(15,25)=0;
    lhs(15,26)=0;
    lhs(15,27)=0;
    lhs(15,28)=0;
    lhs(15,29)=0;
    lhs(15,30)=0;
    lhs(15,31)=0;
    lhs(15,32)=0;
    lhs(15,33)=0;
    lhs(15,34)=0;
    lhs(15,35)=0;
    lhs(16,0)=0;
    lhs(16,1)=0;
    lhs(16,2)=0;
    lhs(16,3)=0;
    lhs(16,4)=0;
    lhs(16,5)=0;
    lhs(16,6)=0;
    lhs(16,7)=0;
    lhs(16,8)=0;
    lhs(16,9)=0;
    lhs(16,10)=0;
    lhs(16,11)=0;
    lhs(16,12)=0;
    lhs(16,13)=0;
    lhs(16,14)=0;
    lhs(16,15)=0;
    lhs(16,16)=0;
    lhs(16,17)=0;
    lhs(16,18)=0;
    lhs(16,19)=0;
    lhs(16,20)=0;
    lhs(16,21)=0;
    lhs(16,22)=0;
    lhs(16,23)=0;
    lhs(16,24)=0;
    lhs(16,25)=0;
    lhs(16,26)=0;
    lhs(16,27)=0;
    lhs(16,28)=0;
    lhs(16,29)=0;
    lhs(16,30)=0;
    lhs(16,31)=0;
    lhs(16,32)=0;
    lhs(16,33)=0;
    lhs(16,34)=0;
    lhs(16,35)=0;
    lhs(17,0)=0;
    lhs(17,1)=0;
    lhs(17,2)=0;
    lhs(17,3)=0;
    lhs(17,4)=0;
    lhs(17,5)=0;
    lhs(17,6)=0;
    lhs(17,7)=0;
    lhs(17,8)=0;
    lhs(17,9)=0;
    lhs(17,10)=0;
    lhs(17,11)=0;
    lhs(17,12)=0;
    lhs(17,13)=0;
    lhs(17,14)=0;
    lhs(17,15)=0;
    lhs(17,16)=0;
    lhs(17,17)=0;
    lhs(17,18)=0;
    lhs(17,19)=0;
    lhs(17,20)=0;
    lhs(17,21)=0;
    lhs(17,22)=0;
    lhs(17,23)=0;
    lhs(17,24)=0;
    lhs(17,25)=0;
    lhs(17,26)=0;
    lhs(17,27)=0;
    lhs(17,28)=0;
    lhs(17,29)=0;
    lhs(17,30)=0;
    lhs(17,31)=0;
    lhs(17,32)=0;
    lhs(17,33)=0;
    lhs(17,34)=0;
    lhs(17,35)=0;
    lhs(18,0)=0;
    lhs(18,1)=0;
    lhs(18,2)=0;
    lhs(18,3)=0;
    lhs(18,4)=0;
    lhs(18,5)=0;
    lhs(18,6)=0;
    lhs(18,7)=0;
    lhs(18,8)=0;
    lhs(18,9)=0;
    lhs(18,10)=0;
    lhs(18,11)=0;
    lhs(18,12)=0;
    lhs(18,13)=0;
    lhs(18,14)=0;
    lhs(18,15)=0;
    lhs(18,16)=0;
    lhs(18,17)=0;
    lhs(18,18)=0;
    lhs(18,19)=0;
    lhs(18,20)=0;
    lhs(18,21)=0;
    lhs(18,22)=0;
    lhs(18,23)=0;
    lhs(18,24)=0;
    lhs(18,25)=0;
    lhs(18,26)=0;
    lhs(18,27)=0;
    lhs(18,28)=0;
    lhs(18,29)=0;
    lhs(18,30)=0;
    lhs(18,31)=0;
    lhs(18,32)=0;
    lhs(18,33)=0;
    lhs(18,34)=0;
    lhs(18,35)=0;
    lhs(19,0)=0;
    lhs(19,1)=0;
    lhs(19,2)=0;
    lhs(19,3)=0;
    lhs(19,4)=0;
    lhs(19,5)=0;
    lhs(19,6)=0;
    lhs(19,7)=0;
    lhs(19,8)=0;
    lhs(19,9)=0;
    lhs(19,10)=0;
    lhs(19,11)=0;
    lhs(19,12)=0;
    lhs(19,13)=0;
    lhs(19,14)=0;
    lhs(19,15)=0;
    lhs(19,16)=0;
    lhs(19,17)=0;
    lhs(19,18)=0;
    lhs(19,19)=0;
    lhs(19,20)=0;
    lhs(19,21)=0;
    lhs(19,22)=0;
    lhs(19,23)=0;
    lhs(19,24)=0;
    lhs(19,25)=0;
    lhs(19,26)=0;
    lhs(19,27)=0;
    lhs(19,28)=0;
    lhs(19,29)=0;
    lhs(19,30)=0;
    lhs(19,31)=0;
    lhs(19,32)=0;
    lhs(19,33)=0;
    lhs(19,34)=0;
    lhs(19,35)=0;
    lhs(20,0)=0;
    lhs(20,1)=0;
    lhs(20,2)=0;
    lhs(20,3)=0;
    lhs(20,4)=0;
    lhs(20,5)=0;
    lhs(20,6)=0;
    lhs(20,7)=0;
    lhs(20,8)=0;
    lhs(20,9)=0;
    lhs(20,10)=0;
    lhs(20,11)=0;
    lhs(20,12)=0;
    lhs(20,13)=0;
    lhs(20,14)=0;
    lhs(20,15)=0;
    lhs(20,16)=0;
    lhs(20,17)=0;
    lhs(20,18)=0;
    lhs(20,19)=0;
    lhs(20,20)=0;
    lhs(20,21)=0;
    lhs(20,22)=0;
    lhs(20,23)=0;
    lhs(20,24)=0;
    lhs(20,25)=0;
    lhs(20,26)=0;
    lhs(20,27)=0;
    lhs(20,28)=0;
    lhs(20,29)=0;
    lhs(20,30)=0;
    lhs(20,31)=0;
    lhs(20,32)=0;
    lhs(20,33)=0;
    lhs(20,34)=0;
    lhs(20,35)=0;
    lhs(21,0)=0;
    lhs(21,1)=0;
    lhs(21,2)=0;
    lhs(21,3)=0;
    lhs(21,4)=0;
    lhs(21,5)=0;
    lhs(21,6)=0;
    lhs(21,7)=0;
    lhs(21,8)=0;
    lhs(21,9)=0;
    lhs(21,10)=0;
    lhs(21,11)=0;
    lhs(21,12)=0;
    lhs(21,13)=0;
    lhs(21,14)=0;
    lhs(21,15)=0;
    lhs(21,16)=0;
    lhs(21,17)=0;
    lhs(21,18)=0;
    lhs(21,19)=0;
    lhs(21,20)=0;
    lhs(21,21)=0;
    lhs(21,22)=0;
    lhs(21,23)=0;
    lhs(21,24)=0;
    lhs(21,25)=0;
    lhs(21,26)=0;
    lhs(21,27)=0;
    lhs(21,28)=0;
    lhs(21,29)=0;
    lhs(21,30)=0;
    lhs(21,31)=0;
    lhs(21,32)=0;
    lhs(21,33)=0;
    lhs(21,34)=0;
    lhs(21,35)=0;
    lhs(22,0)=0;
    lhs(22,1)=0;
    lhs(22,2)=0;
    lhs(22,3)=0;
    lhs(22,4)=0;
    lhs(22,5)=0;
    lhs(22,6)=0;
    lhs(22,7)=0;
    lhs(22,8)=0;
    lhs(22,9)=0;
    lhs(22,10)=0;
    lhs(22,11)=0;
    lhs(22,12)=0;
    lhs(22,13)=0;
    lhs(22,14)=0;
    lhs(22,15)=0;
    lhs(22,16)=0;
    lhs(22,17)=0;
    lhs(22,18)=0;
    lhs(22,19)=0;
    lhs(22,20)=0;
    lhs(22,21)=0;
    lhs(22,22)=0;
    lhs(22,23)=0;
    lhs(22,24)=0;
    lhs(22,25)=0;
    lhs(22,26)=0;
    lhs(22,27)=0;
    lhs(22,28)=0;
    lhs(22,29)=0;
    lhs(22,30)=0;
    lhs(22,31)=0;
    lhs(22,32)=0;
    lhs(22,33)=0;
    lhs(22,34)=0;
    lhs(22,35)=0;
    lhs(23,0)=0;
    lhs(23,1)=0;
    lhs(23,2)=0;
    lhs(23,3)=0;
    lhs(23,4)=0;
    lhs(23,5)=0;
    lhs(23,6)=0;
    lhs(23,7)=0;
    lhs(23,8)=0;
    lhs(23,9)=0;
    lhs(23,10)=0;
    lhs(23,11)=0;
    lhs(23,12)=0;
    lhs(23,13)=0;
    lhs(23,14)=0;
    lhs(23,15)=0;
    lhs(23,16)=0;
    lhs(23,17)=0;
    lhs(23,18)=0;
    lhs(23,19)=0;
    lhs(23,20)=0;
    lhs(23,21)=0;
    lhs(23,22)=0;
    lhs(23,23)=0;
    lhs(23,24)=0;
    lhs(23,25)=0;
    lhs(23,26)=0;
    lhs(23,27)=0;
    lhs(23,28)=0;
    lhs(23,29)=0;
    lhs(23,30)=0;
    lhs(23,31)=0;
    lhs(23,32)=0;
    lhs(23,33)=0;
    lhs(23,34)=0;
    lhs(23,35)=0;
    lhs(24,0)=-clhs14*clhs3;
    lhs(24,1)=-clhs25*clhs3;
    lhs(24,2)=-clhs3*clhs36;
    lhs(24,3)=-clhs14*clhs37;
    lhs(24,4)=-clhs25*clhs37;
    lhs(24,5)=-clhs36*clhs37;
    lhs(24,6)=-clhs14*clhs38;
    lhs(24,7)=-clhs25*clhs38;
    lhs(24,8)=-clhs36*clhs38;
    lhs(24,9)=-clhs14*clhs39;
    lhs(24,10)=-clhs25*clhs39;
    lhs(24,11)=-clhs36*clhs39;
    lhs(24,12)=clhs0*(clhs4*clhs67 + clhs40*clhs45 + clhs46*clhs47 + clhs46*clhs53 + clhs48*clhs49 + clhs48*clhs54 + clhs50*clhs52 + clhs80*clhs9);
    lhs(24,13)=clhs0*(clhs110*clhs9 + clhs4*clhs97 + clhs45*clhs81 + clhs47*clhs82 + clhs49*clhs83 + clhs52*clhs84 + clhs53*clhs82 + clhs54*clhs83);
    lhs(24,14)=clhs0*(clhs111*clhs45 + clhs112*clhs47 + clhs112*clhs53 + clhs113*clhs49 + clhs113*clhs54 + clhs114*clhs52 + clhs127*clhs4 + clhs140*clhs9);
    lhs(24,15)=clhs0*(clhs141*clhs45 + clhs142*clhs47 + clhs142*clhs53 + clhs143*clhs49 + clhs143*clhs54 + clhs144*clhs52 + clhs157*clhs4 + clhs170*clhs9);
    lhs(24,16)=clhs0*(clhs171*clhs45 + clhs172*clhs47 + clhs172*clhs53 + clhs173*clhs49 + clhs173*clhs54 + clhs174*clhs52 + clhs187*clhs4 + clhs200*clhs9);
    lhs(24,17)=clhs0*(clhs201*clhs45 + clhs202*clhs47 + clhs202*clhs53 + clhs203*clhs49 + clhs203*clhs54 + clhs204*clhs52 + clhs217*clhs4 + clhs230*clhs9);
    lhs(24,18)=clhs0*(clhs231*clhs45 + clhs232*clhs47 + clhs232*clhs53 + clhs233*clhs49 + clhs233*clhs54 + clhs234*clhs52 + clhs247*clhs4 + clhs260*clhs9);
    lhs(24,19)=clhs0*(clhs261*clhs45 + clhs262*clhs47 + clhs262*clhs53 + clhs263*clhs49 + clhs263*clhs54 + clhs264*clhs52 + clhs277*clhs4 + clhs290*clhs9);
    lhs(24,20)=clhs0*(clhs291*clhs45 + clhs292*clhs47 + clhs292*clhs53 + clhs293*clhs49 + clhs293*clhs54 + clhs294*clhs52 + clhs307*clhs4 + clhs320*clhs9);
    lhs(24,21)=clhs0*(clhs321*clhs45 + clhs322*clhs47 + clhs322*clhs53 + clhs323*clhs49 + clhs323*clhs54 + clhs324*clhs52 + clhs337*clhs4 + clhs350*clhs9);
    lhs(24,22)=clhs0*(clhs351*clhs45 + clhs352*clhs47 + clhs352*clhs53 + clhs353*clhs49 + clhs353*clhs54 + clhs354*clhs52 + clhs367*clhs4 + clhs380*clhs9);
    lhs(24,23)=clhs0*(clhs381*clhs45 + clhs382*clhs47 + clhs382*clhs53 + clhs383*clhs49 + clhs383*clhs54 + clhs384*clhs52 + clhs397*clhs4 + clhs410*clhs9);
    lhs(24,24)=0;
    lhs(24,25)=0;
    lhs(24,26)=0;
    lhs(24,27)=0;
    lhs(24,28)=0;
    lhs(24,29)=0;
    lhs(24,30)=0;
    lhs(24,31)=0;
    lhs(24,32)=0;
    lhs(24,33)=0;
    lhs(24,34)=0;
    lhs(24,35)=0;
    lhs(25,0)=-clhs3*clhs411;
    lhs(25,1)=-clhs3*clhs412;
    lhs(25,2)=-clhs3*clhs413;
    lhs(25,3)=-clhs37*clhs411;
    lhs(25,4)=-clhs37*clhs412;
    lhs(25,5)=-clhs37*clhs413;
    lhs(25,6)=-clhs38*clhs411;
    lhs(25,7)=-clhs38*clhs412;
    lhs(25,8)=-clhs38*clhs413;
    lhs(25,9)=-clhs39*clhs411;
    lhs(25,10)=-clhs39*clhs412;
    lhs(25,11)=-clhs39*clhs413;
    lhs(25,12)=clhs0*(clhs15*clhs67 + clhs20*clhs80 + clhs414*clhs46 + clhs415*clhs48 + clhs416*clhs46 + clhs417*clhs48 + clhs45*clhs58 + clhs52*clhs71);
    lhs(25,13)=clhs0*(clhs101*clhs52 + clhs110*clhs20 + clhs15*clhs97 + clhs414*clhs82 + clhs415*clhs83 + clhs416*clhs82 + clhs417*clhs83 + clhs45*clhs88);
    lhs(25,14)=clhs0*(clhs112*clhs414 + clhs112*clhs416 + clhs113*clhs415 + clhs113*clhs417 + clhs118*clhs45 + clhs127*clhs15 + clhs131*clhs52 + clhs140*clhs20);
    lhs(25,15)=clhs0*(clhs142*clhs414 + clhs142*clhs416 + clhs143*clhs415 + clhs143*clhs417 + clhs148*clhs45 + clhs15*clhs157 + clhs161*clhs52 + clhs170*clhs20);
    lhs(25,16)=clhs0*(clhs15*clhs187 + clhs172*clhs414 + clhs172*clhs416 + clhs173*clhs415 + clhs173*clhs417 + clhs178*clhs45 + clhs191*clhs52 + clhs20*clhs200);
    lhs(25,17)=clhs0*(clhs15*clhs217 + clhs20*clhs230 + clhs202*clhs414 + clhs202*clhs416 + clhs203*clhs415 + clhs203*clhs417 + clhs208*clhs45 + clhs221*clhs52);
    lhs(25,18)=clhs0*(clhs15*clhs247 + clhs20*clhs260 + clhs232*clhs414 + clhs232*clhs416 + clhs233*clhs415 + clhs233*clhs417 + clhs238*clhs45 + clhs251*clhs52);
    lhs(25,19)=clhs0*(clhs15*clhs277 + clhs20*clhs290 + clhs262*clhs414 + clhs262*clhs416 + clhs263*clhs415 + clhs263*clhs417 + clhs268*clhs45 + clhs281*clhs52);
    lhs(25,20)=clhs0*(clhs15*clhs307 + clhs20*clhs320 + clhs292*clhs414 + clhs292*clhs416 + clhs293*clhs415 + clhs293*clhs417 + clhs298*clhs45 + clhs311*clhs52);
    lhs(25,21)=clhs0*(clhs15*clhs337 + clhs20*clhs350 + clhs322*clhs414 + clhs322*clhs416 + clhs323*clhs415 + clhs323*clhs417 + clhs328*clhs45 + clhs341*clhs52);
    lhs(25,22)=clhs0*(clhs15*clhs367 + clhs20*clhs380 + clhs352*clhs414 + clhs352*clhs416 + clhs353*clhs415 + clhs353*clhs417 + clhs358*clhs45 + clhs371*clhs52);
    lhs(25,23)=clhs0*(clhs15*clhs397 + clhs20*clhs410 + clhs382*clhs414 + clhs382*clhs416 + clhs383*clhs415 + clhs383*clhs417 + clhs388*clhs45 + clhs401*clhs52);
    lhs(25,24)=0;
    lhs(25,25)=0;
    lhs(25,26)=0;
    lhs(25,27)=0;
    lhs(25,28)=0;
    lhs(25,29)=0;
    lhs(25,30)=0;
    lhs(25,31)=0;
    lhs(25,32)=0;
    lhs(25,33)=0;
    lhs(25,34)=0;
    lhs(25,35)=0;
    lhs(26,0)=-clhs3*clhs418;
    lhs(26,1)=-clhs3*clhs419;
    lhs(26,2)=-clhs3*clhs420;
    lhs(26,3)=-clhs37*clhs418;
    lhs(26,4)=-clhs37*clhs419;
    lhs(26,5)=-clhs37*clhs420;
    lhs(26,6)=-clhs38*clhs418;
    lhs(26,7)=-clhs38*clhs419;
    lhs(26,8)=-clhs38*clhs420;
    lhs(26,9)=-clhs39*clhs418;
    lhs(26,10)=-clhs39*clhs419;
    lhs(26,11)=-clhs39*clhs420;
    lhs(26,12)=clhs0*(clhs26*clhs67 + clhs31*clhs80 + clhs421*clhs46 + clhs422*clhs48 + clhs423*clhs46 + clhs424*clhs48 + clhs45*clhs62 + clhs52*clhs75);
    lhs(26,13)=clhs0*(clhs105*clhs52 + clhs110*clhs31 + clhs26*clhs97 + clhs421*clhs82 + clhs422*clhs83 + clhs423*clhs82 + clhs424*clhs83 + clhs45*clhs92);
    lhs(26,14)=clhs0*(clhs112*clhs421 + clhs112*clhs423 + clhs113*clhs422 + clhs113*clhs424 + clhs122*clhs45 + clhs127*clhs26 + clhs135*clhs52 + clhs140*clhs31);
    lhs(26,15)=clhs0*(clhs142*clhs421 + clhs142*clhs423 + clhs143*clhs422 + clhs143*clhs424 + clhs152*clhs45 + clhs157*clhs26 + clhs165*clhs52 + clhs170*clhs31);
    lhs(26,16)=clhs0*(clhs172*clhs421 + clhs172*clhs423 + clhs173*clhs422 + clhs173*clhs424 + clhs182*clhs45 + clhs187*clhs26 + clhs195*clhs52 + clhs200*clhs31);
    lhs(26,17)=clhs0*(clhs202*clhs421 + clhs202*clhs423 + clhs203*clhs422 + clhs203*clhs424 + clhs212*clhs45 + clhs217*clhs26 + clhs225*clhs52 + clhs230*clhs31);
    lhs(26,18)=clhs0*(clhs232*clhs421 + clhs232*clhs423 + clhs233*clhs422 + clhs233*clhs424 + clhs242*clhs45 + clhs247*clhs26 + clhs255*clhs52 + clhs260*clhs31);
    lhs(26,19)=clhs0*(clhs26*clhs277 + clhs262*clhs421 + clhs262*clhs423 + clhs263*clhs422 + clhs263*clhs424 + clhs272*clhs45 + clhs285*clhs52 + clhs290*clhs31);
    lhs(26,20)=clhs0*(clhs26*clhs307 + clhs292*clhs421 + clhs292*clhs423 + clhs293*clhs422 + clhs293*clhs424 + clhs302*clhs45 + clhs31*clhs320 + clhs315*clhs52);
    lhs(26,21)=clhs0*(clhs26*clhs337 + clhs31*clhs350 + clhs322*clhs421 + clhs322*clhs423 + clhs323*clhs422 + clhs323*clhs424 + clhs332*clhs45 + clhs345*clhs52);
    lhs(26,22)=clhs0*(clhs26*clhs367 + clhs31*clhs380 + clhs352*clhs421 + clhs352*clhs423 + clhs353*clhs422 + clhs353*clhs424 + clhs362*clhs45 + clhs375*clhs52);
    lhs(26,23)=clhs0*(clhs26*clhs397 + clhs31*clhs410 + clhs382*clhs421 + clhs382*clhs423 + clhs383*clhs422 + clhs383*clhs424 + clhs392*clhs45 + clhs405*clhs52);
    lhs(26,24)=0;
    lhs(26,25)=0;
    lhs(26,26)=0;
    lhs(26,27)=0;
    lhs(26,28)=0;
    lhs(26,29)=0;
    lhs(26,30)=0;
    lhs(26,31)=0;
    lhs(26,32)=0;
    lhs(26,33)=0;
    lhs(26,34)=0;
    lhs(26,35)=0;
    lhs(27,0)=-clhs426*clhs427;
    lhs(27,1)=-clhs426*clhs428;
    lhs(27,2)=-clhs426*clhs429;
    lhs(27,3)=-clhs427*clhs430;
    lhs(27,4)=-clhs428*clhs430;
    lhs(27,5)=-clhs429*clhs430;
    lhs(27,6)=-clhs427*clhs431;
    lhs(27,7)=-clhs428*clhs431;
    lhs(27,8)=-clhs429*clhs431;
    lhs(27,9)=-clhs427*clhs432;
    lhs(27,10)=-clhs428*clhs432;
    lhs(27,11)=-clhs429*clhs432;
    lhs(27,12)=clhs0*(clhs10*clhs441 + clhs433*clhs55 + clhs434*clhs46 + clhs435*clhs436 + clhs435*clhs439 + clhs437*clhs68 + clhs438*clhs46 + clhs440*clhs5);
    lhs(27,13)=clhs0*(clhs10*clhs444 + clhs433*clhs85 + clhs434*clhs82 + clhs436*clhs442 + clhs437*clhs98 + clhs438*clhs82 + clhs439*clhs442 + clhs443*clhs5);
    lhs(27,14)=clhs0*(clhs10*clhs447 + clhs112*clhs434 + clhs112*clhs438 + clhs115*clhs433 + clhs128*clhs437 + clhs436*clhs445 + clhs439*clhs445 + clhs446*clhs5);
    lhs(27,15)=clhs0*(clhs10*clhs450 + clhs142*clhs434 + clhs142*clhs438 + clhs145*clhs433 + clhs158*clhs437 + clhs436*clhs448 + clhs439*clhs448 + clhs449*clhs5);
    lhs(27,16)=clhs0*(clhs10*clhs453 + clhs172*clhs434 + clhs172*clhs438 + clhs175*clhs433 + clhs188*clhs437 + clhs436*clhs451 + clhs439*clhs451 + clhs452*clhs5);
    lhs(27,17)=clhs0*(clhs10*clhs456 + clhs202*clhs434 + clhs202*clhs438 + clhs205*clhs433 + clhs218*clhs437 + clhs436*clhs454 + clhs439*clhs454 + clhs455*clhs5);
    lhs(27,18)=clhs0*(clhs10*clhs459 + clhs232*clhs434 + clhs232*clhs438 + clhs235*clhs433 + clhs248*clhs437 + clhs436*clhs457 + clhs439*clhs457 + clhs458*clhs5);
    lhs(27,19)=clhs0*(clhs10*clhs462 + clhs262*clhs434 + clhs262*clhs438 + clhs265*clhs433 + clhs278*clhs437 + clhs436*clhs460 + clhs439*clhs460 + clhs461*clhs5);
    lhs(27,20)=clhs0*(clhs10*clhs465 + clhs292*clhs434 + clhs292*clhs438 + clhs295*clhs433 + clhs308*clhs437 + clhs436*clhs463 + clhs439*clhs463 + clhs464*clhs5);
    lhs(27,21)=clhs0*(clhs10*clhs468 + clhs322*clhs434 + clhs322*clhs438 + clhs325*clhs433 + clhs338*clhs437 + clhs436*clhs466 + clhs439*clhs466 + clhs467*clhs5);
    lhs(27,22)=clhs0*(clhs10*clhs471 + clhs352*clhs434 + clhs352*clhs438 + clhs355*clhs433 + clhs368*clhs437 + clhs436*clhs469 + clhs439*clhs469 + clhs470*clhs5);
    lhs(27,23)=clhs0*(clhs10*clhs474 + clhs382*clhs434 + clhs382*clhs438 + clhs385*clhs433 + clhs398*clhs437 + clhs436*clhs472 + clhs439*clhs472 + clhs473*clhs5);
    lhs(27,24)=0;
    lhs(27,25)=0;
    lhs(27,26)=0;
    lhs(27,27)=0;
    lhs(27,28)=0;
    lhs(27,29)=0;
    lhs(27,30)=0;
    lhs(27,31)=0;
    lhs(27,32)=0;
    lhs(27,33)=0;
    lhs(27,34)=0;
    lhs(27,35)=0;
    lhs(28,0)=-clhs426*clhs475;
    lhs(28,1)=-clhs426*clhs476;
    lhs(28,2)=-clhs426*clhs477;
    lhs(28,3)=-clhs430*clhs475;
    lhs(28,4)=-clhs430*clhs476;
    lhs(28,5)=-clhs430*clhs477;
    lhs(28,6)=-clhs431*clhs475;
    lhs(28,7)=-clhs431*clhs476;
    lhs(28,8)=-clhs431*clhs477;
    lhs(28,9)=-clhs432*clhs475;
    lhs(28,10)=-clhs432*clhs476;
    lhs(28,11)=-clhs432*clhs477;
    lhs(28,12)=clhs0*(clhs16*clhs440 + clhs21*clhs441 + clhs433*clhs59 + clhs435*clhs479 + clhs435*clhs481 + clhs437*clhs72 + clhs46*clhs478 + clhs46*clhs480);
    lhs(28,13)=clhs0*(clhs102*clhs437 + clhs16*clhs443 + clhs21*clhs444 + clhs433*clhs89 + clhs442*clhs479 + clhs442*clhs481 + clhs478*clhs82 + clhs480*clhs82);
    lhs(28,14)=clhs0*(clhs112*clhs478 + clhs112*clhs480 + clhs119*clhs433 + clhs132*clhs437 + clhs16*clhs446 + clhs21*clhs447 + clhs445*clhs479 + clhs445*clhs481);
    lhs(28,15)=clhs0*(clhs142*clhs478 + clhs142*clhs480 + clhs149*clhs433 + clhs16*clhs449 + clhs162*clhs437 + clhs21*clhs450 + clhs448*clhs479 + clhs448*clhs481);
    lhs(28,16)=clhs0*(clhs16*clhs452 + clhs172*clhs478 + clhs172*clhs480 + clhs179*clhs433 + clhs192*clhs437 + clhs21*clhs453 + clhs451*clhs479 + clhs451*clhs481);
    lhs(28,17)=clhs0*(clhs16*clhs455 + clhs202*clhs478 + clhs202*clhs480 + clhs209*clhs433 + clhs21*clhs456 + clhs222*clhs437 + clhs454*clhs479 + clhs454*clhs481);
    lhs(28,18)=clhs0*(clhs16*clhs458 + clhs21*clhs459 + clhs232*clhs478 + clhs232*clhs480 + clhs239*clhs433 + clhs252*clhs437 + clhs457*clhs479 + clhs457*clhs481);
    lhs(28,19)=clhs0*(clhs16*clhs461 + clhs21*clhs462 + clhs262*clhs478 + clhs262*clhs480 + clhs269*clhs433 + clhs282*clhs437 + clhs460*clhs479 + clhs460*clhs481);
    lhs(28,20)=clhs0*(clhs16*clhs464 + clhs21*clhs465 + clhs292*clhs478 + clhs292*clhs480 + clhs299*clhs433 + clhs312*clhs437 + clhs463*clhs479 + clhs463*clhs481);
    lhs(28,21)=clhs0*(clhs16*clhs467 + clhs21*clhs468 + clhs322*clhs478 + clhs322*clhs480 + clhs329*clhs433 + clhs342*clhs437 + clhs466*clhs479 + clhs466*clhs481);
    lhs(28,22)=clhs0*(clhs16*clhs470 + clhs21*clhs471 + clhs352*clhs478 + clhs352*clhs480 + clhs359*clhs433 + clhs372*clhs437 + clhs469*clhs479 + clhs469*clhs481);
    lhs(28,23)=clhs0*(clhs16*clhs473 + clhs21*clhs474 + clhs382*clhs478 + clhs382*clhs480 + clhs389*clhs433 + clhs402*clhs437 + clhs472*clhs479 + clhs472*clhs481);
    lhs(28,24)=0;
    lhs(28,25)=0;
    lhs(28,26)=0;
    lhs(28,27)=0;
    lhs(28,28)=0;
    lhs(28,29)=0;
    lhs(28,30)=0;
    lhs(28,31)=0;
    lhs(28,32)=0;
    lhs(28,33)=0;
    lhs(28,34)=0;
    lhs(28,35)=0;
    lhs(29,0)=-clhs426*clhs482;
    lhs(29,1)=-clhs426*clhs483;
    lhs(29,2)=-clhs426*clhs484;
    lhs(29,3)=-clhs430*clhs482;
    lhs(29,4)=-clhs430*clhs483;
    lhs(29,5)=-clhs430*clhs484;
    lhs(29,6)=-clhs431*clhs482;
    lhs(29,7)=-clhs431*clhs483;
    lhs(29,8)=-clhs431*clhs484;
    lhs(29,9)=-clhs432*clhs482;
    lhs(29,10)=-clhs432*clhs483;
    lhs(29,11)=-clhs432*clhs484;
    lhs(29,12)=clhs0*(clhs27*clhs440 + clhs32*clhs441 + clhs433*clhs63 + clhs435*clhs486 + clhs435*clhs488 + clhs437*clhs76 + clhs46*clhs485 + clhs46*clhs487);
    lhs(29,13)=clhs0*(clhs106*clhs437 + clhs27*clhs443 + clhs32*clhs444 + clhs433*clhs93 + clhs442*clhs486 + clhs442*clhs488 + clhs485*clhs82 + clhs487*clhs82);
    lhs(29,14)=clhs0*(clhs112*clhs485 + clhs112*clhs487 + clhs123*clhs433 + clhs136*clhs437 + clhs27*clhs446 + clhs32*clhs447 + clhs445*clhs486 + clhs445*clhs488);
    lhs(29,15)=clhs0*(clhs142*clhs485 + clhs142*clhs487 + clhs153*clhs433 + clhs166*clhs437 + clhs27*clhs449 + clhs32*clhs450 + clhs448*clhs486 + clhs448*clhs488);
    lhs(29,16)=clhs0*(clhs172*clhs485 + clhs172*clhs487 + clhs183*clhs433 + clhs196*clhs437 + clhs27*clhs452 + clhs32*clhs453 + clhs451*clhs486 + clhs451*clhs488);
    lhs(29,17)=clhs0*(clhs202*clhs485 + clhs202*clhs487 + clhs213*clhs433 + clhs226*clhs437 + clhs27*clhs455 + clhs32*clhs456 + clhs454*clhs486 + clhs454*clhs488);
    lhs(29,18)=clhs0*(clhs232*clhs485 + clhs232*clhs487 + clhs243*clhs433 + clhs256*clhs437 + clhs27*clhs458 + clhs32*clhs459 + clhs457*clhs486 + clhs457*clhs488);
    lhs(29,19)=clhs0*(clhs262*clhs485 + clhs262*clhs487 + clhs27*clhs461 + clhs273*clhs433 + clhs286*clhs437 + clhs32*clhs462 + clhs460*clhs486 + clhs460*clhs488);
    lhs(29,20)=clhs0*(clhs27*clhs464 + clhs292*clhs485 + clhs292*clhs487 + clhs303*clhs433 + clhs316*clhs437 + clhs32*clhs465 + clhs463*clhs486 + clhs463*clhs488);
    lhs(29,21)=clhs0*(clhs27*clhs467 + clhs32*clhs468 + clhs322*clhs485 + clhs322*clhs487 + clhs333*clhs433 + clhs346*clhs437 + clhs466*clhs486 + clhs466*clhs488);
    lhs(29,22)=clhs0*(clhs27*clhs470 + clhs32*clhs471 + clhs352*clhs485 + clhs352*clhs487 + clhs363*clhs433 + clhs376*clhs437 + clhs469*clhs486 + clhs469*clhs488);
    lhs(29,23)=clhs0*(clhs27*clhs473 + clhs32*clhs474 + clhs382*clhs485 + clhs382*clhs487 + clhs393*clhs433 + clhs406*clhs437 + clhs472*clhs486 + clhs472*clhs488);
    lhs(29,24)=0;
    lhs(29,25)=0;
    lhs(29,26)=0;
    lhs(29,27)=0;
    lhs(29,28)=0;
    lhs(29,29)=0;
    lhs(29,30)=0;
    lhs(29,31)=0;
    lhs(29,32)=0;
    lhs(29,33)=0;
    lhs(29,34)=0;
    lhs(29,35)=0;
    lhs(30,0)=-clhs490*clhs491;
    lhs(30,1)=-clhs490*clhs492;
    lhs(30,2)=-clhs490*clhs493;
    lhs(30,3)=-clhs491*clhs494;
    lhs(30,4)=-clhs492*clhs494;
    lhs(30,5)=-clhs493*clhs494;
    lhs(30,6)=-clhs491*clhs495;
    lhs(30,7)=-clhs492*clhs495;
    lhs(30,8)=-clhs493*clhs495;
    lhs(30,9)=-clhs491*clhs496;
    lhs(30,10)=-clhs492*clhs496;
    lhs(30,11)=-clhs493*clhs496;
    lhs(30,12)=clhs0*(clhs11*clhs505 + clhs46*clhs498 + clhs46*clhs502 + clhs497*clhs56 + clhs499*clhs500 + clhs499*clhs503 + clhs501*clhs69 + clhs504*clhs6);
    lhs(30,13)=clhs0*(clhs11*clhs508 + clhs497*clhs86 + clhs498*clhs82 + clhs500*clhs506 + clhs501*clhs99 + clhs502*clhs82 + clhs503*clhs506 + clhs507*clhs6);
    lhs(30,14)=clhs0*(clhs11*clhs511 + clhs112*clhs498 + clhs112*clhs502 + clhs116*clhs497 + clhs129*clhs501 + clhs500*clhs509 + clhs503*clhs509 + clhs510*clhs6);
    lhs(30,15)=clhs0*(clhs11*clhs514 + clhs142*clhs498 + clhs142*clhs502 + clhs146*clhs497 + clhs159*clhs501 + clhs500*clhs512 + clhs503*clhs512 + clhs513*clhs6);
    lhs(30,16)=clhs0*(clhs11*clhs517 + clhs172*clhs498 + clhs172*clhs502 + clhs176*clhs497 + clhs189*clhs501 + clhs500*clhs515 + clhs503*clhs515 + clhs516*clhs6);
    lhs(30,17)=clhs0*(clhs11*clhs520 + clhs202*clhs498 + clhs202*clhs502 + clhs206*clhs497 + clhs219*clhs501 + clhs500*clhs518 + clhs503*clhs518 + clhs519*clhs6);
    lhs(30,18)=clhs0*(clhs11*clhs523 + clhs232*clhs498 + clhs232*clhs502 + clhs236*clhs497 + clhs249*clhs501 + clhs500*clhs521 + clhs503*clhs521 + clhs522*clhs6);
    lhs(30,19)=clhs0*(clhs11*clhs526 + clhs262*clhs498 + clhs262*clhs502 + clhs266*clhs497 + clhs279*clhs501 + clhs500*clhs524 + clhs503*clhs524 + clhs525*clhs6);
    lhs(30,20)=clhs0*(clhs11*clhs529 + clhs292*clhs498 + clhs292*clhs502 + clhs296*clhs497 + clhs309*clhs501 + clhs500*clhs527 + clhs503*clhs527 + clhs528*clhs6);
    lhs(30,21)=clhs0*(clhs11*clhs532 + clhs322*clhs498 + clhs322*clhs502 + clhs326*clhs497 + clhs339*clhs501 + clhs500*clhs530 + clhs503*clhs530 + clhs531*clhs6);
    lhs(30,22)=clhs0*(clhs11*clhs535 + clhs352*clhs498 + clhs352*clhs502 + clhs356*clhs497 + clhs369*clhs501 + clhs500*clhs533 + clhs503*clhs533 + clhs534*clhs6);
    lhs(30,23)=clhs0*(clhs11*clhs538 + clhs382*clhs498 + clhs382*clhs502 + clhs386*clhs497 + clhs399*clhs501 + clhs500*clhs536 + clhs503*clhs536 + clhs537*clhs6);
    lhs(30,24)=0;
    lhs(30,25)=0;
    lhs(30,26)=0;
    lhs(30,27)=0;
    lhs(30,28)=0;
    lhs(30,29)=0;
    lhs(30,30)=0;
    lhs(30,31)=0;
    lhs(30,32)=0;
    lhs(30,33)=0;
    lhs(30,34)=0;
    lhs(30,35)=0;
    lhs(31,0)=-clhs490*clhs539;
    lhs(31,1)=-clhs490*clhs540;
    lhs(31,2)=-clhs490*clhs541;
    lhs(31,3)=-clhs494*clhs539;
    lhs(31,4)=-clhs494*clhs540;
    lhs(31,5)=-clhs494*clhs541;
    lhs(31,6)=-clhs495*clhs539;
    lhs(31,7)=-clhs495*clhs540;
    lhs(31,8)=-clhs495*clhs541;
    lhs(31,9)=-clhs496*clhs539;
    lhs(31,10)=-clhs496*clhs540;
    lhs(31,11)=-clhs496*clhs541;
    lhs(31,12)=clhs0*(clhs17*clhs504 + clhs22*clhs505 + clhs46*clhs542 + clhs46*clhs544 + clhs497*clhs60 + clhs499*clhs543 + clhs499*clhs545 + clhs501*clhs73);
    lhs(31,13)=clhs0*(clhs103*clhs501 + clhs17*clhs507 + clhs22*clhs508 + clhs497*clhs90 + clhs506*clhs543 + clhs506*clhs545 + clhs542*clhs82 + clhs544*clhs82);
    lhs(31,14)=clhs0*(clhs112*clhs542 + clhs112*clhs544 + clhs120*clhs497 + clhs133*clhs501 + clhs17*clhs510 + clhs22*clhs511 + clhs509*clhs543 + clhs509*clhs545);
    lhs(31,15)=clhs0*(clhs142*clhs542 + clhs142*clhs544 + clhs150*clhs497 + clhs163*clhs501 + clhs17*clhs513 + clhs22*clhs514 + clhs512*clhs543 + clhs512*clhs545);
    lhs(31,16)=clhs0*(clhs17*clhs516 + clhs172*clhs542 + clhs172*clhs544 + clhs180*clhs497 + clhs193*clhs501 + clhs22*clhs517 + clhs515*clhs543 + clhs515*clhs545);
    lhs(31,17)=clhs0*(clhs17*clhs519 + clhs202*clhs542 + clhs202*clhs544 + clhs210*clhs497 + clhs22*clhs520 + clhs223*clhs501 + clhs518*clhs543 + clhs518*clhs545);
    lhs(31,18)=clhs0*(clhs17*clhs522 + clhs22*clhs523 + clhs232*clhs542 + clhs232*clhs544 + clhs240*clhs497 + clhs253*clhs501 + clhs521*clhs543 + clhs521*clhs545);
    lhs(31,19)=clhs0*(clhs17*clhs525 + clhs22*clhs526 + clhs262*clhs542 + clhs262*clhs544 + clhs270*clhs497 + clhs283*clhs501 + clhs524*clhs543 + clhs524*clhs545);
    lhs(31,20)=clhs0*(clhs17*clhs528 + clhs22*clhs529 + clhs292*clhs542 + clhs292*clhs544 + clhs300*clhs497 + clhs313*clhs501 + clhs527*clhs543 + clhs527*clhs545);
    lhs(31,21)=clhs0*(clhs17*clhs531 + clhs22*clhs532 + clhs322*clhs542 + clhs322*clhs544 + clhs330*clhs497 + clhs343*clhs501 + clhs530*clhs543 + clhs530*clhs545);
    lhs(31,22)=clhs0*(clhs17*clhs534 + clhs22*clhs535 + clhs352*clhs542 + clhs352*clhs544 + clhs360*clhs497 + clhs373*clhs501 + clhs533*clhs543 + clhs533*clhs545);
    lhs(31,23)=clhs0*(clhs17*clhs537 + clhs22*clhs538 + clhs382*clhs542 + clhs382*clhs544 + clhs390*clhs497 + clhs403*clhs501 + clhs536*clhs543 + clhs536*clhs545);
    lhs(31,24)=0;
    lhs(31,25)=0;
    lhs(31,26)=0;
    lhs(31,27)=0;
    lhs(31,28)=0;
    lhs(31,29)=0;
    lhs(31,30)=0;
    lhs(31,31)=0;
    lhs(31,32)=0;
    lhs(31,33)=0;
    lhs(31,34)=0;
    lhs(31,35)=0;
    lhs(32,0)=-clhs490*clhs546;
    lhs(32,1)=-clhs490*clhs547;
    lhs(32,2)=-clhs490*clhs548;
    lhs(32,3)=-clhs494*clhs546;
    lhs(32,4)=-clhs494*clhs547;
    lhs(32,5)=-clhs494*clhs548;
    lhs(32,6)=-clhs495*clhs546;
    lhs(32,7)=-clhs495*clhs547;
    lhs(32,8)=-clhs495*clhs548;
    lhs(32,9)=-clhs496*clhs546;
    lhs(32,10)=-clhs496*clhs547;
    lhs(32,11)=-clhs496*clhs548;
    lhs(32,12)=clhs0*(clhs28*clhs504 + clhs33*clhs505 + clhs46*clhs549 + clhs46*clhs551 + clhs497*clhs64 + clhs499*clhs550 + clhs499*clhs552 + clhs501*clhs77);
    lhs(32,13)=clhs0*(clhs107*clhs501 + clhs28*clhs507 + clhs33*clhs508 + clhs497*clhs94 + clhs506*clhs550 + clhs506*clhs552 + clhs549*clhs82 + clhs551*clhs82);
    lhs(32,14)=clhs0*(clhs112*clhs549 + clhs112*clhs551 + clhs124*clhs497 + clhs137*clhs501 + clhs28*clhs510 + clhs33*clhs511 + clhs509*clhs550 + clhs509*clhs552);
    lhs(32,15)=clhs0*(clhs142*clhs549 + clhs142*clhs551 + clhs154*clhs497 + clhs167*clhs501 + clhs28*clhs513 + clhs33*clhs514 + clhs512*clhs550 + clhs512*clhs552);
    lhs(32,16)=clhs0*(clhs172*clhs549 + clhs172*clhs551 + clhs184*clhs497 + clhs197*clhs501 + clhs28*clhs516 + clhs33*clhs517 + clhs515*clhs550 + clhs515*clhs552);
    lhs(32,17)=clhs0*(clhs202*clhs549 + clhs202*clhs551 + clhs214*clhs497 + clhs227*clhs501 + clhs28*clhs519 + clhs33*clhs520 + clhs518*clhs550 + clhs518*clhs552);
    lhs(32,18)=clhs0*(clhs232*clhs549 + clhs232*clhs551 + clhs244*clhs497 + clhs257*clhs501 + clhs28*clhs522 + clhs33*clhs523 + clhs521*clhs550 + clhs521*clhs552);
    lhs(32,19)=clhs0*(clhs262*clhs549 + clhs262*clhs551 + clhs274*clhs497 + clhs28*clhs525 + clhs287*clhs501 + clhs33*clhs526 + clhs524*clhs550 + clhs524*clhs552);
    lhs(32,20)=clhs0*(clhs28*clhs528 + clhs292*clhs549 + clhs292*clhs551 + clhs304*clhs497 + clhs317*clhs501 + clhs33*clhs529 + clhs527*clhs550 + clhs527*clhs552);
    lhs(32,21)=clhs0*(clhs28*clhs531 + clhs322*clhs549 + clhs322*clhs551 + clhs33*clhs532 + clhs334*clhs497 + clhs347*clhs501 + clhs530*clhs550 + clhs530*clhs552);
    lhs(32,22)=clhs0*(clhs28*clhs534 + clhs33*clhs535 + clhs352*clhs549 + clhs352*clhs551 + clhs364*clhs497 + clhs377*clhs501 + clhs533*clhs550 + clhs533*clhs552);
    lhs(32,23)=clhs0*(clhs28*clhs537 + clhs33*clhs538 + clhs382*clhs549 + clhs382*clhs551 + clhs394*clhs497 + clhs407*clhs501 + clhs536*clhs550 + clhs536*clhs552);
    lhs(32,24)=0;
    lhs(32,25)=0;
    lhs(32,26)=0;
    lhs(32,27)=0;
    lhs(32,28)=0;
    lhs(32,29)=0;
    lhs(32,30)=0;
    lhs(32,31)=0;
    lhs(32,32)=0;
    lhs(32,33)=0;
    lhs(32,34)=0;
    lhs(32,35)=0;
    lhs(33,0)=-clhs554*clhs555;
    lhs(33,1)=-clhs554*clhs556;
    lhs(33,2)=-clhs554*clhs557;
    lhs(33,3)=-clhs555*clhs558;
    lhs(33,4)=-clhs556*clhs558;
    lhs(33,5)=-clhs557*clhs558;
    lhs(33,6)=-clhs555*clhs559;
    lhs(33,7)=-clhs556*clhs559;
    lhs(33,8)=-clhs557*clhs559;
    lhs(33,9)=-clhs555*clhs560;
    lhs(33,10)=-clhs556*clhs560;
    lhs(33,11)=-clhs557*clhs560;
    lhs(33,12)=clhs0*(clhs12*clhs569 + clhs46*clhs562 + clhs46*clhs566 + clhs561*clhs57 + clhs563*clhs564 + clhs563*clhs567 + clhs565*clhs70 + clhs568*clhs7);
    lhs(33,13)=clhs0*(clhs100*clhs565 + clhs12*clhs572 + clhs561*clhs87 + clhs562*clhs82 + clhs564*clhs570 + clhs566*clhs82 + clhs567*clhs570 + clhs571*clhs7);
    lhs(33,14)=clhs0*(clhs112*clhs562 + clhs112*clhs566 + clhs117*clhs561 + clhs12*clhs575 + clhs130*clhs565 + clhs564*clhs573 + clhs567*clhs573 + clhs574*clhs7);
    lhs(33,15)=clhs0*(clhs12*clhs578 + clhs142*clhs562 + clhs142*clhs566 + clhs147*clhs561 + clhs160*clhs565 + clhs564*clhs576 + clhs567*clhs576 + clhs577*clhs7);
    lhs(33,16)=clhs0*(clhs12*clhs581 + clhs172*clhs562 + clhs172*clhs566 + clhs177*clhs561 + clhs190*clhs565 + clhs564*clhs579 + clhs567*clhs579 + clhs580*clhs7);
    lhs(33,17)=clhs0*(clhs12*clhs584 + clhs202*clhs562 + clhs202*clhs566 + clhs207*clhs561 + clhs220*clhs565 + clhs564*clhs582 + clhs567*clhs582 + clhs583*clhs7);
    lhs(33,18)=clhs0*(clhs12*clhs587 + clhs232*clhs562 + clhs232*clhs566 + clhs237*clhs561 + clhs250*clhs565 + clhs564*clhs585 + clhs567*clhs585 + clhs586*clhs7);
    lhs(33,19)=clhs0*(clhs12*clhs590 + clhs262*clhs562 + clhs262*clhs566 + clhs267*clhs561 + clhs280*clhs565 + clhs564*clhs588 + clhs567*clhs588 + clhs589*clhs7);
    lhs(33,20)=clhs0*(clhs12*clhs593 + clhs292*clhs562 + clhs292*clhs566 + clhs297*clhs561 + clhs310*clhs565 + clhs564*clhs591 + clhs567*clhs591 + clhs592*clhs7);
    lhs(33,21)=clhs0*(clhs12*clhs596 + clhs322*clhs562 + clhs322*clhs566 + clhs327*clhs561 + clhs340*clhs565 + clhs564*clhs594 + clhs567*clhs594 + clhs595*clhs7);
    lhs(33,22)=clhs0*(clhs12*clhs599 + clhs352*clhs562 + clhs352*clhs566 + clhs357*clhs561 + clhs370*clhs565 + clhs564*clhs597 + clhs567*clhs597 + clhs598*clhs7);
    lhs(33,23)=clhs0*(clhs12*clhs602 + clhs382*clhs562 + clhs382*clhs566 + clhs387*clhs561 + clhs400*clhs565 + clhs564*clhs600 + clhs567*clhs600 + clhs601*clhs7);
    lhs(33,24)=0;
    lhs(33,25)=0;
    lhs(33,26)=0;
    lhs(33,27)=0;
    lhs(33,28)=0;
    lhs(33,29)=0;
    lhs(33,30)=0;
    lhs(33,31)=0;
    lhs(33,32)=0;
    lhs(33,33)=0;
    lhs(33,34)=0;
    lhs(33,35)=0;
    lhs(34,0)=-clhs554*clhs603;
    lhs(34,1)=-clhs554*clhs604;
    lhs(34,2)=-clhs554*clhs605;
    lhs(34,3)=-clhs558*clhs603;
    lhs(34,4)=-clhs558*clhs604;
    lhs(34,5)=-clhs558*clhs605;
    lhs(34,6)=-clhs559*clhs603;
    lhs(34,7)=-clhs559*clhs604;
    lhs(34,8)=-clhs559*clhs605;
    lhs(34,9)=-clhs560*clhs603;
    lhs(34,10)=-clhs560*clhs604;
    lhs(34,11)=-clhs560*clhs605;
    lhs(34,12)=clhs0*(clhs18*clhs568 + clhs23*clhs569 + clhs46*clhs606 + clhs46*clhs608 + clhs561*clhs61 + clhs563*clhs607 + clhs563*clhs609 + clhs565*clhs74);
    lhs(34,13)=clhs0*(clhs104*clhs565 + clhs18*clhs571 + clhs23*clhs572 + clhs561*clhs91 + clhs570*clhs607 + clhs570*clhs609 + clhs606*clhs82 + clhs608*clhs82);
    lhs(34,14)=clhs0*(clhs112*clhs606 + clhs112*clhs608 + clhs121*clhs561 + clhs134*clhs565 + clhs18*clhs574 + clhs23*clhs575 + clhs573*clhs607 + clhs573*clhs609);
    lhs(34,15)=clhs0*(clhs142*clhs606 + clhs142*clhs608 + clhs151*clhs561 + clhs164*clhs565 + clhs18*clhs577 + clhs23*clhs578 + clhs576*clhs607 + clhs576*clhs609);
    lhs(34,16)=clhs0*(clhs172*clhs606 + clhs172*clhs608 + clhs18*clhs580 + clhs181*clhs561 + clhs194*clhs565 + clhs23*clhs581 + clhs579*clhs607 + clhs579*clhs609);
    lhs(34,17)=clhs0*(clhs18*clhs583 + clhs202*clhs606 + clhs202*clhs608 + clhs211*clhs561 + clhs224*clhs565 + clhs23*clhs584 + clhs582*clhs607 + clhs582*clhs609);
    lhs(34,18)=clhs0*(clhs18*clhs586 + clhs23*clhs587 + clhs232*clhs606 + clhs232*clhs608 + clhs241*clhs561 + clhs254*clhs565 + clhs585*clhs607 + clhs585*clhs609);
    lhs(34,19)=clhs0*(clhs18*clhs589 + clhs23*clhs590 + clhs262*clhs606 + clhs262*clhs608 + clhs271*clhs561 + clhs284*clhs565 + clhs588*clhs607 + clhs588*clhs609);
    lhs(34,20)=clhs0*(clhs18*clhs592 + clhs23*clhs593 + clhs292*clhs606 + clhs292*clhs608 + clhs301*clhs561 + clhs314*clhs565 + clhs591*clhs607 + clhs591*clhs609);
    lhs(34,21)=clhs0*(clhs18*clhs595 + clhs23*clhs596 + clhs322*clhs606 + clhs322*clhs608 + clhs331*clhs561 + clhs344*clhs565 + clhs594*clhs607 + clhs594*clhs609);
    lhs(34,22)=clhs0*(clhs18*clhs598 + clhs23*clhs599 + clhs352*clhs606 + clhs352*clhs608 + clhs361*clhs561 + clhs374*clhs565 + clhs597*clhs607 + clhs597*clhs609);
    lhs(34,23)=clhs0*(clhs18*clhs601 + clhs23*clhs602 + clhs382*clhs606 + clhs382*clhs608 + clhs391*clhs561 + clhs404*clhs565 + clhs600*clhs607 + clhs600*clhs609);
    lhs(34,24)=0;
    lhs(34,25)=0;
    lhs(34,26)=0;
    lhs(34,27)=0;
    lhs(34,28)=0;
    lhs(34,29)=0;
    lhs(34,30)=0;
    lhs(34,31)=0;
    lhs(34,32)=0;
    lhs(34,33)=0;
    lhs(34,34)=0;
    lhs(34,35)=0;
    lhs(35,0)=-clhs554*clhs610;
    lhs(35,1)=-clhs554*clhs611;
    lhs(35,2)=-clhs554*clhs612;
    lhs(35,3)=-clhs558*clhs610;
    lhs(35,4)=-clhs558*clhs611;
    lhs(35,5)=-clhs558*clhs612;
    lhs(35,6)=-clhs559*clhs610;
    lhs(35,7)=-clhs559*clhs611;
    lhs(35,8)=-clhs559*clhs612;
    lhs(35,9)=-clhs560*clhs610;
    lhs(35,10)=-clhs560*clhs611;
    lhs(35,11)=-clhs560*clhs612;
    lhs(35,12)=clhs0*(clhs29*clhs568 + clhs34*clhs569 + clhs46*clhs613 + clhs46*clhs615 + clhs561*clhs65 + clhs563*clhs614 + clhs563*clhs616 + clhs565*clhs78);
    lhs(35,13)=clhs0*(clhs108*clhs565 + clhs29*clhs571 + clhs34*clhs572 + clhs561*clhs95 + clhs570*clhs614 + clhs570*clhs616 + clhs613*clhs82 + clhs615*clhs82);
    lhs(35,14)=clhs0*(clhs112*clhs613 + clhs112*clhs615 + clhs125*clhs561 + clhs138*clhs565 + clhs29*clhs574 + clhs34*clhs575 + clhs573*clhs614 + clhs573*clhs616);
    lhs(35,15)=clhs0*(clhs142*clhs613 + clhs142*clhs615 + clhs155*clhs561 + clhs168*clhs565 + clhs29*clhs577 + clhs34*clhs578 + clhs576*clhs614 + clhs576*clhs616);
    lhs(35,16)=clhs0*(clhs172*clhs613 + clhs172*clhs615 + clhs185*clhs561 + clhs198*clhs565 + clhs29*clhs580 + clhs34*clhs581 + clhs579*clhs614 + clhs579*clhs616);
    lhs(35,17)=clhs0*(clhs202*clhs613 + clhs202*clhs615 + clhs215*clhs561 + clhs228*clhs565 + clhs29*clhs583 + clhs34*clhs584 + clhs582*clhs614 + clhs582*clhs616);
    lhs(35,18)=clhs0*(clhs232*clhs613 + clhs232*clhs615 + clhs245*clhs561 + clhs258*clhs565 + clhs29*clhs586 + clhs34*clhs587 + clhs585*clhs614 + clhs585*clhs616);
    lhs(35,19)=clhs0*(clhs262*clhs613 + clhs262*clhs615 + clhs275*clhs561 + clhs288*clhs565 + clhs29*clhs589 + clhs34*clhs590 + clhs588*clhs614 + clhs588*clhs616);
    lhs(35,20)=clhs0*(clhs29*clhs592 + clhs292*clhs613 + clhs292*clhs615 + clhs305*clhs561 + clhs318*clhs565 + clhs34*clhs593 + clhs591*clhs614 + clhs591*clhs616);
    lhs(35,21)=clhs0*(clhs29*clhs595 + clhs322*clhs613 + clhs322*clhs615 + clhs335*clhs561 + clhs34*clhs596 + clhs348*clhs565 + clhs594*clhs614 + clhs594*clhs616);
    lhs(35,22)=clhs0*(clhs29*clhs598 + clhs34*clhs599 + clhs352*clhs613 + clhs352*clhs615 + clhs365*clhs561 + clhs378*clhs565 + clhs597*clhs614 + clhs597*clhs616);
    lhs(35,23)=clhs0*(clhs29*clhs601 + clhs34*clhs602 + clhs382*clhs613 + clhs382*clhs615 + clhs395*clhs561 + clhs408*clhs565 + clhs600*clhs614 + clhs600*clhs616);
    lhs(35,24)=0;
    lhs(35,25)=0;
    lhs(35,26)=0;
    lhs(35,27)=0;
    lhs(35,28)=0;
    lhs(35,29)=0;
    lhs(35,30)=0;
    lhs(35,31)=0;
    lhs(35,32)=0;
    lhs(35,33)=0;
    lhs(35,34)=0;
    lhs(35,35)=0;

    
    return lhs;
}
    /***********************************************************************************/
    /***********************************************************************************/
    
    static inline bounded_matrix<double,36,36> ComputeGaussPointSlipLHS(
        const array_1d<double,4> N1, 
        const array_1d<double,4> N2, 
        const array_1d<double,4> Phi, 
        const double detJ, 
        const double mu, 
        const ContactData<3,4>& rContactData
        )
{
    bounded_matrix<double,36,36> lhs;
    
    const bounded_matrix<double, 4, 3> normalslave = rContactData.Normal_s;
    const bounded_matrix<double, 4, 3> tan1slave   = rContactData.Tangent_xi_s;
    const bounded_matrix<double, 4, 3> tan2slave   = rContactData.Tangent_eta_s;
    const bounded_matrix<double, 4, 3> lm          = rContactData.LagrangeMultipliers;
    const double Dt              = rContactData.Dt;

//     const double sign_tangpress = boost::math::sign(augmented_tangent_lm);
    
    const bounded_matrix<double, 4, 3> v1 = rContactData.v1;
    const bounded_matrix<double, 4, 3> v2 = rContactData.v2;
    
    const std::vector<double> DeltaJs = rContactData.DeltaJ_s;
    const std::vector<array_1d<double,4>> DeltaPhi = rContactData.DeltaPhi;
    const std::vector<bounded_matrix<double, 4, 3>> DeltaNormals     = rContactData.Delta_Normal_s;
    const std::vector<bounded_matrix<double, 4, 3>> Deltatangentxis  = rContactData.Delta_Tangent_xi_s;
    const std::vector<bounded_matrix<double, 4, 3>> Deltatangentetas = rContactData.Delta_Tangent_eta_s;

    const double clhs0 =     1.0/Dt;
    const double clhs1 =     Phi[0]; // PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs2 =     detJ; // DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs3 =     N2[0]*clhs0*clhs1*clhs2;
    const double clhs4 =     tan1slave(0,0); // TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs5 =     tan1slave(1,0); // TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs6 =     tan1slave(2,0); // TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs7 =     tan1slave(3,0); // TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs8 =     N1[0]*clhs4 + N1[1]*clhs5 + N1[2]*clhs6 + N1[3]*clhs7;
    const double clhs9 =     tan2slave(0,0); // TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs10 =     tan2slave(1,0); // TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs11 =     tan2slave(2,0); // TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs12 =     tan2slave(3,0); // TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs13 =     N1[0]*clhs9 + N1[1]*clhs10 + N1[2]*clhs11 + N1[3]*clhs12;
    const double clhs14 =     clhs13*clhs9 + clhs4*clhs8;
    const double clhs15 =     tan1slave(0,1); // TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs16 =     tan1slave(1,1); // TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs17 =     tan1slave(2,1); // TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs18 =     tan1slave(3,1); // TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs19 =     N1[0]*clhs15 + N1[1]*clhs16 + N1[2]*clhs17 + N1[3]*clhs18;
    const double clhs20 =     tan2slave(0,1); // TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs21 =     tan2slave(1,1); // TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs22 =     tan2slave(2,1); // TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs23 =     tan2slave(3,1); // TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs24 =     N1[0]*clhs20 + N1[1]*clhs21 + N1[2]*clhs22 + N1[3]*clhs23;
    const double clhs25 =     clhs19*clhs4 + clhs24*clhs9;
    const double clhs26 =     tan1slave(0,2); // TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs27 =     tan1slave(1,2); // TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs28 =     tan1slave(2,2); // TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs29 =     tan1slave(3,2); // TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs30 =     N1[0]*clhs26 + N1[1]*clhs27 + N1[2]*clhs28 + N1[3]*clhs29;
    const double clhs31 =     tan2slave(0,2); // TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs32 =     tan2slave(1,2); // TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs33 =     tan2slave(2,2); // TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs34 =     tan2slave(3,2); // TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs35 =     N1[0]*clhs31 + N1[1]*clhs32 + N1[2]*clhs33 + N1[3]*clhs34;
    const double clhs36 =     clhs30*clhs4 + clhs35*clhs9;
    const double clhs37 =     N2[1]*clhs0*clhs1*clhs2;
    const double clhs38 =     N2[2]*clhs0*clhs1*clhs2;
    const double clhs39 =     N2[3]*clhs0*clhs1*clhs2;
    const double clhs40 =     Deltatangentxis[0](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs41 =     N1[0]*(Dt*v1(0,0)) + N1[1]*(Dt*v1(1,0)) + N1[2]*(Dt*v1(2,0)) + N1[3]*(Dt*v1(3,0)) - N2[0]*(Dt*v2(0,0)) - N2[1]*(Dt*v2(1,0)) - N2[2]*(Dt*v2(2,0)) - N2[3]*(Dt*v2(3,0));
    const double clhs42 =     N1[0]*(Dt*v1(0,1)) + N1[1]*(Dt*v1(1,1)) + N1[2]*(Dt*v1(2,1)) + N1[3]*(Dt*v1(3,1)) - N2[0]*(Dt*v2(0,1)) - N2[1]*(Dt*v2(1,1)) - N2[2]*(Dt*v2(2,1)) - N2[3]*(Dt*v2(3,1));
    const double clhs43 =     N1[0]*(Dt*v1(0,2)) + N1[1]*(Dt*v1(1,2)) + N1[2]*(Dt*v1(2,2)) + N1[3]*(Dt*v1(3,2)) - N2[0]*(Dt*v2(0,2)) - N2[1]*(Dt*v2(1,2)) - N2[2]*(Dt*v2(2,2)) - N2[3]*(Dt*v2(3,2));
    const double clhs44 =     clhs19*clhs42 + clhs30*clhs43 + clhs41*clhs8;
    const double clhs45 =     clhs1*clhs2*clhs44;
    const double clhs46 =     DeltaJs[0]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs47 =     clhs1*clhs4*clhs44;
    const double clhs48 =     DeltaPhi[0][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs49 =     clhs2*clhs4*clhs44;
    const double clhs50 =     Deltatangentetas[0](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs51 =     clhs13*clhs41 + clhs24*clhs42 + clhs35*clhs43;
    const double clhs52 =     clhs1*clhs2*clhs51;
    const double clhs53 =     clhs1*clhs51*clhs9;
    const double clhs54 =     clhs2*clhs51*clhs9;
    const double clhs55 =     Deltatangentxis[0](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs56 =     Deltatangentxis[0](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs57 =     Deltatangentxis[0](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs58 =     Deltatangentxis[0](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs59 =     Deltatangentxis[0](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs60 =     Deltatangentxis[0](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs61 =     Deltatangentxis[0](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs62 =     Deltatangentxis[0](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs63 =     Deltatangentxis[0](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs64 =     Deltatangentxis[0](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs65 =     Deltatangentxis[0](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs66 =     N1[0]*clhs8 + clhs41*(N1[0]*clhs40 + N1[1]*clhs55 + N1[2]*clhs56 + N1[3]*clhs57) + clhs42*(N1[0]*clhs58 + N1[1]*clhs59 + N1[2]*clhs60 + N1[3]*clhs61) + clhs43*(N1[0]*clhs62 + N1[1]*clhs63 + N1[2]*clhs64 + N1[3]*clhs65);
    const double clhs67 =     clhs1*clhs2*clhs66;
    const double clhs68 =     Deltatangentetas[0](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs69 =     Deltatangentetas[0](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs70 =     Deltatangentetas[0](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs71 =     Deltatangentetas[0](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs72 =     Deltatangentetas[0](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs73 =     Deltatangentetas[0](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs74 =     Deltatangentetas[0](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs75 =     Deltatangentetas[0](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs76 =     Deltatangentetas[0](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs77 =     Deltatangentetas[0](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs78 =     Deltatangentetas[0](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs79 =     N1[0]*clhs13 + clhs41*(N1[0]*clhs50 + N1[1]*clhs68 + N1[2]*clhs69 + N1[3]*clhs70) + clhs42*(N1[0]*clhs71 + N1[1]*clhs72 + N1[2]*clhs73 + N1[3]*clhs74) + clhs43*(N1[0]*clhs75 + N1[1]*clhs76 + N1[2]*clhs77 + N1[3]*clhs78);
    const double clhs80 =     clhs1*clhs2*clhs79;
    const double clhs81 =     Deltatangentxis[1](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs82 =     DeltaJs[1]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs83 =     DeltaPhi[1][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs84 =     Deltatangentetas[1](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs85 =     Deltatangentxis[1](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs86 =     Deltatangentxis[1](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs87 =     Deltatangentxis[1](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs88 =     Deltatangentxis[1](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs89 =     Deltatangentxis[1](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs90 =     Deltatangentxis[1](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs91 =     Deltatangentxis[1](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs92 =     Deltatangentxis[1](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs93 =     Deltatangentxis[1](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs94 =     Deltatangentxis[1](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs95 =     Deltatangentxis[1](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs96 =     N1[0]*clhs19 + clhs41*(N1[0]*clhs81 + N1[1]*clhs85 + N1[2]*clhs86 + N1[3]*clhs87) + clhs42*(N1[0]*clhs88 + N1[1]*clhs89 + N1[2]*clhs90 + N1[3]*clhs91) + clhs43*(N1[0]*clhs92 + N1[1]*clhs93 + N1[2]*clhs94 + N1[3]*clhs95);
    const double clhs97 =     clhs1*clhs2*clhs96;
    const double clhs98 =     Deltatangentetas[1](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs99 =     Deltatangentetas[1](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs100 =     Deltatangentetas[1](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs101 =     Deltatangentetas[1](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs102 =     Deltatangentetas[1](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs103 =     Deltatangentetas[1](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs104 =     Deltatangentetas[1](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs105 =     Deltatangentetas[1](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs106 =     Deltatangentetas[1](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs107 =     Deltatangentetas[1](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs108 =     Deltatangentetas[1](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs109 =     N1[0]*clhs24 + clhs41*(N1[0]*clhs84 + N1[1]*clhs98 + N1[2]*clhs99 + N1[3]*clhs100) + clhs42*(N1[0]*clhs101 + N1[1]*clhs102 + N1[2]*clhs103 + N1[3]*clhs104) + clhs43*(N1[0]*clhs105 + N1[1]*clhs106 + N1[2]*clhs107 + N1[3]*clhs108);
    const double clhs110 =     clhs1*clhs109*clhs2;
    const double clhs111 =     Deltatangentxis[2](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs112 =     DeltaJs[2]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs113 =     DeltaPhi[2][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs114 =     Deltatangentetas[2](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs115 =     Deltatangentxis[2](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs116 =     Deltatangentxis[2](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs117 =     Deltatangentxis[2](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs118 =     Deltatangentxis[2](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs119 =     Deltatangentxis[2](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs120 =     Deltatangentxis[2](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs121 =     Deltatangentxis[2](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs122 =     Deltatangentxis[2](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs123 =     Deltatangentxis[2](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs124 =     Deltatangentxis[2](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs125 =     Deltatangentxis[2](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs126 =     N1[0]*clhs30 + clhs41*(N1[0]*clhs111 + N1[1]*clhs115 + N1[2]*clhs116 + N1[3]*clhs117) + clhs42*(N1[0]*clhs118 + N1[1]*clhs119 + N1[2]*clhs120 + N1[3]*clhs121) + clhs43*(N1[0]*clhs122 + N1[1]*clhs123 + N1[2]*clhs124 + N1[3]*clhs125);
    const double clhs127 =     clhs1*clhs126*clhs2;
    const double clhs128 =     Deltatangentetas[2](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs129 =     Deltatangentetas[2](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs130 =     Deltatangentetas[2](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs131 =     Deltatangentetas[2](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs132 =     Deltatangentetas[2](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs133 =     Deltatangentetas[2](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs134 =     Deltatangentetas[2](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs135 =     Deltatangentetas[2](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs136 =     Deltatangentetas[2](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs137 =     Deltatangentetas[2](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs138 =     Deltatangentetas[2](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs139 =     N1[0]*clhs35 + clhs41*(N1[0]*clhs114 + N1[1]*clhs128 + N1[2]*clhs129 + N1[3]*clhs130) + clhs42*(N1[0]*clhs131 + N1[1]*clhs132 + N1[2]*clhs133 + N1[3]*clhs134) + clhs43*(N1[0]*clhs135 + N1[1]*clhs136 + N1[2]*clhs137 + N1[3]*clhs138);
    const double clhs140 =     clhs1*clhs139*clhs2;
    const double clhs141 =     Deltatangentxis[3](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs142 =     DeltaJs[3]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs143 =     DeltaPhi[3][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs144 =     Deltatangentetas[3](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs145 =     Deltatangentxis[3](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs146 =     Deltatangentxis[3](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs147 =     Deltatangentxis[3](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs148 =     Deltatangentxis[3](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs149 =     Deltatangentxis[3](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs150 =     Deltatangentxis[3](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs151 =     Deltatangentxis[3](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs152 =     Deltatangentxis[3](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs153 =     Deltatangentxis[3](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs154 =     Deltatangentxis[3](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs155 =     Deltatangentxis[3](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs156 =     N1[1]*clhs8 + clhs41*(N1[0]*clhs141 + N1[1]*clhs145 + N1[2]*clhs146 + N1[3]*clhs147) + clhs42*(N1[0]*clhs148 + N1[1]*clhs149 + N1[2]*clhs150 + N1[3]*clhs151) + clhs43*(N1[0]*clhs152 + N1[1]*clhs153 + N1[2]*clhs154 + N1[3]*clhs155);
    const double clhs157 =     clhs1*clhs156*clhs2;
    const double clhs158 =     Deltatangentetas[3](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs159 =     Deltatangentetas[3](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs160 =     Deltatangentetas[3](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs161 =     Deltatangentetas[3](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs162 =     Deltatangentetas[3](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs163 =     Deltatangentetas[3](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs164 =     Deltatangentetas[3](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs165 =     Deltatangentetas[3](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs166 =     Deltatangentetas[3](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs167 =     Deltatangentetas[3](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs168 =     Deltatangentetas[3](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs169 =     N1[1]*clhs13 + clhs41*(N1[0]*clhs144 + N1[1]*clhs158 + N1[2]*clhs159 + N1[3]*clhs160) + clhs42*(N1[0]*clhs161 + N1[1]*clhs162 + N1[2]*clhs163 + N1[3]*clhs164) + clhs43*(N1[0]*clhs165 + N1[1]*clhs166 + N1[2]*clhs167 + N1[3]*clhs168);
    const double clhs170 =     clhs1*clhs169*clhs2;
    const double clhs171 =     Deltatangentxis[4](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs172 =     DeltaJs[4]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs173 =     DeltaPhi[4][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs174 =     Deltatangentetas[4](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs175 =     Deltatangentxis[4](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs176 =     Deltatangentxis[4](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs177 =     Deltatangentxis[4](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs178 =     Deltatangentxis[4](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs179 =     Deltatangentxis[4](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs180 =     Deltatangentxis[4](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs181 =     Deltatangentxis[4](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs182 =     Deltatangentxis[4](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs183 =     Deltatangentxis[4](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs184 =     Deltatangentxis[4](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs185 =     Deltatangentxis[4](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs186 =     N1[1]*clhs19 + clhs41*(N1[0]*clhs171 + N1[1]*clhs175 + N1[2]*clhs176 + N1[3]*clhs177) + clhs42*(N1[0]*clhs178 + N1[1]*clhs179 + N1[2]*clhs180 + N1[3]*clhs181) + clhs43*(N1[0]*clhs182 + N1[1]*clhs183 + N1[2]*clhs184 + N1[3]*clhs185);
    const double clhs187 =     clhs1*clhs186*clhs2;
    const double clhs188 =     Deltatangentetas[4](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs189 =     Deltatangentetas[4](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs190 =     Deltatangentetas[4](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs191 =     Deltatangentetas[4](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs192 =     Deltatangentetas[4](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs193 =     Deltatangentetas[4](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs194 =     Deltatangentetas[4](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs195 =     Deltatangentetas[4](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs196 =     Deltatangentetas[4](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs197 =     Deltatangentetas[4](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs198 =     Deltatangentetas[4](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs199 =     N1[1]*clhs24 + clhs41*(N1[0]*clhs174 + N1[1]*clhs188 + N1[2]*clhs189 + N1[3]*clhs190) + clhs42*(N1[0]*clhs191 + N1[1]*clhs192 + N1[2]*clhs193 + N1[3]*clhs194) + clhs43*(N1[0]*clhs195 + N1[1]*clhs196 + N1[2]*clhs197 + N1[3]*clhs198);
    const double clhs200 =     clhs1*clhs199*clhs2;
    const double clhs201 =     Deltatangentxis[5](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs202 =     DeltaJs[5]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs203 =     DeltaPhi[5][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs204 =     Deltatangentetas[5](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs205 =     Deltatangentxis[5](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs206 =     Deltatangentxis[5](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs207 =     Deltatangentxis[5](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs208 =     Deltatangentxis[5](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs209 =     Deltatangentxis[5](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs210 =     Deltatangentxis[5](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs211 =     Deltatangentxis[5](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs212 =     Deltatangentxis[5](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs213 =     Deltatangentxis[5](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs214 =     Deltatangentxis[5](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs215 =     Deltatangentxis[5](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs216 =     N1[1]*clhs30 + clhs41*(N1[0]*clhs201 + N1[1]*clhs205 + N1[2]*clhs206 + N1[3]*clhs207) + clhs42*(N1[0]*clhs208 + N1[1]*clhs209 + N1[2]*clhs210 + N1[3]*clhs211) + clhs43*(N1[0]*clhs212 + N1[1]*clhs213 + N1[2]*clhs214 + N1[3]*clhs215);
    const double clhs217 =     clhs1*clhs2*clhs216;
    const double clhs218 =     Deltatangentetas[5](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs219 =     Deltatangentetas[5](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs220 =     Deltatangentetas[5](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs221 =     Deltatangentetas[5](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs222 =     Deltatangentetas[5](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs223 =     Deltatangentetas[5](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs224 =     Deltatangentetas[5](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs225 =     Deltatangentetas[5](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs226 =     Deltatangentetas[5](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs227 =     Deltatangentetas[5](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs228 =     Deltatangentetas[5](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs229 =     N1[1]*clhs35 + clhs41*(N1[0]*clhs204 + N1[1]*clhs218 + N1[2]*clhs219 + N1[3]*clhs220) + clhs42*(N1[0]*clhs221 + N1[1]*clhs222 + N1[2]*clhs223 + N1[3]*clhs224) + clhs43*(N1[0]*clhs225 + N1[1]*clhs226 + N1[2]*clhs227 + N1[3]*clhs228);
    const double clhs230 =     clhs1*clhs2*clhs229;
    const double clhs231 =     Deltatangentxis[6](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs232 =     DeltaJs[6]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs233 =     DeltaPhi[6][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs234 =     Deltatangentetas[6](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs235 =     Deltatangentxis[6](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs236 =     Deltatangentxis[6](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs237 =     Deltatangentxis[6](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs238 =     Deltatangentxis[6](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs239 =     Deltatangentxis[6](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs240 =     Deltatangentxis[6](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs241 =     Deltatangentxis[6](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs242 =     Deltatangentxis[6](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs243 =     Deltatangentxis[6](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs244 =     Deltatangentxis[6](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs245 =     Deltatangentxis[6](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs246 =     N1[2]*clhs8 + clhs41*(N1[0]*clhs231 + N1[1]*clhs235 + N1[2]*clhs236 + N1[3]*clhs237) + clhs42*(N1[0]*clhs238 + N1[1]*clhs239 + N1[2]*clhs240 + N1[3]*clhs241) + clhs43*(N1[0]*clhs242 + N1[1]*clhs243 + N1[2]*clhs244 + N1[3]*clhs245);
    const double clhs247 =     clhs1*clhs2*clhs246;
    const double clhs248 =     Deltatangentetas[6](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs249 =     Deltatangentetas[6](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs250 =     Deltatangentetas[6](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs251 =     Deltatangentetas[6](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs252 =     Deltatangentetas[6](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs253 =     Deltatangentetas[6](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs254 =     Deltatangentetas[6](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs255 =     Deltatangentetas[6](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs256 =     Deltatangentetas[6](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs257 =     Deltatangentetas[6](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs258 =     Deltatangentetas[6](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs259 =     N1[2]*clhs13 + clhs41*(N1[0]*clhs234 + N1[1]*clhs248 + N1[2]*clhs249 + N1[3]*clhs250) + clhs42*(N1[0]*clhs251 + N1[1]*clhs252 + N1[2]*clhs253 + N1[3]*clhs254) + clhs43*(N1[0]*clhs255 + N1[1]*clhs256 + N1[2]*clhs257 + N1[3]*clhs258);
    const double clhs260 =     clhs1*clhs2*clhs259;
    const double clhs261 =     Deltatangentxis[7](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs262 =     DeltaJs[7]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs263 =     DeltaPhi[7][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs264 =     Deltatangentetas[7](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs265 =     Deltatangentxis[7](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs266 =     Deltatangentxis[7](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs267 =     Deltatangentxis[7](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs268 =     Deltatangentxis[7](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs269 =     Deltatangentxis[7](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs270 =     Deltatangentxis[7](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs271 =     Deltatangentxis[7](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs272 =     Deltatangentxis[7](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs273 =     Deltatangentxis[7](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs274 =     Deltatangentxis[7](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs275 =     Deltatangentxis[7](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs276 =     N1[2]*clhs19 + clhs41*(N1[0]*clhs261 + N1[1]*clhs265 + N1[2]*clhs266 + N1[3]*clhs267) + clhs42*(N1[0]*clhs268 + N1[1]*clhs269 + N1[2]*clhs270 + N1[3]*clhs271) + clhs43*(N1[0]*clhs272 + N1[1]*clhs273 + N1[2]*clhs274 + N1[3]*clhs275);
    const double clhs277 =     clhs1*clhs2*clhs276;
    const double clhs278 =     Deltatangentetas[7](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs279 =     Deltatangentetas[7](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs280 =     Deltatangentetas[7](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs281 =     Deltatangentetas[7](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs282 =     Deltatangentetas[7](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs283 =     Deltatangentetas[7](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs284 =     Deltatangentetas[7](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs285 =     Deltatangentetas[7](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs286 =     Deltatangentetas[7](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs287 =     Deltatangentetas[7](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs288 =     Deltatangentetas[7](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs289 =     N1[2]*clhs24 + clhs41*(N1[0]*clhs264 + N1[1]*clhs278 + N1[2]*clhs279 + N1[3]*clhs280) + clhs42*(N1[0]*clhs281 + N1[1]*clhs282 + N1[2]*clhs283 + N1[3]*clhs284) + clhs43*(N1[0]*clhs285 + N1[1]*clhs286 + N1[2]*clhs287 + N1[3]*clhs288);
    const double clhs290 =     clhs1*clhs2*clhs289;
    const double clhs291 =     Deltatangentxis[8](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs292 =     DeltaJs[8]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs293 =     DeltaPhi[8][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs294 =     Deltatangentetas[8](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs295 =     Deltatangentxis[8](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs296 =     Deltatangentxis[8](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs297 =     Deltatangentxis[8](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs298 =     Deltatangentxis[8](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs299 =     Deltatangentxis[8](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs300 =     Deltatangentxis[8](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs301 =     Deltatangentxis[8](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs302 =     Deltatangentxis[8](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs303 =     Deltatangentxis[8](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs304 =     Deltatangentxis[8](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs305 =     Deltatangentxis[8](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs306 =     N1[2]*clhs30 + clhs41*(N1[0]*clhs291 + N1[1]*clhs295 + N1[2]*clhs296 + N1[3]*clhs297) + clhs42*(N1[0]*clhs298 + N1[1]*clhs299 + N1[2]*clhs300 + N1[3]*clhs301) + clhs43*(N1[0]*clhs302 + N1[1]*clhs303 + N1[2]*clhs304 + N1[3]*clhs305);
    const double clhs307 =     clhs1*clhs2*clhs306;
    const double clhs308 =     Deltatangentetas[8](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs309 =     Deltatangentetas[8](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs310 =     Deltatangentetas[8](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs311 =     Deltatangentetas[8](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs312 =     Deltatangentetas[8](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs313 =     Deltatangentetas[8](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs314 =     Deltatangentetas[8](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs315 =     Deltatangentetas[8](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs316 =     Deltatangentetas[8](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs317 =     Deltatangentetas[8](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs318 =     Deltatangentetas[8](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs319 =     N1[2]*clhs35 + clhs41*(N1[0]*clhs294 + N1[1]*clhs308 + N1[2]*clhs309 + N1[3]*clhs310) + clhs42*(N1[0]*clhs311 + N1[1]*clhs312 + N1[2]*clhs313 + N1[3]*clhs314) + clhs43*(N1[0]*clhs315 + N1[1]*clhs316 + N1[2]*clhs317 + N1[3]*clhs318);
    const double clhs320 =     clhs1*clhs2*clhs319;
    const double clhs321 =     Deltatangentxis[9](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs322 =     DeltaJs[9]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs323 =     DeltaPhi[9][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs324 =     Deltatangentetas[9](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs325 =     Deltatangentxis[9](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs326 =     Deltatangentxis[9](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs327 =     Deltatangentxis[9](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs328 =     Deltatangentxis[9](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs329 =     Deltatangentxis[9](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs330 =     Deltatangentxis[9](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs331 =     Deltatangentxis[9](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs332 =     Deltatangentxis[9](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs333 =     Deltatangentxis[9](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs334 =     Deltatangentxis[9](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs335 =     Deltatangentxis[9](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs336 =     N1[3]*clhs8 + clhs41*(N1[0]*clhs321 + N1[1]*clhs325 + N1[2]*clhs326 + N1[3]*clhs327) + clhs42*(N1[0]*clhs328 + N1[1]*clhs329 + N1[2]*clhs330 + N1[3]*clhs331) + clhs43*(N1[0]*clhs332 + N1[1]*clhs333 + N1[2]*clhs334 + N1[3]*clhs335);
    const double clhs337 =     clhs1*clhs2*clhs336;
    const double clhs338 =     Deltatangentetas[9](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs339 =     Deltatangentetas[9](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs340 =     Deltatangentetas[9](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs341 =     Deltatangentetas[9](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs342 =     Deltatangentetas[9](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs343 =     Deltatangentetas[9](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs344 =     Deltatangentetas[9](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs345 =     Deltatangentetas[9](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs346 =     Deltatangentetas[9](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs347 =     Deltatangentetas[9](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs348 =     Deltatangentetas[9](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs349 =     N1[3]*clhs13 + clhs41*(N1[0]*clhs324 + N1[1]*clhs338 + N1[2]*clhs339 + N1[3]*clhs340) + clhs42*(N1[0]*clhs341 + N1[1]*clhs342 + N1[2]*clhs343 + N1[3]*clhs344) + clhs43*(N1[0]*clhs345 + N1[1]*clhs346 + N1[2]*clhs347 + N1[3]*clhs348);
    const double clhs350 =     clhs1*clhs2*clhs349;
    const double clhs351 =     Deltatangentxis[10](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs352 =     DeltaJs[10]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs353 =     DeltaPhi[10][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs354 =     Deltatangentetas[10](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs355 =     Deltatangentxis[10](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs356 =     Deltatangentxis[10](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs357 =     Deltatangentxis[10](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs358 =     Deltatangentxis[10](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs359 =     Deltatangentxis[10](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs360 =     Deltatangentxis[10](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs361 =     Deltatangentxis[10](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs362 =     Deltatangentxis[10](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs363 =     Deltatangentxis[10](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs364 =     Deltatangentxis[10](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs365 =     Deltatangentxis[10](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs366 =     N1[3]*clhs19 + clhs41*(N1[0]*clhs351 + N1[1]*clhs355 + N1[2]*clhs356 + N1[3]*clhs357) + clhs42*(N1[0]*clhs358 + N1[1]*clhs359 + N1[2]*clhs360 + N1[3]*clhs361) + clhs43*(N1[0]*clhs362 + N1[1]*clhs363 + N1[2]*clhs364 + N1[3]*clhs365);
    const double clhs367 =     clhs1*clhs2*clhs366;
    const double clhs368 =     Deltatangentetas[10](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs369 =     Deltatangentetas[10](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs370 =     Deltatangentetas[10](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs371 =     Deltatangentetas[10](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs372 =     Deltatangentetas[10](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs373 =     Deltatangentetas[10](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs374 =     Deltatangentetas[10](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs375 =     Deltatangentetas[10](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs376 =     Deltatangentetas[10](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs377 =     Deltatangentetas[10](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs378 =     Deltatangentetas[10](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs379 =     N1[3]*clhs24 + clhs41*(N1[0]*clhs354 + N1[1]*clhs368 + N1[2]*clhs369 + N1[3]*clhs370) + clhs42*(N1[0]*clhs371 + N1[1]*clhs372 + N1[2]*clhs373 + N1[3]*clhs374) + clhs43*(N1[0]*clhs375 + N1[1]*clhs376 + N1[2]*clhs377 + N1[3]*clhs378);
    const double clhs380 =     clhs1*clhs2*clhs379;
    const double clhs381 =     Deltatangentxis[11](0,0); // DERIVATIVE(TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs382 =     DeltaJs[11]; // DERIVATIVE(DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs383 =     DeltaPhi[11][0]; // DERIVATIVE(PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs384 =     Deltatangentetas[11](0,0); // DERIVATIVE(TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs385 =     Deltatangentxis[11](1,0); // DERIVATIVE(TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs386 =     Deltatangentxis[11](2,0); // DERIVATIVE(TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs387 =     Deltatangentxis[11](3,0); // DERIVATIVE(TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs388 =     Deltatangentxis[11](0,1); // DERIVATIVE(TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs389 =     Deltatangentxis[11](1,1); // DERIVATIVE(TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs390 =     Deltatangentxis[11](2,1); // DERIVATIVE(TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs391 =     Deltatangentxis[11](3,1); // DERIVATIVE(TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs392 =     Deltatangentxis[11](0,2); // DERIVATIVE(TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs393 =     Deltatangentxis[11](1,2); // DERIVATIVE(TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs394 =     Deltatangentxis[11](2,2); // DERIVATIVE(TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs395 =     Deltatangentxis[11](3,2); // DERIVATIVE(TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs396 =     N1[3]*clhs30 + clhs41*(N1[0]*clhs381 + N1[1]*clhs385 + N1[2]*clhs386 + N1[3]*clhs387) + clhs42*(N1[0]*clhs388 + N1[1]*clhs389 + N1[2]*clhs390 + N1[3]*clhs391) + clhs43*(N1[0]*clhs392 + N1[1]*clhs393 + N1[2]*clhs394 + N1[3]*clhs395);
    const double clhs397 =     clhs1*clhs2*clhs396;
    const double clhs398 =     Deltatangentetas[11](1,0); // DERIVATIVE(TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs399 =     Deltatangentetas[11](2,0); // DERIVATIVE(TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs400 =     Deltatangentetas[11](3,0); // DERIVATIVE(TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs401 =     Deltatangentetas[11](0,1); // DERIVATIVE(TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs402 =     Deltatangentetas[11](1,1); // DERIVATIVE(TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs403 =     Deltatangentetas[11](2,1); // DERIVATIVE(TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs404 =     Deltatangentetas[11](3,1); // DERIVATIVE(TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs405 =     Deltatangentetas[11](0,2); // DERIVATIVE(TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs406 =     Deltatangentetas[11](1,2); // DERIVATIVE(TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs407 =     Deltatangentetas[11](2,2); // DERIVATIVE(TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs408 =     Deltatangentetas[11](3,2); // DERIVATIVE(TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs409 =     N1[3]*clhs35 + clhs41*(N1[0]*clhs384 + N1[1]*clhs398 + N1[2]*clhs399 + N1[3]*clhs400) + clhs42*(N1[0]*clhs401 + N1[1]*clhs402 + N1[2]*clhs403 + N1[3]*clhs404) + clhs43*(N1[0]*clhs405 + N1[1]*clhs406 + N1[2]*clhs407 + N1[3]*clhs408);
    const double clhs410 =     clhs1*clhs2*clhs409;
    const double clhs411 =     clhs13*clhs20 + clhs15*clhs8;
    const double clhs412 =     clhs15*clhs19 + clhs20*clhs24;
    const double clhs413 =     clhs15*clhs30 + clhs20*clhs35;
    const double clhs414 =     clhs1*clhs15*clhs44;
    const double clhs415 =     clhs15*clhs2*clhs44;
    const double clhs416 =     clhs1*clhs20*clhs51;
    const double clhs417 =     clhs2*clhs20*clhs51;
    const double clhs418 =     clhs13*clhs31 + clhs26*clhs8;
    const double clhs419 =     clhs19*clhs26 + clhs24*clhs31;
    const double clhs420 =     clhs26*clhs30 + clhs31*clhs35;
    const double clhs421 =     clhs1*clhs26*clhs44;
    const double clhs422 =     clhs2*clhs26*clhs44;
    const double clhs423 =     clhs1*clhs31*clhs51;
    const double clhs424 =     clhs2*clhs31*clhs51;
    const double clhs425 =     Phi[1]; // PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs426 =     N2[0]*clhs0*clhs2*clhs425;
    const double clhs427 =     clhs10*clhs13 + clhs5*clhs8;
    const double clhs428 =     clhs10*clhs24 + clhs19*clhs5;
    const double clhs429 =     clhs10*clhs35 + clhs30*clhs5;
    const double clhs430 =     N2[1]*clhs0*clhs2*clhs425;
    const double clhs431 =     N2[2]*clhs0*clhs2*clhs425;
    const double clhs432 =     N2[3]*clhs0*clhs2*clhs425;
    const double clhs433 =     clhs2*clhs425*clhs44;
    const double clhs434 =     clhs425*clhs44*clhs5;
    const double clhs435 =     DeltaPhi[0][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs436 =     clhs2*clhs44*clhs5;
    const double clhs437 =     clhs2*clhs425*clhs51;
    const double clhs438 =     clhs10*clhs425*clhs51;
    const double clhs439 =     clhs10*clhs2*clhs51;
    const double clhs440 =     clhs2*clhs425*clhs66;
    const double clhs441 =     clhs2*clhs425*clhs79;
    const double clhs442 =     DeltaPhi[1][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs443 =     clhs2*clhs425*clhs96;
    const double clhs444 =     clhs109*clhs2*clhs425;
    const double clhs445 =     DeltaPhi[2][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs446 =     clhs126*clhs2*clhs425;
    const double clhs447 =     clhs139*clhs2*clhs425;
    const double clhs448 =     DeltaPhi[3][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs449 =     clhs156*clhs2*clhs425;
    const double clhs450 =     clhs169*clhs2*clhs425;
    const double clhs451 =     DeltaPhi[4][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs452 =     clhs186*clhs2*clhs425;
    const double clhs453 =     clhs199*clhs2*clhs425;
    const double clhs454 =     DeltaPhi[5][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs455 =     clhs2*clhs216*clhs425;
    const double clhs456 =     clhs2*clhs229*clhs425;
    const double clhs457 =     DeltaPhi[6][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs458 =     clhs2*clhs246*clhs425;
    const double clhs459 =     clhs2*clhs259*clhs425;
    const double clhs460 =     DeltaPhi[7][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs461 =     clhs2*clhs276*clhs425;
    const double clhs462 =     clhs2*clhs289*clhs425;
    const double clhs463 =     DeltaPhi[8][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs464 =     clhs2*clhs306*clhs425;
    const double clhs465 =     clhs2*clhs319*clhs425;
    const double clhs466 =     DeltaPhi[9][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs467 =     clhs2*clhs336*clhs425;
    const double clhs468 =     clhs2*clhs349*clhs425;
    const double clhs469 =     DeltaPhi[10][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs470 =     clhs2*clhs366*clhs425;
    const double clhs471 =     clhs2*clhs379*clhs425;
    const double clhs472 =     DeltaPhi[11][1]; // DERIVATIVE(PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs473 =     clhs2*clhs396*clhs425;
    const double clhs474 =     clhs2*clhs409*clhs425;
    const double clhs475 =     clhs13*clhs21 + clhs16*clhs8;
    const double clhs476 =     clhs16*clhs19 + clhs21*clhs24;
    const double clhs477 =     clhs16*clhs30 + clhs21*clhs35;
    const double clhs478 =     clhs16*clhs425*clhs44;
    const double clhs479 =     clhs16*clhs2*clhs44;
    const double clhs480 =     clhs21*clhs425*clhs51;
    const double clhs481 =     clhs2*clhs21*clhs51;
    const double clhs482 =     clhs13*clhs32 + clhs27*clhs8;
    const double clhs483 =     clhs19*clhs27 + clhs24*clhs32;
    const double clhs484 =     clhs27*clhs30 + clhs32*clhs35;
    const double clhs485 =     clhs27*clhs425*clhs44;
    const double clhs486 =     clhs2*clhs27*clhs44;
    const double clhs487 =     clhs32*clhs425*clhs51;
    const double clhs488 =     clhs2*clhs32*clhs51;
    const double clhs489 =     Phi[2]; // PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs490 =     N2[0]*clhs0*clhs2*clhs489;
    const double clhs491 =     clhs11*clhs13 + clhs6*clhs8;
    const double clhs492 =     clhs11*clhs24 + clhs19*clhs6;
    const double clhs493 =     clhs11*clhs35 + clhs30*clhs6;
    const double clhs494 =     N2[1]*clhs0*clhs2*clhs489;
    const double clhs495 =     N2[2]*clhs0*clhs2*clhs489;
    const double clhs496 =     N2[3]*clhs0*clhs2*clhs489;
    const double clhs497 =     clhs2*clhs44*clhs489;
    const double clhs498 =     clhs44*clhs489*clhs6;
    const double clhs499 =     DeltaPhi[0][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs500 =     clhs2*clhs44*clhs6;
    const double clhs501 =     clhs2*clhs489*clhs51;
    const double clhs502 =     clhs11*clhs489*clhs51;
    const double clhs503 =     clhs11*clhs2*clhs51;
    const double clhs504 =     clhs2*clhs489*clhs66;
    const double clhs505 =     clhs2*clhs489*clhs79;
    const double clhs506 =     DeltaPhi[1][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs507 =     clhs2*clhs489*clhs96;
    const double clhs508 =     clhs109*clhs2*clhs489;
    const double clhs509 =     DeltaPhi[2][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs510 =     clhs126*clhs2*clhs489;
    const double clhs511 =     clhs139*clhs2*clhs489;
    const double clhs512 =     DeltaPhi[3][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs513 =     clhs156*clhs2*clhs489;
    const double clhs514 =     clhs169*clhs2*clhs489;
    const double clhs515 =     DeltaPhi[4][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs516 =     clhs186*clhs2*clhs489;
    const double clhs517 =     clhs199*clhs2*clhs489;
    const double clhs518 =     DeltaPhi[5][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs519 =     clhs2*clhs216*clhs489;
    const double clhs520 =     clhs2*clhs229*clhs489;
    const double clhs521 =     DeltaPhi[6][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs522 =     clhs2*clhs246*clhs489;
    const double clhs523 =     clhs2*clhs259*clhs489;
    const double clhs524 =     DeltaPhi[7][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs525 =     clhs2*clhs276*clhs489;
    const double clhs526 =     clhs2*clhs289*clhs489;
    const double clhs527 =     DeltaPhi[8][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs528 =     clhs2*clhs306*clhs489;
    const double clhs529 =     clhs2*clhs319*clhs489;
    const double clhs530 =     DeltaPhi[9][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs531 =     clhs2*clhs336*clhs489;
    const double clhs532 =     clhs2*clhs349*clhs489;
    const double clhs533 =     DeltaPhi[10][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs534 =     clhs2*clhs366*clhs489;
    const double clhs535 =     clhs2*clhs379*clhs489;
    const double clhs536 =     DeltaPhi[11][2]; // DERIVATIVE(PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs537 =     clhs2*clhs396*clhs489;
    const double clhs538 =     clhs2*clhs409*clhs489;
    const double clhs539 =     clhs13*clhs22 + clhs17*clhs8;
    const double clhs540 =     clhs17*clhs19 + clhs22*clhs24;
    const double clhs541 =     clhs17*clhs30 + clhs22*clhs35;
    const double clhs542 =     clhs17*clhs44*clhs489;
    const double clhs543 =     clhs17*clhs2*clhs44;
    const double clhs544 =     clhs22*clhs489*clhs51;
    const double clhs545 =     clhs2*clhs22*clhs51;
    const double clhs546 =     clhs13*clhs33 + clhs28*clhs8;
    const double clhs547 =     clhs19*clhs28 + clhs24*clhs33;
    const double clhs548 =     clhs28*clhs30 + clhs33*clhs35;
    const double clhs549 =     clhs28*clhs44*clhs489;
    const double clhs550 =     clhs2*clhs28*clhs44;
    const double clhs551 =     clhs33*clhs489*clhs51;
    const double clhs552 =     clhs2*clhs33*clhs51;
    const double clhs553 =     Phi[3]; // PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double clhs554 =     N2[0]*clhs0*clhs2*clhs553;
    const double clhs555 =     clhs12*clhs13 + clhs7*clhs8;
    const double clhs556 =     clhs12*clhs24 + clhs19*clhs7;
    const double clhs557 =     clhs12*clhs35 + clhs30*clhs7;
    const double clhs558 =     N2[1]*clhs0*clhs2*clhs553;
    const double clhs559 =     N2[2]*clhs0*clhs2*clhs553;
    const double clhs560 =     N2[3]*clhs0*clhs2*clhs553;
    const double clhs561 =     clhs2*clhs44*clhs553;
    const double clhs562 =     clhs44*clhs553*clhs7;
    const double clhs563 =     DeltaPhi[0][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
    const double clhs564 =     clhs2*clhs44*clhs7;
    const double clhs565 =     clhs2*clhs51*clhs553;
    const double clhs566 =     clhs12*clhs51*clhs553;
    const double clhs567 =     clhs12*clhs2*clhs51;
    const double clhs568 =     clhs2*clhs553*clhs66;
    const double clhs569 =     clhs2*clhs553*clhs79;
    const double clhs570 =     DeltaPhi[1][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
    const double clhs571 =     clhs2*clhs553*clhs96;
    const double clhs572 =     clhs109*clhs2*clhs553;
    const double clhs573 =     DeltaPhi[2][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
    const double clhs574 =     clhs126*clhs2*clhs553;
    const double clhs575 =     clhs139*clhs2*clhs553;
    const double clhs576 =     DeltaPhi[3][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
    const double clhs577 =     clhs156*clhs2*clhs553;
    const double clhs578 =     clhs169*clhs2*clhs553;
    const double clhs579 =     DeltaPhi[4][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
    const double clhs580 =     clhs186*clhs2*clhs553;
    const double clhs581 =     clhs199*clhs2*clhs553;
    const double clhs582 =     DeltaPhi[5][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
    const double clhs583 =     clhs2*clhs216*clhs553;
    const double clhs584 =     clhs2*clhs229*clhs553;
    const double clhs585 =     DeltaPhi[6][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
    const double clhs586 =     clhs2*clhs246*clhs553;
    const double clhs587 =     clhs2*clhs259*clhs553;
    const double clhs588 =     DeltaPhi[7][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
    const double clhs589 =     clhs2*clhs276*clhs553;
    const double clhs590 =     clhs2*clhs289*clhs553;
    const double clhs591 =     DeltaPhi[8][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
    const double clhs592 =     clhs2*clhs306*clhs553;
    const double clhs593 =     clhs2*clhs319*clhs553;
    const double clhs594 =     DeltaPhi[9][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
    const double clhs595 =     clhs2*clhs336*clhs553;
    const double clhs596 =     clhs2*clhs349*clhs553;
    const double clhs597 =     DeltaPhi[10][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
    const double clhs598 =     clhs2*clhs366*clhs553;
    const double clhs599 =     clhs2*clhs379*clhs553;
    const double clhs600 =     DeltaPhi[11][3]; // DERIVATIVE(PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
    const double clhs601 =     clhs2*clhs396*clhs553;
    const double clhs602 =     clhs2*clhs409*clhs553;
    const double clhs603 =     clhs13*clhs23 + clhs18*clhs8;
    const double clhs604 =     clhs18*clhs19 + clhs23*clhs24;
    const double clhs605 =     clhs18*clhs30 + clhs23*clhs35;
    const double clhs606 =     clhs18*clhs44*clhs553;
    const double clhs607 =     clhs18*clhs2*clhs44;
    const double clhs608 =     clhs23*clhs51*clhs553;
    const double clhs609 =     clhs2*clhs23*clhs51;
    const double clhs610 =     clhs13*clhs34 + clhs29*clhs8;
    const double clhs611 =     clhs19*clhs29 + clhs24*clhs34;
    const double clhs612 =     clhs29*clhs30 + clhs34*clhs35;
    const double clhs613 =     clhs29*clhs44*clhs553;
    const double clhs614 =     clhs2*clhs29*clhs44;
    const double clhs615 =     clhs34*clhs51*clhs553;
    const double clhs616 =     clhs2*clhs34*clhs51;

    lhs(0,0)=0;
    lhs(0,1)=0;
    lhs(0,2)=0;
    lhs(0,3)=0;
    lhs(0,4)=0;
    lhs(0,5)=0;
    lhs(0,6)=0;
    lhs(0,7)=0;
    lhs(0,8)=0;
    lhs(0,9)=0;
    lhs(0,10)=0;
    lhs(0,11)=0;
    lhs(0,12)=0;
    lhs(0,13)=0;
    lhs(0,14)=0;
    lhs(0,15)=0;
    lhs(0,16)=0;
    lhs(0,17)=0;
    lhs(0,18)=0;
    lhs(0,19)=0;
    lhs(0,20)=0;
    lhs(0,21)=0;
    lhs(0,22)=0;
    lhs(0,23)=0;
    lhs(0,24)=0;
    lhs(0,25)=0;
    lhs(0,26)=0;
    lhs(0,27)=0;
    lhs(0,28)=0;
    lhs(0,29)=0;
    lhs(0,30)=0;
    lhs(0,31)=0;
    lhs(0,32)=0;
    lhs(0,33)=0;
    lhs(0,34)=0;
    lhs(0,35)=0;
    lhs(1,0)=0;
    lhs(1,1)=0;
    lhs(1,2)=0;
    lhs(1,3)=0;
    lhs(1,4)=0;
    lhs(1,5)=0;
    lhs(1,6)=0;
    lhs(1,7)=0;
    lhs(1,8)=0;
    lhs(1,9)=0;
    lhs(1,10)=0;
    lhs(1,11)=0;
    lhs(1,12)=0;
    lhs(1,13)=0;
    lhs(1,14)=0;
    lhs(1,15)=0;
    lhs(1,16)=0;
    lhs(1,17)=0;
    lhs(1,18)=0;
    lhs(1,19)=0;
    lhs(1,20)=0;
    lhs(1,21)=0;
    lhs(1,22)=0;
    lhs(1,23)=0;
    lhs(1,24)=0;
    lhs(1,25)=0;
    lhs(1,26)=0;
    lhs(1,27)=0;
    lhs(1,28)=0;
    lhs(1,29)=0;
    lhs(1,30)=0;
    lhs(1,31)=0;
    lhs(1,32)=0;
    lhs(1,33)=0;
    lhs(1,34)=0;
    lhs(1,35)=0;
    lhs(2,0)=0;
    lhs(2,1)=0;
    lhs(2,2)=0;
    lhs(2,3)=0;
    lhs(2,4)=0;
    lhs(2,5)=0;
    lhs(2,6)=0;
    lhs(2,7)=0;
    lhs(2,8)=0;
    lhs(2,9)=0;
    lhs(2,10)=0;
    lhs(2,11)=0;
    lhs(2,12)=0;
    lhs(2,13)=0;
    lhs(2,14)=0;
    lhs(2,15)=0;
    lhs(2,16)=0;
    lhs(2,17)=0;
    lhs(2,18)=0;
    lhs(2,19)=0;
    lhs(2,20)=0;
    lhs(2,21)=0;
    lhs(2,22)=0;
    lhs(2,23)=0;
    lhs(2,24)=0;
    lhs(2,25)=0;
    lhs(2,26)=0;
    lhs(2,27)=0;
    lhs(2,28)=0;
    lhs(2,29)=0;
    lhs(2,30)=0;
    lhs(2,31)=0;
    lhs(2,32)=0;
    lhs(2,33)=0;
    lhs(2,34)=0;
    lhs(2,35)=0;
    lhs(3,0)=0;
    lhs(3,1)=0;
    lhs(3,2)=0;
    lhs(3,3)=0;
    lhs(3,4)=0;
    lhs(3,5)=0;
    lhs(3,6)=0;
    lhs(3,7)=0;
    lhs(3,8)=0;
    lhs(3,9)=0;
    lhs(3,10)=0;
    lhs(3,11)=0;
    lhs(3,12)=0;
    lhs(3,13)=0;
    lhs(3,14)=0;
    lhs(3,15)=0;
    lhs(3,16)=0;
    lhs(3,17)=0;
    lhs(3,18)=0;
    lhs(3,19)=0;
    lhs(3,20)=0;
    lhs(3,21)=0;
    lhs(3,22)=0;
    lhs(3,23)=0;
    lhs(3,24)=0;
    lhs(3,25)=0;
    lhs(3,26)=0;
    lhs(3,27)=0;
    lhs(3,28)=0;
    lhs(3,29)=0;
    lhs(3,30)=0;
    lhs(3,31)=0;
    lhs(3,32)=0;
    lhs(3,33)=0;
    lhs(3,34)=0;
    lhs(3,35)=0;
    lhs(4,0)=0;
    lhs(4,1)=0;
    lhs(4,2)=0;
    lhs(4,3)=0;
    lhs(4,4)=0;
    lhs(4,5)=0;
    lhs(4,6)=0;
    lhs(4,7)=0;
    lhs(4,8)=0;
    lhs(4,9)=0;
    lhs(4,10)=0;
    lhs(4,11)=0;
    lhs(4,12)=0;
    lhs(4,13)=0;
    lhs(4,14)=0;
    lhs(4,15)=0;
    lhs(4,16)=0;
    lhs(4,17)=0;
    lhs(4,18)=0;
    lhs(4,19)=0;
    lhs(4,20)=0;
    lhs(4,21)=0;
    lhs(4,22)=0;
    lhs(4,23)=0;
    lhs(4,24)=0;
    lhs(4,25)=0;
    lhs(4,26)=0;
    lhs(4,27)=0;
    lhs(4,28)=0;
    lhs(4,29)=0;
    lhs(4,30)=0;
    lhs(4,31)=0;
    lhs(4,32)=0;
    lhs(4,33)=0;
    lhs(4,34)=0;
    lhs(4,35)=0;
    lhs(5,0)=0;
    lhs(5,1)=0;
    lhs(5,2)=0;
    lhs(5,3)=0;
    lhs(5,4)=0;
    lhs(5,5)=0;
    lhs(5,6)=0;
    lhs(5,7)=0;
    lhs(5,8)=0;
    lhs(5,9)=0;
    lhs(5,10)=0;
    lhs(5,11)=0;
    lhs(5,12)=0;
    lhs(5,13)=0;
    lhs(5,14)=0;
    lhs(5,15)=0;
    lhs(5,16)=0;
    lhs(5,17)=0;
    lhs(5,18)=0;
    lhs(5,19)=0;
    lhs(5,20)=0;
    lhs(5,21)=0;
    lhs(5,22)=0;
    lhs(5,23)=0;
    lhs(5,24)=0;
    lhs(5,25)=0;
    lhs(5,26)=0;
    lhs(5,27)=0;
    lhs(5,28)=0;
    lhs(5,29)=0;
    lhs(5,30)=0;
    lhs(5,31)=0;
    lhs(5,32)=0;
    lhs(5,33)=0;
    lhs(5,34)=0;
    lhs(5,35)=0;
    lhs(6,0)=0;
    lhs(6,1)=0;
    lhs(6,2)=0;
    lhs(6,3)=0;
    lhs(6,4)=0;
    lhs(6,5)=0;
    lhs(6,6)=0;
    lhs(6,7)=0;
    lhs(6,8)=0;
    lhs(6,9)=0;
    lhs(6,10)=0;
    lhs(6,11)=0;
    lhs(6,12)=0;
    lhs(6,13)=0;
    lhs(6,14)=0;
    lhs(6,15)=0;
    lhs(6,16)=0;
    lhs(6,17)=0;
    lhs(6,18)=0;
    lhs(6,19)=0;
    lhs(6,20)=0;
    lhs(6,21)=0;
    lhs(6,22)=0;
    lhs(6,23)=0;
    lhs(6,24)=0;
    lhs(6,25)=0;
    lhs(6,26)=0;
    lhs(6,27)=0;
    lhs(6,28)=0;
    lhs(6,29)=0;
    lhs(6,30)=0;
    lhs(6,31)=0;
    lhs(6,32)=0;
    lhs(6,33)=0;
    lhs(6,34)=0;
    lhs(6,35)=0;
    lhs(7,0)=0;
    lhs(7,1)=0;
    lhs(7,2)=0;
    lhs(7,3)=0;
    lhs(7,4)=0;
    lhs(7,5)=0;
    lhs(7,6)=0;
    lhs(7,7)=0;
    lhs(7,8)=0;
    lhs(7,9)=0;
    lhs(7,10)=0;
    lhs(7,11)=0;
    lhs(7,12)=0;
    lhs(7,13)=0;
    lhs(7,14)=0;
    lhs(7,15)=0;
    lhs(7,16)=0;
    lhs(7,17)=0;
    lhs(7,18)=0;
    lhs(7,19)=0;
    lhs(7,20)=0;
    lhs(7,21)=0;
    lhs(7,22)=0;
    lhs(7,23)=0;
    lhs(7,24)=0;
    lhs(7,25)=0;
    lhs(7,26)=0;
    lhs(7,27)=0;
    lhs(7,28)=0;
    lhs(7,29)=0;
    lhs(7,30)=0;
    lhs(7,31)=0;
    lhs(7,32)=0;
    lhs(7,33)=0;
    lhs(7,34)=0;
    lhs(7,35)=0;
    lhs(8,0)=0;
    lhs(8,1)=0;
    lhs(8,2)=0;
    lhs(8,3)=0;
    lhs(8,4)=0;
    lhs(8,5)=0;
    lhs(8,6)=0;
    lhs(8,7)=0;
    lhs(8,8)=0;
    lhs(8,9)=0;
    lhs(8,10)=0;
    lhs(8,11)=0;
    lhs(8,12)=0;
    lhs(8,13)=0;
    lhs(8,14)=0;
    lhs(8,15)=0;
    lhs(8,16)=0;
    lhs(8,17)=0;
    lhs(8,18)=0;
    lhs(8,19)=0;
    lhs(8,20)=0;
    lhs(8,21)=0;
    lhs(8,22)=0;
    lhs(8,23)=0;
    lhs(8,24)=0;
    lhs(8,25)=0;
    lhs(8,26)=0;
    lhs(8,27)=0;
    lhs(8,28)=0;
    lhs(8,29)=0;
    lhs(8,30)=0;
    lhs(8,31)=0;
    lhs(8,32)=0;
    lhs(8,33)=0;
    lhs(8,34)=0;
    lhs(8,35)=0;
    lhs(9,0)=0;
    lhs(9,1)=0;
    lhs(9,2)=0;
    lhs(9,3)=0;
    lhs(9,4)=0;
    lhs(9,5)=0;
    lhs(9,6)=0;
    lhs(9,7)=0;
    lhs(9,8)=0;
    lhs(9,9)=0;
    lhs(9,10)=0;
    lhs(9,11)=0;
    lhs(9,12)=0;
    lhs(9,13)=0;
    lhs(9,14)=0;
    lhs(9,15)=0;
    lhs(9,16)=0;
    lhs(9,17)=0;
    lhs(9,18)=0;
    lhs(9,19)=0;
    lhs(9,20)=0;
    lhs(9,21)=0;
    lhs(9,22)=0;
    lhs(9,23)=0;
    lhs(9,24)=0;
    lhs(9,25)=0;
    lhs(9,26)=0;
    lhs(9,27)=0;
    lhs(9,28)=0;
    lhs(9,29)=0;
    lhs(9,30)=0;
    lhs(9,31)=0;
    lhs(9,32)=0;
    lhs(9,33)=0;
    lhs(9,34)=0;
    lhs(9,35)=0;
    lhs(10,0)=0;
    lhs(10,1)=0;
    lhs(10,2)=0;
    lhs(10,3)=0;
    lhs(10,4)=0;
    lhs(10,5)=0;
    lhs(10,6)=0;
    lhs(10,7)=0;
    lhs(10,8)=0;
    lhs(10,9)=0;
    lhs(10,10)=0;
    lhs(10,11)=0;
    lhs(10,12)=0;
    lhs(10,13)=0;
    lhs(10,14)=0;
    lhs(10,15)=0;
    lhs(10,16)=0;
    lhs(10,17)=0;
    lhs(10,18)=0;
    lhs(10,19)=0;
    lhs(10,20)=0;
    lhs(10,21)=0;
    lhs(10,22)=0;
    lhs(10,23)=0;
    lhs(10,24)=0;
    lhs(10,25)=0;
    lhs(10,26)=0;
    lhs(10,27)=0;
    lhs(10,28)=0;
    lhs(10,29)=0;
    lhs(10,30)=0;
    lhs(10,31)=0;
    lhs(10,32)=0;
    lhs(10,33)=0;
    lhs(10,34)=0;
    lhs(10,35)=0;
    lhs(11,0)=0;
    lhs(11,1)=0;
    lhs(11,2)=0;
    lhs(11,3)=0;
    lhs(11,4)=0;
    lhs(11,5)=0;
    lhs(11,6)=0;
    lhs(11,7)=0;
    lhs(11,8)=0;
    lhs(11,9)=0;
    lhs(11,10)=0;
    lhs(11,11)=0;
    lhs(11,12)=0;
    lhs(11,13)=0;
    lhs(11,14)=0;
    lhs(11,15)=0;
    lhs(11,16)=0;
    lhs(11,17)=0;
    lhs(11,18)=0;
    lhs(11,19)=0;
    lhs(11,20)=0;
    lhs(11,21)=0;
    lhs(11,22)=0;
    lhs(11,23)=0;
    lhs(11,24)=0;
    lhs(11,25)=0;
    lhs(11,26)=0;
    lhs(11,27)=0;
    lhs(11,28)=0;
    lhs(11,29)=0;
    lhs(11,30)=0;
    lhs(11,31)=0;
    lhs(11,32)=0;
    lhs(11,33)=0;
    lhs(11,34)=0;
    lhs(11,35)=0;
    lhs(12,0)=0;
    lhs(12,1)=0;
    lhs(12,2)=0;
    lhs(12,3)=0;
    lhs(12,4)=0;
    lhs(12,5)=0;
    lhs(12,6)=0;
    lhs(12,7)=0;
    lhs(12,8)=0;
    lhs(12,9)=0;
    lhs(12,10)=0;
    lhs(12,11)=0;
    lhs(12,12)=0;
    lhs(12,13)=0;
    lhs(12,14)=0;
    lhs(12,15)=0;
    lhs(12,16)=0;
    lhs(12,17)=0;
    lhs(12,18)=0;
    lhs(12,19)=0;
    lhs(12,20)=0;
    lhs(12,21)=0;
    lhs(12,22)=0;
    lhs(12,23)=0;
    lhs(12,24)=0;
    lhs(12,25)=0;
    lhs(12,26)=0;
    lhs(12,27)=0;
    lhs(12,28)=0;
    lhs(12,29)=0;
    lhs(12,30)=0;
    lhs(12,31)=0;
    lhs(12,32)=0;
    lhs(12,33)=0;
    lhs(12,34)=0;
    lhs(12,35)=0;
    lhs(13,0)=0;
    lhs(13,1)=0;
    lhs(13,2)=0;
    lhs(13,3)=0;
    lhs(13,4)=0;
    lhs(13,5)=0;
    lhs(13,6)=0;
    lhs(13,7)=0;
    lhs(13,8)=0;
    lhs(13,9)=0;
    lhs(13,10)=0;
    lhs(13,11)=0;
    lhs(13,12)=0;
    lhs(13,13)=0;
    lhs(13,14)=0;
    lhs(13,15)=0;
    lhs(13,16)=0;
    lhs(13,17)=0;
    lhs(13,18)=0;
    lhs(13,19)=0;
    lhs(13,20)=0;
    lhs(13,21)=0;
    lhs(13,22)=0;
    lhs(13,23)=0;
    lhs(13,24)=0;
    lhs(13,25)=0;
    lhs(13,26)=0;
    lhs(13,27)=0;
    lhs(13,28)=0;
    lhs(13,29)=0;
    lhs(13,30)=0;
    lhs(13,31)=0;
    lhs(13,32)=0;
    lhs(13,33)=0;
    lhs(13,34)=0;
    lhs(13,35)=0;
    lhs(14,0)=0;
    lhs(14,1)=0;
    lhs(14,2)=0;
    lhs(14,3)=0;
    lhs(14,4)=0;
    lhs(14,5)=0;
    lhs(14,6)=0;
    lhs(14,7)=0;
    lhs(14,8)=0;
    lhs(14,9)=0;
    lhs(14,10)=0;
    lhs(14,11)=0;
    lhs(14,12)=0;
    lhs(14,13)=0;
    lhs(14,14)=0;
    lhs(14,15)=0;
    lhs(14,16)=0;
    lhs(14,17)=0;
    lhs(14,18)=0;
    lhs(14,19)=0;
    lhs(14,20)=0;
    lhs(14,21)=0;
    lhs(14,22)=0;
    lhs(14,23)=0;
    lhs(14,24)=0;
    lhs(14,25)=0;
    lhs(14,26)=0;
    lhs(14,27)=0;
    lhs(14,28)=0;
    lhs(14,29)=0;
    lhs(14,30)=0;
    lhs(14,31)=0;
    lhs(14,32)=0;
    lhs(14,33)=0;
    lhs(14,34)=0;
    lhs(14,35)=0;
    lhs(15,0)=0;
    lhs(15,1)=0;
    lhs(15,2)=0;
    lhs(15,3)=0;
    lhs(15,4)=0;
    lhs(15,5)=0;
    lhs(15,6)=0;
    lhs(15,7)=0;
    lhs(15,8)=0;
    lhs(15,9)=0;
    lhs(15,10)=0;
    lhs(15,11)=0;
    lhs(15,12)=0;
    lhs(15,13)=0;
    lhs(15,14)=0;
    lhs(15,15)=0;
    lhs(15,16)=0;
    lhs(15,17)=0;
    lhs(15,18)=0;
    lhs(15,19)=0;
    lhs(15,20)=0;
    lhs(15,21)=0;
    lhs(15,22)=0;
    lhs(15,23)=0;
    lhs(15,24)=0;
    lhs(15,25)=0;
    lhs(15,26)=0;
    lhs(15,27)=0;
    lhs(15,28)=0;
    lhs(15,29)=0;
    lhs(15,30)=0;
    lhs(15,31)=0;
    lhs(15,32)=0;
    lhs(15,33)=0;
    lhs(15,34)=0;
    lhs(15,35)=0;
    lhs(16,0)=0;
    lhs(16,1)=0;
    lhs(16,2)=0;
    lhs(16,3)=0;
    lhs(16,4)=0;
    lhs(16,5)=0;
    lhs(16,6)=0;
    lhs(16,7)=0;
    lhs(16,8)=0;
    lhs(16,9)=0;
    lhs(16,10)=0;
    lhs(16,11)=0;
    lhs(16,12)=0;
    lhs(16,13)=0;
    lhs(16,14)=0;
    lhs(16,15)=0;
    lhs(16,16)=0;
    lhs(16,17)=0;
    lhs(16,18)=0;
    lhs(16,19)=0;
    lhs(16,20)=0;
    lhs(16,21)=0;
    lhs(16,22)=0;
    lhs(16,23)=0;
    lhs(16,24)=0;
    lhs(16,25)=0;
    lhs(16,26)=0;
    lhs(16,27)=0;
    lhs(16,28)=0;
    lhs(16,29)=0;
    lhs(16,30)=0;
    lhs(16,31)=0;
    lhs(16,32)=0;
    lhs(16,33)=0;
    lhs(16,34)=0;
    lhs(16,35)=0;
    lhs(17,0)=0;
    lhs(17,1)=0;
    lhs(17,2)=0;
    lhs(17,3)=0;
    lhs(17,4)=0;
    lhs(17,5)=0;
    lhs(17,6)=0;
    lhs(17,7)=0;
    lhs(17,8)=0;
    lhs(17,9)=0;
    lhs(17,10)=0;
    lhs(17,11)=0;
    lhs(17,12)=0;
    lhs(17,13)=0;
    lhs(17,14)=0;
    lhs(17,15)=0;
    lhs(17,16)=0;
    lhs(17,17)=0;
    lhs(17,18)=0;
    lhs(17,19)=0;
    lhs(17,20)=0;
    lhs(17,21)=0;
    lhs(17,22)=0;
    lhs(17,23)=0;
    lhs(17,24)=0;
    lhs(17,25)=0;
    lhs(17,26)=0;
    lhs(17,27)=0;
    lhs(17,28)=0;
    lhs(17,29)=0;
    lhs(17,30)=0;
    lhs(17,31)=0;
    lhs(17,32)=0;
    lhs(17,33)=0;
    lhs(17,34)=0;
    lhs(17,35)=0;
    lhs(18,0)=0;
    lhs(18,1)=0;
    lhs(18,2)=0;
    lhs(18,3)=0;
    lhs(18,4)=0;
    lhs(18,5)=0;
    lhs(18,6)=0;
    lhs(18,7)=0;
    lhs(18,8)=0;
    lhs(18,9)=0;
    lhs(18,10)=0;
    lhs(18,11)=0;
    lhs(18,12)=0;
    lhs(18,13)=0;
    lhs(18,14)=0;
    lhs(18,15)=0;
    lhs(18,16)=0;
    lhs(18,17)=0;
    lhs(18,18)=0;
    lhs(18,19)=0;
    lhs(18,20)=0;
    lhs(18,21)=0;
    lhs(18,22)=0;
    lhs(18,23)=0;
    lhs(18,24)=0;
    lhs(18,25)=0;
    lhs(18,26)=0;
    lhs(18,27)=0;
    lhs(18,28)=0;
    lhs(18,29)=0;
    lhs(18,30)=0;
    lhs(18,31)=0;
    lhs(18,32)=0;
    lhs(18,33)=0;
    lhs(18,34)=0;
    lhs(18,35)=0;
    lhs(19,0)=0;
    lhs(19,1)=0;
    lhs(19,2)=0;
    lhs(19,3)=0;
    lhs(19,4)=0;
    lhs(19,5)=0;
    lhs(19,6)=0;
    lhs(19,7)=0;
    lhs(19,8)=0;
    lhs(19,9)=0;
    lhs(19,10)=0;
    lhs(19,11)=0;
    lhs(19,12)=0;
    lhs(19,13)=0;
    lhs(19,14)=0;
    lhs(19,15)=0;
    lhs(19,16)=0;
    lhs(19,17)=0;
    lhs(19,18)=0;
    lhs(19,19)=0;
    lhs(19,20)=0;
    lhs(19,21)=0;
    lhs(19,22)=0;
    lhs(19,23)=0;
    lhs(19,24)=0;
    lhs(19,25)=0;
    lhs(19,26)=0;
    lhs(19,27)=0;
    lhs(19,28)=0;
    lhs(19,29)=0;
    lhs(19,30)=0;
    lhs(19,31)=0;
    lhs(19,32)=0;
    lhs(19,33)=0;
    lhs(19,34)=0;
    lhs(19,35)=0;
    lhs(20,0)=0;
    lhs(20,1)=0;
    lhs(20,2)=0;
    lhs(20,3)=0;
    lhs(20,4)=0;
    lhs(20,5)=0;
    lhs(20,6)=0;
    lhs(20,7)=0;
    lhs(20,8)=0;
    lhs(20,9)=0;
    lhs(20,10)=0;
    lhs(20,11)=0;
    lhs(20,12)=0;
    lhs(20,13)=0;
    lhs(20,14)=0;
    lhs(20,15)=0;
    lhs(20,16)=0;
    lhs(20,17)=0;
    lhs(20,18)=0;
    lhs(20,19)=0;
    lhs(20,20)=0;
    lhs(20,21)=0;
    lhs(20,22)=0;
    lhs(20,23)=0;
    lhs(20,24)=0;
    lhs(20,25)=0;
    lhs(20,26)=0;
    lhs(20,27)=0;
    lhs(20,28)=0;
    lhs(20,29)=0;
    lhs(20,30)=0;
    lhs(20,31)=0;
    lhs(20,32)=0;
    lhs(20,33)=0;
    lhs(20,34)=0;
    lhs(20,35)=0;
    lhs(21,0)=0;
    lhs(21,1)=0;
    lhs(21,2)=0;
    lhs(21,3)=0;
    lhs(21,4)=0;
    lhs(21,5)=0;
    lhs(21,6)=0;
    lhs(21,7)=0;
    lhs(21,8)=0;
    lhs(21,9)=0;
    lhs(21,10)=0;
    lhs(21,11)=0;
    lhs(21,12)=0;
    lhs(21,13)=0;
    lhs(21,14)=0;
    lhs(21,15)=0;
    lhs(21,16)=0;
    lhs(21,17)=0;
    lhs(21,18)=0;
    lhs(21,19)=0;
    lhs(21,20)=0;
    lhs(21,21)=0;
    lhs(21,22)=0;
    lhs(21,23)=0;
    lhs(21,24)=0;
    lhs(21,25)=0;
    lhs(21,26)=0;
    lhs(21,27)=0;
    lhs(21,28)=0;
    lhs(21,29)=0;
    lhs(21,30)=0;
    lhs(21,31)=0;
    lhs(21,32)=0;
    lhs(21,33)=0;
    lhs(21,34)=0;
    lhs(21,35)=0;
    lhs(22,0)=0;
    lhs(22,1)=0;
    lhs(22,2)=0;
    lhs(22,3)=0;
    lhs(22,4)=0;
    lhs(22,5)=0;
    lhs(22,6)=0;
    lhs(22,7)=0;
    lhs(22,8)=0;
    lhs(22,9)=0;
    lhs(22,10)=0;
    lhs(22,11)=0;
    lhs(22,12)=0;
    lhs(22,13)=0;
    lhs(22,14)=0;
    lhs(22,15)=0;
    lhs(22,16)=0;
    lhs(22,17)=0;
    lhs(22,18)=0;
    lhs(22,19)=0;
    lhs(22,20)=0;
    lhs(22,21)=0;
    lhs(22,22)=0;
    lhs(22,23)=0;
    lhs(22,24)=0;
    lhs(22,25)=0;
    lhs(22,26)=0;
    lhs(22,27)=0;
    lhs(22,28)=0;
    lhs(22,29)=0;
    lhs(22,30)=0;
    lhs(22,31)=0;
    lhs(22,32)=0;
    lhs(22,33)=0;
    lhs(22,34)=0;
    lhs(22,35)=0;
    lhs(23,0)=0;
    lhs(23,1)=0;
    lhs(23,2)=0;
    lhs(23,3)=0;
    lhs(23,4)=0;
    lhs(23,5)=0;
    lhs(23,6)=0;
    lhs(23,7)=0;
    lhs(23,8)=0;
    lhs(23,9)=0;
    lhs(23,10)=0;
    lhs(23,11)=0;
    lhs(23,12)=0;
    lhs(23,13)=0;
    lhs(23,14)=0;
    lhs(23,15)=0;
    lhs(23,16)=0;
    lhs(23,17)=0;
    lhs(23,18)=0;
    lhs(23,19)=0;
    lhs(23,20)=0;
    lhs(23,21)=0;
    lhs(23,22)=0;
    lhs(23,23)=0;
    lhs(23,24)=0;
    lhs(23,25)=0;
    lhs(23,26)=0;
    lhs(23,27)=0;
    lhs(23,28)=0;
    lhs(23,29)=0;
    lhs(23,30)=0;
    lhs(23,31)=0;
    lhs(23,32)=0;
    lhs(23,33)=0;
    lhs(23,34)=0;
    lhs(23,35)=0;
    lhs(24,0)=-clhs14*clhs3;
    lhs(24,1)=-clhs25*clhs3;
    lhs(24,2)=-clhs3*clhs36;
    lhs(24,3)=-clhs14*clhs37;
    lhs(24,4)=-clhs25*clhs37;
    lhs(24,5)=-clhs36*clhs37;
    lhs(24,6)=-clhs14*clhs38;
    lhs(24,7)=-clhs25*clhs38;
    lhs(24,8)=-clhs36*clhs38;
    lhs(24,9)=-clhs14*clhs39;
    lhs(24,10)=-clhs25*clhs39;
    lhs(24,11)=-clhs36*clhs39;
    lhs(24,12)=clhs0*(clhs4*clhs67 + clhs40*clhs45 + clhs46*clhs47 + clhs46*clhs53 + clhs48*clhs49 + clhs48*clhs54 + clhs50*clhs52 + clhs80*clhs9);
    lhs(24,13)=clhs0*(clhs110*clhs9 + clhs4*clhs97 + clhs45*clhs81 + clhs47*clhs82 + clhs49*clhs83 + clhs52*clhs84 + clhs53*clhs82 + clhs54*clhs83);
    lhs(24,14)=clhs0*(clhs111*clhs45 + clhs112*clhs47 + clhs112*clhs53 + clhs113*clhs49 + clhs113*clhs54 + clhs114*clhs52 + clhs127*clhs4 + clhs140*clhs9);
    lhs(24,15)=clhs0*(clhs141*clhs45 + clhs142*clhs47 + clhs142*clhs53 + clhs143*clhs49 + clhs143*clhs54 + clhs144*clhs52 + clhs157*clhs4 + clhs170*clhs9);
    lhs(24,16)=clhs0*(clhs171*clhs45 + clhs172*clhs47 + clhs172*clhs53 + clhs173*clhs49 + clhs173*clhs54 + clhs174*clhs52 + clhs187*clhs4 + clhs200*clhs9);
    lhs(24,17)=clhs0*(clhs201*clhs45 + clhs202*clhs47 + clhs202*clhs53 + clhs203*clhs49 + clhs203*clhs54 + clhs204*clhs52 + clhs217*clhs4 + clhs230*clhs9);
    lhs(24,18)=clhs0*(clhs231*clhs45 + clhs232*clhs47 + clhs232*clhs53 + clhs233*clhs49 + clhs233*clhs54 + clhs234*clhs52 + clhs247*clhs4 + clhs260*clhs9);
    lhs(24,19)=clhs0*(clhs261*clhs45 + clhs262*clhs47 + clhs262*clhs53 + clhs263*clhs49 + clhs263*clhs54 + clhs264*clhs52 + clhs277*clhs4 + clhs290*clhs9);
    lhs(24,20)=clhs0*(clhs291*clhs45 + clhs292*clhs47 + clhs292*clhs53 + clhs293*clhs49 + clhs293*clhs54 + clhs294*clhs52 + clhs307*clhs4 + clhs320*clhs9);
    lhs(24,21)=clhs0*(clhs321*clhs45 + clhs322*clhs47 + clhs322*clhs53 + clhs323*clhs49 + clhs323*clhs54 + clhs324*clhs52 + clhs337*clhs4 + clhs350*clhs9);
    lhs(24,22)=clhs0*(clhs351*clhs45 + clhs352*clhs47 + clhs352*clhs53 + clhs353*clhs49 + clhs353*clhs54 + clhs354*clhs52 + clhs367*clhs4 + clhs380*clhs9);
    lhs(24,23)=clhs0*(clhs381*clhs45 + clhs382*clhs47 + clhs382*clhs53 + clhs383*clhs49 + clhs383*clhs54 + clhs384*clhs52 + clhs397*clhs4 + clhs410*clhs9);
    lhs(24,24)=0;
    lhs(24,25)=0;
    lhs(24,26)=0;
    lhs(24,27)=0;
    lhs(24,28)=0;
    lhs(24,29)=0;
    lhs(24,30)=0;
    lhs(24,31)=0;
    lhs(24,32)=0;
    lhs(24,33)=0;
    lhs(24,34)=0;
    lhs(24,35)=0;
    lhs(25,0)=-clhs3*clhs411;
    lhs(25,1)=-clhs3*clhs412;
    lhs(25,2)=-clhs3*clhs413;
    lhs(25,3)=-clhs37*clhs411;
    lhs(25,4)=-clhs37*clhs412;
    lhs(25,5)=-clhs37*clhs413;
    lhs(25,6)=-clhs38*clhs411;
    lhs(25,7)=-clhs38*clhs412;
    lhs(25,8)=-clhs38*clhs413;
    lhs(25,9)=-clhs39*clhs411;
    lhs(25,10)=-clhs39*clhs412;
    lhs(25,11)=-clhs39*clhs413;
    lhs(25,12)=clhs0*(clhs15*clhs67 + clhs20*clhs80 + clhs414*clhs46 + clhs415*clhs48 + clhs416*clhs46 + clhs417*clhs48 + clhs45*clhs58 + clhs52*clhs71);
    lhs(25,13)=clhs0*(clhs101*clhs52 + clhs110*clhs20 + clhs15*clhs97 + clhs414*clhs82 + clhs415*clhs83 + clhs416*clhs82 + clhs417*clhs83 + clhs45*clhs88);
    lhs(25,14)=clhs0*(clhs112*clhs414 + clhs112*clhs416 + clhs113*clhs415 + clhs113*clhs417 + clhs118*clhs45 + clhs127*clhs15 + clhs131*clhs52 + clhs140*clhs20);
    lhs(25,15)=clhs0*(clhs142*clhs414 + clhs142*clhs416 + clhs143*clhs415 + clhs143*clhs417 + clhs148*clhs45 + clhs15*clhs157 + clhs161*clhs52 + clhs170*clhs20);
    lhs(25,16)=clhs0*(clhs15*clhs187 + clhs172*clhs414 + clhs172*clhs416 + clhs173*clhs415 + clhs173*clhs417 + clhs178*clhs45 + clhs191*clhs52 + clhs20*clhs200);
    lhs(25,17)=clhs0*(clhs15*clhs217 + clhs20*clhs230 + clhs202*clhs414 + clhs202*clhs416 + clhs203*clhs415 + clhs203*clhs417 + clhs208*clhs45 + clhs221*clhs52);
    lhs(25,18)=clhs0*(clhs15*clhs247 + clhs20*clhs260 + clhs232*clhs414 + clhs232*clhs416 + clhs233*clhs415 + clhs233*clhs417 + clhs238*clhs45 + clhs251*clhs52);
    lhs(25,19)=clhs0*(clhs15*clhs277 + clhs20*clhs290 + clhs262*clhs414 + clhs262*clhs416 + clhs263*clhs415 + clhs263*clhs417 + clhs268*clhs45 + clhs281*clhs52);
    lhs(25,20)=clhs0*(clhs15*clhs307 + clhs20*clhs320 + clhs292*clhs414 + clhs292*clhs416 + clhs293*clhs415 + clhs293*clhs417 + clhs298*clhs45 + clhs311*clhs52);
    lhs(25,21)=clhs0*(clhs15*clhs337 + clhs20*clhs350 + clhs322*clhs414 + clhs322*clhs416 + clhs323*clhs415 + clhs323*clhs417 + clhs328*clhs45 + clhs341*clhs52);
    lhs(25,22)=clhs0*(clhs15*clhs367 + clhs20*clhs380 + clhs352*clhs414 + clhs352*clhs416 + clhs353*clhs415 + clhs353*clhs417 + clhs358*clhs45 + clhs371*clhs52);
    lhs(25,23)=clhs0*(clhs15*clhs397 + clhs20*clhs410 + clhs382*clhs414 + clhs382*clhs416 + clhs383*clhs415 + clhs383*clhs417 + clhs388*clhs45 + clhs401*clhs52);
    lhs(25,24)=0;
    lhs(25,25)=0;
    lhs(25,26)=0;
    lhs(25,27)=0;
    lhs(25,28)=0;
    lhs(25,29)=0;
    lhs(25,30)=0;
    lhs(25,31)=0;
    lhs(25,32)=0;
    lhs(25,33)=0;
    lhs(25,34)=0;
    lhs(25,35)=0;
    lhs(26,0)=-clhs3*clhs418;
    lhs(26,1)=-clhs3*clhs419;
    lhs(26,2)=-clhs3*clhs420;
    lhs(26,3)=-clhs37*clhs418;
    lhs(26,4)=-clhs37*clhs419;
    lhs(26,5)=-clhs37*clhs420;
    lhs(26,6)=-clhs38*clhs418;
    lhs(26,7)=-clhs38*clhs419;
    lhs(26,8)=-clhs38*clhs420;
    lhs(26,9)=-clhs39*clhs418;
    lhs(26,10)=-clhs39*clhs419;
    lhs(26,11)=-clhs39*clhs420;
    lhs(26,12)=clhs0*(clhs26*clhs67 + clhs31*clhs80 + clhs421*clhs46 + clhs422*clhs48 + clhs423*clhs46 + clhs424*clhs48 + clhs45*clhs62 + clhs52*clhs75);
    lhs(26,13)=clhs0*(clhs105*clhs52 + clhs110*clhs31 + clhs26*clhs97 + clhs421*clhs82 + clhs422*clhs83 + clhs423*clhs82 + clhs424*clhs83 + clhs45*clhs92);
    lhs(26,14)=clhs0*(clhs112*clhs421 + clhs112*clhs423 + clhs113*clhs422 + clhs113*clhs424 + clhs122*clhs45 + clhs127*clhs26 + clhs135*clhs52 + clhs140*clhs31);
    lhs(26,15)=clhs0*(clhs142*clhs421 + clhs142*clhs423 + clhs143*clhs422 + clhs143*clhs424 + clhs152*clhs45 + clhs157*clhs26 + clhs165*clhs52 + clhs170*clhs31);
    lhs(26,16)=clhs0*(clhs172*clhs421 + clhs172*clhs423 + clhs173*clhs422 + clhs173*clhs424 + clhs182*clhs45 + clhs187*clhs26 + clhs195*clhs52 + clhs200*clhs31);
    lhs(26,17)=clhs0*(clhs202*clhs421 + clhs202*clhs423 + clhs203*clhs422 + clhs203*clhs424 + clhs212*clhs45 + clhs217*clhs26 + clhs225*clhs52 + clhs230*clhs31);
    lhs(26,18)=clhs0*(clhs232*clhs421 + clhs232*clhs423 + clhs233*clhs422 + clhs233*clhs424 + clhs242*clhs45 + clhs247*clhs26 + clhs255*clhs52 + clhs260*clhs31);
    lhs(26,19)=clhs0*(clhs26*clhs277 + clhs262*clhs421 + clhs262*clhs423 + clhs263*clhs422 + clhs263*clhs424 + clhs272*clhs45 + clhs285*clhs52 + clhs290*clhs31);
    lhs(26,20)=clhs0*(clhs26*clhs307 + clhs292*clhs421 + clhs292*clhs423 + clhs293*clhs422 + clhs293*clhs424 + clhs302*clhs45 + clhs31*clhs320 + clhs315*clhs52);
    lhs(26,21)=clhs0*(clhs26*clhs337 + clhs31*clhs350 + clhs322*clhs421 + clhs322*clhs423 + clhs323*clhs422 + clhs323*clhs424 + clhs332*clhs45 + clhs345*clhs52);
    lhs(26,22)=clhs0*(clhs26*clhs367 + clhs31*clhs380 + clhs352*clhs421 + clhs352*clhs423 + clhs353*clhs422 + clhs353*clhs424 + clhs362*clhs45 + clhs375*clhs52);
    lhs(26,23)=clhs0*(clhs26*clhs397 + clhs31*clhs410 + clhs382*clhs421 + clhs382*clhs423 + clhs383*clhs422 + clhs383*clhs424 + clhs392*clhs45 + clhs405*clhs52);
    lhs(26,24)=0;
    lhs(26,25)=0;
    lhs(26,26)=0;
    lhs(26,27)=0;
    lhs(26,28)=0;
    lhs(26,29)=0;
    lhs(26,30)=0;
    lhs(26,31)=0;
    lhs(26,32)=0;
    lhs(26,33)=0;
    lhs(26,34)=0;
    lhs(26,35)=0;
    lhs(27,0)=-clhs426*clhs427;
    lhs(27,1)=-clhs426*clhs428;
    lhs(27,2)=-clhs426*clhs429;
    lhs(27,3)=-clhs427*clhs430;
    lhs(27,4)=-clhs428*clhs430;
    lhs(27,5)=-clhs429*clhs430;
    lhs(27,6)=-clhs427*clhs431;
    lhs(27,7)=-clhs428*clhs431;
    lhs(27,8)=-clhs429*clhs431;
    lhs(27,9)=-clhs427*clhs432;
    lhs(27,10)=-clhs428*clhs432;
    lhs(27,11)=-clhs429*clhs432;
    lhs(27,12)=clhs0*(clhs10*clhs441 + clhs433*clhs55 + clhs434*clhs46 + clhs435*clhs436 + clhs435*clhs439 + clhs437*clhs68 + clhs438*clhs46 + clhs440*clhs5);
    lhs(27,13)=clhs0*(clhs10*clhs444 + clhs433*clhs85 + clhs434*clhs82 + clhs436*clhs442 + clhs437*clhs98 + clhs438*clhs82 + clhs439*clhs442 + clhs443*clhs5);
    lhs(27,14)=clhs0*(clhs10*clhs447 + clhs112*clhs434 + clhs112*clhs438 + clhs115*clhs433 + clhs128*clhs437 + clhs436*clhs445 + clhs439*clhs445 + clhs446*clhs5);
    lhs(27,15)=clhs0*(clhs10*clhs450 + clhs142*clhs434 + clhs142*clhs438 + clhs145*clhs433 + clhs158*clhs437 + clhs436*clhs448 + clhs439*clhs448 + clhs449*clhs5);
    lhs(27,16)=clhs0*(clhs10*clhs453 + clhs172*clhs434 + clhs172*clhs438 + clhs175*clhs433 + clhs188*clhs437 + clhs436*clhs451 + clhs439*clhs451 + clhs452*clhs5);
    lhs(27,17)=clhs0*(clhs10*clhs456 + clhs202*clhs434 + clhs202*clhs438 + clhs205*clhs433 + clhs218*clhs437 + clhs436*clhs454 + clhs439*clhs454 + clhs455*clhs5);
    lhs(27,18)=clhs0*(clhs10*clhs459 + clhs232*clhs434 + clhs232*clhs438 + clhs235*clhs433 + clhs248*clhs437 + clhs436*clhs457 + clhs439*clhs457 + clhs458*clhs5);
    lhs(27,19)=clhs0*(clhs10*clhs462 + clhs262*clhs434 + clhs262*clhs438 + clhs265*clhs433 + clhs278*clhs437 + clhs436*clhs460 + clhs439*clhs460 + clhs461*clhs5);
    lhs(27,20)=clhs0*(clhs10*clhs465 + clhs292*clhs434 + clhs292*clhs438 + clhs295*clhs433 + clhs308*clhs437 + clhs436*clhs463 + clhs439*clhs463 + clhs464*clhs5);
    lhs(27,21)=clhs0*(clhs10*clhs468 + clhs322*clhs434 + clhs322*clhs438 + clhs325*clhs433 + clhs338*clhs437 + clhs436*clhs466 + clhs439*clhs466 + clhs467*clhs5);
    lhs(27,22)=clhs0*(clhs10*clhs471 + clhs352*clhs434 + clhs352*clhs438 + clhs355*clhs433 + clhs368*clhs437 + clhs436*clhs469 + clhs439*clhs469 + clhs470*clhs5);
    lhs(27,23)=clhs0*(clhs10*clhs474 + clhs382*clhs434 + clhs382*clhs438 + clhs385*clhs433 + clhs398*clhs437 + clhs436*clhs472 + clhs439*clhs472 + clhs473*clhs5);
    lhs(27,24)=0;
    lhs(27,25)=0;
    lhs(27,26)=0;
    lhs(27,27)=0;
    lhs(27,28)=0;
    lhs(27,29)=0;
    lhs(27,30)=0;
    lhs(27,31)=0;
    lhs(27,32)=0;
    lhs(27,33)=0;
    lhs(27,34)=0;
    lhs(27,35)=0;
    lhs(28,0)=-clhs426*clhs475;
    lhs(28,1)=-clhs426*clhs476;
    lhs(28,2)=-clhs426*clhs477;
    lhs(28,3)=-clhs430*clhs475;
    lhs(28,4)=-clhs430*clhs476;
    lhs(28,5)=-clhs430*clhs477;
    lhs(28,6)=-clhs431*clhs475;
    lhs(28,7)=-clhs431*clhs476;
    lhs(28,8)=-clhs431*clhs477;
    lhs(28,9)=-clhs432*clhs475;
    lhs(28,10)=-clhs432*clhs476;
    lhs(28,11)=-clhs432*clhs477;
    lhs(28,12)=clhs0*(clhs16*clhs440 + clhs21*clhs441 + clhs433*clhs59 + clhs435*clhs479 + clhs435*clhs481 + clhs437*clhs72 + clhs46*clhs478 + clhs46*clhs480);
    lhs(28,13)=clhs0*(clhs102*clhs437 + clhs16*clhs443 + clhs21*clhs444 + clhs433*clhs89 + clhs442*clhs479 + clhs442*clhs481 + clhs478*clhs82 + clhs480*clhs82);
    lhs(28,14)=clhs0*(clhs112*clhs478 + clhs112*clhs480 + clhs119*clhs433 + clhs132*clhs437 + clhs16*clhs446 + clhs21*clhs447 + clhs445*clhs479 + clhs445*clhs481);
    lhs(28,15)=clhs0*(clhs142*clhs478 + clhs142*clhs480 + clhs149*clhs433 + clhs16*clhs449 + clhs162*clhs437 + clhs21*clhs450 + clhs448*clhs479 + clhs448*clhs481);
    lhs(28,16)=clhs0*(clhs16*clhs452 + clhs172*clhs478 + clhs172*clhs480 + clhs179*clhs433 + clhs192*clhs437 + clhs21*clhs453 + clhs451*clhs479 + clhs451*clhs481);
    lhs(28,17)=clhs0*(clhs16*clhs455 + clhs202*clhs478 + clhs202*clhs480 + clhs209*clhs433 + clhs21*clhs456 + clhs222*clhs437 + clhs454*clhs479 + clhs454*clhs481);
    lhs(28,18)=clhs0*(clhs16*clhs458 + clhs21*clhs459 + clhs232*clhs478 + clhs232*clhs480 + clhs239*clhs433 + clhs252*clhs437 + clhs457*clhs479 + clhs457*clhs481);
    lhs(28,19)=clhs0*(clhs16*clhs461 + clhs21*clhs462 + clhs262*clhs478 + clhs262*clhs480 + clhs269*clhs433 + clhs282*clhs437 + clhs460*clhs479 + clhs460*clhs481);
    lhs(28,20)=clhs0*(clhs16*clhs464 + clhs21*clhs465 + clhs292*clhs478 + clhs292*clhs480 + clhs299*clhs433 + clhs312*clhs437 + clhs463*clhs479 + clhs463*clhs481);
    lhs(28,21)=clhs0*(clhs16*clhs467 + clhs21*clhs468 + clhs322*clhs478 + clhs322*clhs480 + clhs329*clhs433 + clhs342*clhs437 + clhs466*clhs479 + clhs466*clhs481);
    lhs(28,22)=clhs0*(clhs16*clhs470 + clhs21*clhs471 + clhs352*clhs478 + clhs352*clhs480 + clhs359*clhs433 + clhs372*clhs437 + clhs469*clhs479 + clhs469*clhs481);
    lhs(28,23)=clhs0*(clhs16*clhs473 + clhs21*clhs474 + clhs382*clhs478 + clhs382*clhs480 + clhs389*clhs433 + clhs402*clhs437 + clhs472*clhs479 + clhs472*clhs481);
    lhs(28,24)=0;
    lhs(28,25)=0;
    lhs(28,26)=0;
    lhs(28,27)=0;
    lhs(28,28)=0;
    lhs(28,29)=0;
    lhs(28,30)=0;
    lhs(28,31)=0;
    lhs(28,32)=0;
    lhs(28,33)=0;
    lhs(28,34)=0;
    lhs(28,35)=0;
    lhs(29,0)=-clhs426*clhs482;
    lhs(29,1)=-clhs426*clhs483;
    lhs(29,2)=-clhs426*clhs484;
    lhs(29,3)=-clhs430*clhs482;
    lhs(29,4)=-clhs430*clhs483;
    lhs(29,5)=-clhs430*clhs484;
    lhs(29,6)=-clhs431*clhs482;
    lhs(29,7)=-clhs431*clhs483;
    lhs(29,8)=-clhs431*clhs484;
    lhs(29,9)=-clhs432*clhs482;
    lhs(29,10)=-clhs432*clhs483;
    lhs(29,11)=-clhs432*clhs484;
    lhs(29,12)=clhs0*(clhs27*clhs440 + clhs32*clhs441 + clhs433*clhs63 + clhs435*clhs486 + clhs435*clhs488 + clhs437*clhs76 + clhs46*clhs485 + clhs46*clhs487);
    lhs(29,13)=clhs0*(clhs106*clhs437 + clhs27*clhs443 + clhs32*clhs444 + clhs433*clhs93 + clhs442*clhs486 + clhs442*clhs488 + clhs485*clhs82 + clhs487*clhs82);
    lhs(29,14)=clhs0*(clhs112*clhs485 + clhs112*clhs487 + clhs123*clhs433 + clhs136*clhs437 + clhs27*clhs446 + clhs32*clhs447 + clhs445*clhs486 + clhs445*clhs488);
    lhs(29,15)=clhs0*(clhs142*clhs485 + clhs142*clhs487 + clhs153*clhs433 + clhs166*clhs437 + clhs27*clhs449 + clhs32*clhs450 + clhs448*clhs486 + clhs448*clhs488);
    lhs(29,16)=clhs0*(clhs172*clhs485 + clhs172*clhs487 + clhs183*clhs433 + clhs196*clhs437 + clhs27*clhs452 + clhs32*clhs453 + clhs451*clhs486 + clhs451*clhs488);
    lhs(29,17)=clhs0*(clhs202*clhs485 + clhs202*clhs487 + clhs213*clhs433 + clhs226*clhs437 + clhs27*clhs455 + clhs32*clhs456 + clhs454*clhs486 + clhs454*clhs488);
    lhs(29,18)=clhs0*(clhs232*clhs485 + clhs232*clhs487 + clhs243*clhs433 + clhs256*clhs437 + clhs27*clhs458 + clhs32*clhs459 + clhs457*clhs486 + clhs457*clhs488);
    lhs(29,19)=clhs0*(clhs262*clhs485 + clhs262*clhs487 + clhs27*clhs461 + clhs273*clhs433 + clhs286*clhs437 + clhs32*clhs462 + clhs460*clhs486 + clhs460*clhs488);
    lhs(29,20)=clhs0*(clhs27*clhs464 + clhs292*clhs485 + clhs292*clhs487 + clhs303*clhs433 + clhs316*clhs437 + clhs32*clhs465 + clhs463*clhs486 + clhs463*clhs488);
    lhs(29,21)=clhs0*(clhs27*clhs467 + clhs32*clhs468 + clhs322*clhs485 + clhs322*clhs487 + clhs333*clhs433 + clhs346*clhs437 + clhs466*clhs486 + clhs466*clhs488);
    lhs(29,22)=clhs0*(clhs27*clhs470 + clhs32*clhs471 + clhs352*clhs485 + clhs352*clhs487 + clhs363*clhs433 + clhs376*clhs437 + clhs469*clhs486 + clhs469*clhs488);
    lhs(29,23)=clhs0*(clhs27*clhs473 + clhs32*clhs474 + clhs382*clhs485 + clhs382*clhs487 + clhs393*clhs433 + clhs406*clhs437 + clhs472*clhs486 + clhs472*clhs488);
    lhs(29,24)=0;
    lhs(29,25)=0;
    lhs(29,26)=0;
    lhs(29,27)=0;
    lhs(29,28)=0;
    lhs(29,29)=0;
    lhs(29,30)=0;
    lhs(29,31)=0;
    lhs(29,32)=0;
    lhs(29,33)=0;
    lhs(29,34)=0;
    lhs(29,35)=0;
    lhs(30,0)=-clhs490*clhs491;
    lhs(30,1)=-clhs490*clhs492;
    lhs(30,2)=-clhs490*clhs493;
    lhs(30,3)=-clhs491*clhs494;
    lhs(30,4)=-clhs492*clhs494;
    lhs(30,5)=-clhs493*clhs494;
    lhs(30,6)=-clhs491*clhs495;
    lhs(30,7)=-clhs492*clhs495;
    lhs(30,8)=-clhs493*clhs495;
    lhs(30,9)=-clhs491*clhs496;
    lhs(30,10)=-clhs492*clhs496;
    lhs(30,11)=-clhs493*clhs496;
    lhs(30,12)=clhs0*(clhs11*clhs505 + clhs46*clhs498 + clhs46*clhs502 + clhs497*clhs56 + clhs499*clhs500 + clhs499*clhs503 + clhs501*clhs69 + clhs504*clhs6);
    lhs(30,13)=clhs0*(clhs11*clhs508 + clhs497*clhs86 + clhs498*clhs82 + clhs500*clhs506 + clhs501*clhs99 + clhs502*clhs82 + clhs503*clhs506 + clhs507*clhs6);
    lhs(30,14)=clhs0*(clhs11*clhs511 + clhs112*clhs498 + clhs112*clhs502 + clhs116*clhs497 + clhs129*clhs501 + clhs500*clhs509 + clhs503*clhs509 + clhs510*clhs6);
    lhs(30,15)=clhs0*(clhs11*clhs514 + clhs142*clhs498 + clhs142*clhs502 + clhs146*clhs497 + clhs159*clhs501 + clhs500*clhs512 + clhs503*clhs512 + clhs513*clhs6);
    lhs(30,16)=clhs0*(clhs11*clhs517 + clhs172*clhs498 + clhs172*clhs502 + clhs176*clhs497 + clhs189*clhs501 + clhs500*clhs515 + clhs503*clhs515 + clhs516*clhs6);
    lhs(30,17)=clhs0*(clhs11*clhs520 + clhs202*clhs498 + clhs202*clhs502 + clhs206*clhs497 + clhs219*clhs501 + clhs500*clhs518 + clhs503*clhs518 + clhs519*clhs6);
    lhs(30,18)=clhs0*(clhs11*clhs523 + clhs232*clhs498 + clhs232*clhs502 + clhs236*clhs497 + clhs249*clhs501 + clhs500*clhs521 + clhs503*clhs521 + clhs522*clhs6);
    lhs(30,19)=clhs0*(clhs11*clhs526 + clhs262*clhs498 + clhs262*clhs502 + clhs266*clhs497 + clhs279*clhs501 + clhs500*clhs524 + clhs503*clhs524 + clhs525*clhs6);
    lhs(30,20)=clhs0*(clhs11*clhs529 + clhs292*clhs498 + clhs292*clhs502 + clhs296*clhs497 + clhs309*clhs501 + clhs500*clhs527 + clhs503*clhs527 + clhs528*clhs6);
    lhs(30,21)=clhs0*(clhs11*clhs532 + clhs322*clhs498 + clhs322*clhs502 + clhs326*clhs497 + clhs339*clhs501 + clhs500*clhs530 + clhs503*clhs530 + clhs531*clhs6);
    lhs(30,22)=clhs0*(clhs11*clhs535 + clhs352*clhs498 + clhs352*clhs502 + clhs356*clhs497 + clhs369*clhs501 + clhs500*clhs533 + clhs503*clhs533 + clhs534*clhs6);
    lhs(30,23)=clhs0*(clhs11*clhs538 + clhs382*clhs498 + clhs382*clhs502 + clhs386*clhs497 + clhs399*clhs501 + clhs500*clhs536 + clhs503*clhs536 + clhs537*clhs6);
    lhs(30,24)=0;
    lhs(30,25)=0;
    lhs(30,26)=0;
    lhs(30,27)=0;
    lhs(30,28)=0;
    lhs(30,29)=0;
    lhs(30,30)=0;
    lhs(30,31)=0;
    lhs(30,32)=0;
    lhs(30,33)=0;
    lhs(30,34)=0;
    lhs(30,35)=0;
    lhs(31,0)=-clhs490*clhs539;
    lhs(31,1)=-clhs490*clhs540;
    lhs(31,2)=-clhs490*clhs541;
    lhs(31,3)=-clhs494*clhs539;
    lhs(31,4)=-clhs494*clhs540;
    lhs(31,5)=-clhs494*clhs541;
    lhs(31,6)=-clhs495*clhs539;
    lhs(31,7)=-clhs495*clhs540;
    lhs(31,8)=-clhs495*clhs541;
    lhs(31,9)=-clhs496*clhs539;
    lhs(31,10)=-clhs496*clhs540;
    lhs(31,11)=-clhs496*clhs541;
    lhs(31,12)=clhs0*(clhs17*clhs504 + clhs22*clhs505 + clhs46*clhs542 + clhs46*clhs544 + clhs497*clhs60 + clhs499*clhs543 + clhs499*clhs545 + clhs501*clhs73);
    lhs(31,13)=clhs0*(clhs103*clhs501 + clhs17*clhs507 + clhs22*clhs508 + clhs497*clhs90 + clhs506*clhs543 + clhs506*clhs545 + clhs542*clhs82 + clhs544*clhs82);
    lhs(31,14)=clhs0*(clhs112*clhs542 + clhs112*clhs544 + clhs120*clhs497 + clhs133*clhs501 + clhs17*clhs510 + clhs22*clhs511 + clhs509*clhs543 + clhs509*clhs545);
    lhs(31,15)=clhs0*(clhs142*clhs542 + clhs142*clhs544 + clhs150*clhs497 + clhs163*clhs501 + clhs17*clhs513 + clhs22*clhs514 + clhs512*clhs543 + clhs512*clhs545);
    lhs(31,16)=clhs0*(clhs17*clhs516 + clhs172*clhs542 + clhs172*clhs544 + clhs180*clhs497 + clhs193*clhs501 + clhs22*clhs517 + clhs515*clhs543 + clhs515*clhs545);
    lhs(31,17)=clhs0*(clhs17*clhs519 + clhs202*clhs542 + clhs202*clhs544 + clhs210*clhs497 + clhs22*clhs520 + clhs223*clhs501 + clhs518*clhs543 + clhs518*clhs545);
    lhs(31,18)=clhs0*(clhs17*clhs522 + clhs22*clhs523 + clhs232*clhs542 + clhs232*clhs544 + clhs240*clhs497 + clhs253*clhs501 + clhs521*clhs543 + clhs521*clhs545);
    lhs(31,19)=clhs0*(clhs17*clhs525 + clhs22*clhs526 + clhs262*clhs542 + clhs262*clhs544 + clhs270*clhs497 + clhs283*clhs501 + clhs524*clhs543 + clhs524*clhs545);
    lhs(31,20)=clhs0*(clhs17*clhs528 + clhs22*clhs529 + clhs292*clhs542 + clhs292*clhs544 + clhs300*clhs497 + clhs313*clhs501 + clhs527*clhs543 + clhs527*clhs545);
    lhs(31,21)=clhs0*(clhs17*clhs531 + clhs22*clhs532 + clhs322*clhs542 + clhs322*clhs544 + clhs330*clhs497 + clhs343*clhs501 + clhs530*clhs543 + clhs530*clhs545);
    lhs(31,22)=clhs0*(clhs17*clhs534 + clhs22*clhs535 + clhs352*clhs542 + clhs352*clhs544 + clhs360*clhs497 + clhs373*clhs501 + clhs533*clhs543 + clhs533*clhs545);
    lhs(31,23)=clhs0*(clhs17*clhs537 + clhs22*clhs538 + clhs382*clhs542 + clhs382*clhs544 + clhs390*clhs497 + clhs403*clhs501 + clhs536*clhs543 + clhs536*clhs545);
    lhs(31,24)=0;
    lhs(31,25)=0;
    lhs(31,26)=0;
    lhs(31,27)=0;
    lhs(31,28)=0;
    lhs(31,29)=0;
    lhs(31,30)=0;
    lhs(31,31)=0;
    lhs(31,32)=0;
    lhs(31,33)=0;
    lhs(31,34)=0;
    lhs(31,35)=0;
    lhs(32,0)=-clhs490*clhs546;
    lhs(32,1)=-clhs490*clhs547;
    lhs(32,2)=-clhs490*clhs548;
    lhs(32,3)=-clhs494*clhs546;
    lhs(32,4)=-clhs494*clhs547;
    lhs(32,5)=-clhs494*clhs548;
    lhs(32,6)=-clhs495*clhs546;
    lhs(32,7)=-clhs495*clhs547;
    lhs(32,8)=-clhs495*clhs548;
    lhs(32,9)=-clhs496*clhs546;
    lhs(32,10)=-clhs496*clhs547;
    lhs(32,11)=-clhs496*clhs548;
    lhs(32,12)=clhs0*(clhs28*clhs504 + clhs33*clhs505 + clhs46*clhs549 + clhs46*clhs551 + clhs497*clhs64 + clhs499*clhs550 + clhs499*clhs552 + clhs501*clhs77);
    lhs(32,13)=clhs0*(clhs107*clhs501 + clhs28*clhs507 + clhs33*clhs508 + clhs497*clhs94 + clhs506*clhs550 + clhs506*clhs552 + clhs549*clhs82 + clhs551*clhs82);
    lhs(32,14)=clhs0*(clhs112*clhs549 + clhs112*clhs551 + clhs124*clhs497 + clhs137*clhs501 + clhs28*clhs510 + clhs33*clhs511 + clhs509*clhs550 + clhs509*clhs552);
    lhs(32,15)=clhs0*(clhs142*clhs549 + clhs142*clhs551 + clhs154*clhs497 + clhs167*clhs501 + clhs28*clhs513 + clhs33*clhs514 + clhs512*clhs550 + clhs512*clhs552);
    lhs(32,16)=clhs0*(clhs172*clhs549 + clhs172*clhs551 + clhs184*clhs497 + clhs197*clhs501 + clhs28*clhs516 + clhs33*clhs517 + clhs515*clhs550 + clhs515*clhs552);
    lhs(32,17)=clhs0*(clhs202*clhs549 + clhs202*clhs551 + clhs214*clhs497 + clhs227*clhs501 + clhs28*clhs519 + clhs33*clhs520 + clhs518*clhs550 + clhs518*clhs552);
    lhs(32,18)=clhs0*(clhs232*clhs549 + clhs232*clhs551 + clhs244*clhs497 + clhs257*clhs501 + clhs28*clhs522 + clhs33*clhs523 + clhs521*clhs550 + clhs521*clhs552);
    lhs(32,19)=clhs0*(clhs262*clhs549 + clhs262*clhs551 + clhs274*clhs497 + clhs28*clhs525 + clhs287*clhs501 + clhs33*clhs526 + clhs524*clhs550 + clhs524*clhs552);
    lhs(32,20)=clhs0*(clhs28*clhs528 + clhs292*clhs549 + clhs292*clhs551 + clhs304*clhs497 + clhs317*clhs501 + clhs33*clhs529 + clhs527*clhs550 + clhs527*clhs552);
    lhs(32,21)=clhs0*(clhs28*clhs531 + clhs322*clhs549 + clhs322*clhs551 + clhs33*clhs532 + clhs334*clhs497 + clhs347*clhs501 + clhs530*clhs550 + clhs530*clhs552);
    lhs(32,22)=clhs0*(clhs28*clhs534 + clhs33*clhs535 + clhs352*clhs549 + clhs352*clhs551 + clhs364*clhs497 + clhs377*clhs501 + clhs533*clhs550 + clhs533*clhs552);
    lhs(32,23)=clhs0*(clhs28*clhs537 + clhs33*clhs538 + clhs382*clhs549 + clhs382*clhs551 + clhs394*clhs497 + clhs407*clhs501 + clhs536*clhs550 + clhs536*clhs552);
    lhs(32,24)=0;
    lhs(32,25)=0;
    lhs(32,26)=0;
    lhs(32,27)=0;
    lhs(32,28)=0;
    lhs(32,29)=0;
    lhs(32,30)=0;
    lhs(32,31)=0;
    lhs(32,32)=0;
    lhs(32,33)=0;
    lhs(32,34)=0;
    lhs(32,35)=0;
    lhs(33,0)=-clhs554*clhs555;
    lhs(33,1)=-clhs554*clhs556;
    lhs(33,2)=-clhs554*clhs557;
    lhs(33,3)=-clhs555*clhs558;
    lhs(33,4)=-clhs556*clhs558;
    lhs(33,5)=-clhs557*clhs558;
    lhs(33,6)=-clhs555*clhs559;
    lhs(33,7)=-clhs556*clhs559;
    lhs(33,8)=-clhs557*clhs559;
    lhs(33,9)=-clhs555*clhs560;
    lhs(33,10)=-clhs556*clhs560;
    lhs(33,11)=-clhs557*clhs560;
    lhs(33,12)=clhs0*(clhs12*clhs569 + clhs46*clhs562 + clhs46*clhs566 + clhs561*clhs57 + clhs563*clhs564 + clhs563*clhs567 + clhs565*clhs70 + clhs568*clhs7);
    lhs(33,13)=clhs0*(clhs100*clhs565 + clhs12*clhs572 + clhs561*clhs87 + clhs562*clhs82 + clhs564*clhs570 + clhs566*clhs82 + clhs567*clhs570 + clhs571*clhs7);
    lhs(33,14)=clhs0*(clhs112*clhs562 + clhs112*clhs566 + clhs117*clhs561 + clhs12*clhs575 + clhs130*clhs565 + clhs564*clhs573 + clhs567*clhs573 + clhs574*clhs7);
    lhs(33,15)=clhs0*(clhs12*clhs578 + clhs142*clhs562 + clhs142*clhs566 + clhs147*clhs561 + clhs160*clhs565 + clhs564*clhs576 + clhs567*clhs576 + clhs577*clhs7);
    lhs(33,16)=clhs0*(clhs12*clhs581 + clhs172*clhs562 + clhs172*clhs566 + clhs177*clhs561 + clhs190*clhs565 + clhs564*clhs579 + clhs567*clhs579 + clhs580*clhs7);
    lhs(33,17)=clhs0*(clhs12*clhs584 + clhs202*clhs562 + clhs202*clhs566 + clhs207*clhs561 + clhs220*clhs565 + clhs564*clhs582 + clhs567*clhs582 + clhs583*clhs7);
    lhs(33,18)=clhs0*(clhs12*clhs587 + clhs232*clhs562 + clhs232*clhs566 + clhs237*clhs561 + clhs250*clhs565 + clhs564*clhs585 + clhs567*clhs585 + clhs586*clhs7);
    lhs(33,19)=clhs0*(clhs12*clhs590 + clhs262*clhs562 + clhs262*clhs566 + clhs267*clhs561 + clhs280*clhs565 + clhs564*clhs588 + clhs567*clhs588 + clhs589*clhs7);
    lhs(33,20)=clhs0*(clhs12*clhs593 + clhs292*clhs562 + clhs292*clhs566 + clhs297*clhs561 + clhs310*clhs565 + clhs564*clhs591 + clhs567*clhs591 + clhs592*clhs7);
    lhs(33,21)=clhs0*(clhs12*clhs596 + clhs322*clhs562 + clhs322*clhs566 + clhs327*clhs561 + clhs340*clhs565 + clhs564*clhs594 + clhs567*clhs594 + clhs595*clhs7);
    lhs(33,22)=clhs0*(clhs12*clhs599 + clhs352*clhs562 + clhs352*clhs566 + clhs357*clhs561 + clhs370*clhs565 + clhs564*clhs597 + clhs567*clhs597 + clhs598*clhs7);
    lhs(33,23)=clhs0*(clhs12*clhs602 + clhs382*clhs562 + clhs382*clhs566 + clhs387*clhs561 + clhs400*clhs565 + clhs564*clhs600 + clhs567*clhs600 + clhs601*clhs7);
    lhs(33,24)=0;
    lhs(33,25)=0;
    lhs(33,26)=0;
    lhs(33,27)=0;
    lhs(33,28)=0;
    lhs(33,29)=0;
    lhs(33,30)=0;
    lhs(33,31)=0;
    lhs(33,32)=0;
    lhs(33,33)=0;
    lhs(33,34)=0;
    lhs(33,35)=0;
    lhs(34,0)=-clhs554*clhs603;
    lhs(34,1)=-clhs554*clhs604;
    lhs(34,2)=-clhs554*clhs605;
    lhs(34,3)=-clhs558*clhs603;
    lhs(34,4)=-clhs558*clhs604;
    lhs(34,5)=-clhs558*clhs605;
    lhs(34,6)=-clhs559*clhs603;
    lhs(34,7)=-clhs559*clhs604;
    lhs(34,8)=-clhs559*clhs605;
    lhs(34,9)=-clhs560*clhs603;
    lhs(34,10)=-clhs560*clhs604;
    lhs(34,11)=-clhs560*clhs605;
    lhs(34,12)=clhs0*(clhs18*clhs568 + clhs23*clhs569 + clhs46*clhs606 + clhs46*clhs608 + clhs561*clhs61 + clhs563*clhs607 + clhs563*clhs609 + clhs565*clhs74);
    lhs(34,13)=clhs0*(clhs104*clhs565 + clhs18*clhs571 + clhs23*clhs572 + clhs561*clhs91 + clhs570*clhs607 + clhs570*clhs609 + clhs606*clhs82 + clhs608*clhs82);
    lhs(34,14)=clhs0*(clhs112*clhs606 + clhs112*clhs608 + clhs121*clhs561 + clhs134*clhs565 + clhs18*clhs574 + clhs23*clhs575 + clhs573*clhs607 + clhs573*clhs609);
    lhs(34,15)=clhs0*(clhs142*clhs606 + clhs142*clhs608 + clhs151*clhs561 + clhs164*clhs565 + clhs18*clhs577 + clhs23*clhs578 + clhs576*clhs607 + clhs576*clhs609);
    lhs(34,16)=clhs0*(clhs172*clhs606 + clhs172*clhs608 + clhs18*clhs580 + clhs181*clhs561 + clhs194*clhs565 + clhs23*clhs581 + clhs579*clhs607 + clhs579*clhs609);
    lhs(34,17)=clhs0*(clhs18*clhs583 + clhs202*clhs606 + clhs202*clhs608 + clhs211*clhs561 + clhs224*clhs565 + clhs23*clhs584 + clhs582*clhs607 + clhs582*clhs609);
    lhs(34,18)=clhs0*(clhs18*clhs586 + clhs23*clhs587 + clhs232*clhs606 + clhs232*clhs608 + clhs241*clhs561 + clhs254*clhs565 + clhs585*clhs607 + clhs585*clhs609);
    lhs(34,19)=clhs0*(clhs18*clhs589 + clhs23*clhs590 + clhs262*clhs606 + clhs262*clhs608 + clhs271*clhs561 + clhs284*clhs565 + clhs588*clhs607 + clhs588*clhs609);
    lhs(34,20)=clhs0*(clhs18*clhs592 + clhs23*clhs593 + clhs292*clhs606 + clhs292*clhs608 + clhs301*clhs561 + clhs314*clhs565 + clhs591*clhs607 + clhs591*clhs609);
    lhs(34,21)=clhs0*(clhs18*clhs595 + clhs23*clhs596 + clhs322*clhs606 + clhs322*clhs608 + clhs331*clhs561 + clhs344*clhs565 + clhs594*clhs607 + clhs594*clhs609);
    lhs(34,22)=clhs0*(clhs18*clhs598 + clhs23*clhs599 + clhs352*clhs606 + clhs352*clhs608 + clhs361*clhs561 + clhs374*clhs565 + clhs597*clhs607 + clhs597*clhs609);
    lhs(34,23)=clhs0*(clhs18*clhs601 + clhs23*clhs602 + clhs382*clhs606 + clhs382*clhs608 + clhs391*clhs561 + clhs404*clhs565 + clhs600*clhs607 + clhs600*clhs609);
    lhs(34,24)=0;
    lhs(34,25)=0;
    lhs(34,26)=0;
    lhs(34,27)=0;
    lhs(34,28)=0;
    lhs(34,29)=0;
    lhs(34,30)=0;
    lhs(34,31)=0;
    lhs(34,32)=0;
    lhs(34,33)=0;
    lhs(34,34)=0;
    lhs(34,35)=0;
    lhs(35,0)=-clhs554*clhs610;
    lhs(35,1)=-clhs554*clhs611;
    lhs(35,2)=-clhs554*clhs612;
    lhs(35,3)=-clhs558*clhs610;
    lhs(35,4)=-clhs558*clhs611;
    lhs(35,5)=-clhs558*clhs612;
    lhs(35,6)=-clhs559*clhs610;
    lhs(35,7)=-clhs559*clhs611;
    lhs(35,8)=-clhs559*clhs612;
    lhs(35,9)=-clhs560*clhs610;
    lhs(35,10)=-clhs560*clhs611;
    lhs(35,11)=-clhs560*clhs612;
    lhs(35,12)=clhs0*(clhs29*clhs568 + clhs34*clhs569 + clhs46*clhs613 + clhs46*clhs615 + clhs561*clhs65 + clhs563*clhs614 + clhs563*clhs616 + clhs565*clhs78);
    lhs(35,13)=clhs0*(clhs108*clhs565 + clhs29*clhs571 + clhs34*clhs572 + clhs561*clhs95 + clhs570*clhs614 + clhs570*clhs616 + clhs613*clhs82 + clhs615*clhs82);
    lhs(35,14)=clhs0*(clhs112*clhs613 + clhs112*clhs615 + clhs125*clhs561 + clhs138*clhs565 + clhs29*clhs574 + clhs34*clhs575 + clhs573*clhs614 + clhs573*clhs616);
    lhs(35,15)=clhs0*(clhs142*clhs613 + clhs142*clhs615 + clhs155*clhs561 + clhs168*clhs565 + clhs29*clhs577 + clhs34*clhs578 + clhs576*clhs614 + clhs576*clhs616);
    lhs(35,16)=clhs0*(clhs172*clhs613 + clhs172*clhs615 + clhs185*clhs561 + clhs198*clhs565 + clhs29*clhs580 + clhs34*clhs581 + clhs579*clhs614 + clhs579*clhs616);
    lhs(35,17)=clhs0*(clhs202*clhs613 + clhs202*clhs615 + clhs215*clhs561 + clhs228*clhs565 + clhs29*clhs583 + clhs34*clhs584 + clhs582*clhs614 + clhs582*clhs616);
    lhs(35,18)=clhs0*(clhs232*clhs613 + clhs232*clhs615 + clhs245*clhs561 + clhs258*clhs565 + clhs29*clhs586 + clhs34*clhs587 + clhs585*clhs614 + clhs585*clhs616);
    lhs(35,19)=clhs0*(clhs262*clhs613 + clhs262*clhs615 + clhs275*clhs561 + clhs288*clhs565 + clhs29*clhs589 + clhs34*clhs590 + clhs588*clhs614 + clhs588*clhs616);
    lhs(35,20)=clhs0*(clhs29*clhs592 + clhs292*clhs613 + clhs292*clhs615 + clhs305*clhs561 + clhs318*clhs565 + clhs34*clhs593 + clhs591*clhs614 + clhs591*clhs616);
    lhs(35,21)=clhs0*(clhs29*clhs595 + clhs322*clhs613 + clhs322*clhs615 + clhs335*clhs561 + clhs34*clhs596 + clhs348*clhs565 + clhs594*clhs614 + clhs594*clhs616);
    lhs(35,22)=clhs0*(clhs29*clhs598 + clhs34*clhs599 + clhs352*clhs613 + clhs352*clhs615 + clhs365*clhs561 + clhs378*clhs565 + clhs597*clhs614 + clhs597*clhs616);
    lhs(35,23)=clhs0*(clhs29*clhs601 + clhs34*clhs602 + clhs382*clhs613 + clhs382*clhs615 + clhs395*clhs561 + clhs408*clhs565 + clhs600*clhs614 + clhs600*clhs616);
    lhs(35,24)=0;
    lhs(35,25)=0;
    lhs(35,26)=0;
    lhs(35,27)=0;
    lhs(35,28)=0;
    lhs(35,29)=0;
    lhs(35,30)=0;
    lhs(35,31)=0;
    lhs(35,32)=0;
    lhs(35,33)=0;
    lhs(35,34)=0;
    lhs(35,35)=0;

    
    return lhs;
}

    /***********************************************************************************/
    /***********************************************************************************/
    
    static inline array_1d<double,36> ComputeGaussPointActiveRHS(
        const array_1d<double,4> N1, 
        const array_1d<double,4> N2, 
        const array_1d<double,4> Phi, 
        const double detJ, 
        const ContactData<3,4>& rContactData
        )
{
    array_1d<double,36> rhs;
    
    const double integration_point_gap = inner_prod(rContactData.Gaps,N1);
    const bounded_matrix<double, 4, 3> normalslave    = rContactData.Normal_s;
    const bounded_matrix<double, 4, 3> tan1slave      = rContactData.Tangent_xi_s;
    const bounded_matrix<double, 4, 3> tan2slave      = rContactData.Tangent_eta_s;
    const bounded_matrix<double, 4, 3> lm             = rContactData.LagrangeMultipliers;
    
    const double crhs0 =     detJ; // DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs1 =     N2[0]*crhs0;
    const double crhs2 =     Phi[0]; // PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs3 =     Phi[1]; // PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs4 =     Phi[2]; // PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs5 =     Phi[3]; // PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs6 =     crhs2*lm(0,0) + crhs3*lm(1,0) + crhs4*lm(2,0) + crhs5*lm(3,0);
    const double crhs7 =     crhs2*lm(0,1) + crhs3*lm(1,1) + crhs4*lm(2,1) + crhs5*lm(3,1);
    const double crhs8 =     crhs2*lm(0,2) + crhs3*lm(1,2) + crhs4*lm(2,2) + crhs5*lm(3,2);
    const double crhs9 =     N2[1]*crhs0;
    const double crhs10 =     N2[2]*crhs0;
    const double crhs11 =     N2[3]*crhs0;
    const double crhs12 =     N1[0]*crhs0;
    const double crhs13 =     N1[1]*crhs0;
    const double crhs14 =     N1[2]*crhs0;
    const double crhs15 =     N1[3]*crhs0;
    const double crhs16 =     integration_point_gap; // GAPG(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
    const double crhs17 =     crhs0*crhs16*crhs2;
    const double crhs18 =     crhs0*crhs16*crhs3;
    const double crhs19 =     crhs0*crhs16*crhs4;
    const double crhs20 =     crhs0*crhs16*crhs5;

    rhs[0]=-crhs1*crhs6;
    rhs[1]=-crhs1*crhs7;
    rhs[2]=-crhs1*crhs8;
    rhs[3]=-crhs6*crhs9;
    rhs[4]=-crhs7*crhs9;
    rhs[5]=-crhs8*crhs9;
    rhs[6]=-crhs10*crhs6;
    rhs[7]=-crhs10*crhs7;
    rhs[8]=-crhs10*crhs8;
    rhs[9]=-crhs11*crhs6;
    rhs[10]=-crhs11*crhs7;
    rhs[11]=-crhs11*crhs8;
    rhs[12]=crhs12*crhs6;
    rhs[13]=crhs12*crhs7;
    rhs[14]=crhs12*crhs8;
    rhs[15]=crhs13*crhs6;
    rhs[16]=crhs13*crhs7;
    rhs[17]=crhs13*crhs8;
    rhs[18]=crhs14*crhs6;
    rhs[19]=crhs14*crhs7;
    rhs[20]=crhs14*crhs8;
    rhs[21]=crhs15*crhs6;
    rhs[22]=crhs15*crhs7;
    rhs[23]=crhs15*crhs8;
    rhs[24]=crhs17*normalslave(0,0);
    rhs[25]=crhs17*normalslave(0,1);
    rhs[26]=crhs17*normalslave(0,2);
    rhs[27]=crhs18*normalslave(1,0);
    rhs[28]=crhs18*normalslave(1,1);
    rhs[29]=crhs18*normalslave(1,2);
    rhs[30]=crhs19*normalslave(2,0);
    rhs[31]=crhs19*normalslave(2,1);
    rhs[32]=crhs19*normalslave(2,2);
    rhs[33]=crhs20*normalslave(3,0);
    rhs[34]=crhs20*normalslave(3,1);
    rhs[35]=crhs20*normalslave(3,2);

    
    return rhs;
}

    /***********************************************************************************/
    /***********************************************************************************/
    
    static inline array_1d<double,36> ComputeGaussPointStickRHS(
        const array_1d<double,4> N1, 
        const array_1d<double,4> N2, 
        const array_1d<double,4> Phi, 
        const double detJ, 
        const double mu, 
        const ContactData<3,4>& rContactData
        )
{
    array_1d<double,36> rhs;
    
    const bounded_matrix<double, 4, 3> normalslave = rContactData.Normal_s;
    const bounded_matrix<double, 4, 3> tan1slave   = rContactData.Tangent_xi_s;
    const bounded_matrix<double, 4, 3> tan2slave   = rContactData.Tangent_eta_s;
//     const bounded_matrix<double, 4, 3> lm          = rContactData.LagrangeMultipliers;
    const double Dt              = rContactData.Dt;
    
    const bounded_matrix<double, 4, 3> v1 = rContactData.v1;
    const bounded_matrix<double, 4, 3> v2 = rContactData.v2;
    
    const double crhs0 =     1.0/Dt;
    const double crhs1 =     detJ; // DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs2 =     crhs0*crhs1*Phi[0]; // CRHS0*CRHS1*PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs3 =     tan1slave(0,0); // TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs4 =     tan1slave(1,0); // TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs5 =     tan1slave(2,0); // TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs6 =     tan1slave(3,0); // TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs7 =     N1[0]*(Dt*v1(0,0)) + N1[1]*(Dt*v1(1,0)) + N1[2]*(Dt*v1(2,0)) + N1[3]*(Dt*v1(3,0)) - N2[0]*(Dt*v2(0,0)) - N2[1]*(Dt*v2(1,0)) - N2[2]*(Dt*v2(2,0)) - N2[3]*(Dt*v2(3,0));
    const double crhs8 =     tan1slave(0,1); // TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs9 =     tan1slave(1,1); // TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs10 =     tan1slave(2,1); // TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs11 =     tan1slave(3,1); // TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs12 =     N1[0]*(Dt*v1(0,1)) + N1[1]*(Dt*v1(1,1)) + N1[2]*(Dt*v1(2,1)) + N1[3]*(Dt*v1(3,1)) - N2[0]*(Dt*v2(0,1)) - N2[1]*(Dt*v2(1,1)) - N2[2]*(Dt*v2(2,1)) - N2[3]*(Dt*v2(3,1));
    const double crhs13 =     tan1slave(0,2); // TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs14 =     tan1slave(1,2); // TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs15 =     tan1slave(2,2); // TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs16 =     tan1slave(3,2); // TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs17 =     N1[0]*(Dt*v1(0,2)) + N1[1]*(Dt*v1(1,2)) + N1[2]*(Dt*v1(2,2)) + N1[3]*(Dt*v1(3,2)) - N2[0]*(Dt*v2(0,2)) - N2[1]*(Dt*v2(1,2)) - N2[2]*(Dt*v2(2,2)) - N2[3]*(Dt*v2(3,2));
    const double crhs18 =     crhs12*(N1[0]*crhs8 + N1[1]*crhs9 + N1[2]*crhs10 + N1[3]*crhs11) + crhs17*(N1[0]*crhs13 + N1[1]*crhs14 + N1[2]*crhs15 + N1[3]*crhs16) + crhs7*(N1[0]*crhs3 + N1[1]*crhs4 + N1[2]*crhs5 + N1[3]*crhs6);
    const double crhs19 =     tan2slave(0,0); // TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs20 =     tan2slave(1,0); // TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs21 =     tan2slave(2,0); // TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs22 =     tan2slave(3,0); // TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs23 =     tan2slave(0,1); // TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs24 =     tan2slave(1,1); // TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs25 =     tan2slave(2,1); // TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs26 =     tan2slave(3,1); // TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs27 =     tan2slave(0,2); // TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs28 =     tan2slave(1,2); // TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs29 =     tan2slave(2,2); // TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs30 =     tan2slave(3,2); // TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs31 =     crhs12*(N1[0]*crhs23 + N1[1]*crhs24 + N1[2]*crhs25 + N1[3]*crhs26) + crhs17*(N1[0]*crhs27 + N1[1]*crhs28 + N1[2]*crhs29 + N1[3]*crhs30) + crhs7*(N1[0]*crhs19 + N1[1]*crhs20 + N1[2]*crhs21 + N1[3]*crhs22);
    const double crhs32 =     crhs0*crhs1*Phi[1]; // CRHS0*CRHS1*PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs33 =     crhs0*crhs1*Phi[2]; // CRHS0*CRHS1*PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs34 =     crhs0*crhs1*Phi[3]; // CRHS0*CRHS1*PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))

    rhs[0]=0;
    rhs[1]=0;
    rhs[2]=0;
    rhs[3]=0;
    rhs[4]=0;
    rhs[5]=0;
    rhs[6]=0;
    rhs[7]=0;
    rhs[8]=0;
    rhs[9]=0;
    rhs[10]=0;
    rhs[11]=0;
    rhs[12]=0;
    rhs[13]=0;
    rhs[14]=0;
    rhs[15]=0;
    rhs[16]=0;
    rhs[17]=0;
    rhs[18]=0;
    rhs[19]=0;
    rhs[20]=0;
    rhs[21]=0;
    rhs[22]=0;
    rhs[23]=0;
    rhs[24]=-crhs2*(crhs18*crhs3 + crhs19*crhs31);
    rhs[25]=-crhs2*(crhs18*crhs8 + crhs23*crhs31);
    rhs[26]=-crhs2*(crhs13*crhs18 + crhs27*crhs31);
    rhs[27]=-crhs32*(crhs18*crhs4 + crhs20*crhs31);
    rhs[28]=-crhs32*(crhs18*crhs9 + crhs24*crhs31);
    rhs[29]=-crhs32*(crhs14*crhs18 + crhs28*crhs31);
    rhs[30]=-crhs33*(crhs18*crhs5 + crhs21*crhs31);
    rhs[31]=-crhs33*(crhs10*crhs18 + crhs25*crhs31);
    rhs[32]=-crhs33*(crhs15*crhs18 + crhs29*crhs31);
    rhs[33]=-crhs34*(crhs18*crhs6 + crhs22*crhs31);
    rhs[34]=-crhs34*(crhs11*crhs18 + crhs26*crhs31);
    rhs[35]=-crhs34*(crhs16*crhs18 + crhs30*crhs31);

    
    return rhs;
}

    /***********************************************************************************/
    /***********************************************************************************/
    
    static inline array_1d<double,36> ComputeGaussPointSlipRHS(
        const array_1d<double,4> N1, 
        const array_1d<double,4> N2, 
        const array_1d<double,4> Phi, 
        const double detJ, 
        const double mu, 
        const ContactData<3,4>& rContactData
        )
{
    array_1d<double,36> rhs;
    
    const bounded_matrix<double, 4, 3> normalslave = rContactData.Normal_s;
    const bounded_matrix<double, 4, 3> tan1slave   = rContactData.Tangent_xi_s;
    const bounded_matrix<double, 4, 3> tan2slave   = rContactData.Tangent_eta_s;
//     const bounded_matrix<double, 4, 3> lm          = rContactData.LagrangeMultipliers;
    const double Dt              = rContactData.Dt;
    
//     const double sign_tangpress = boost::math::sign(augmented_tangent_lm);
    
    const bounded_matrix<double, 4, 3> v1 = rContactData.v1;
    const bounded_matrix<double, 4, 3> v2 = rContactData.v2;
    
    const double crhs0 =     1.0/Dt;
    const double crhs1 =     detJ; // DETJ(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs2 =     crhs0*crhs1*Phi[0]; // CRHS0*CRHS1*PHI[0](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs3 =     tan1slave(0,0); // TAN1SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs4 =     tan1slave(1,0); // TAN1SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs5 =     tan1slave(2,0); // TAN1SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs6 =     tan1slave(3,0); // TAN1SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs7 =     N1[0]*(Dt*v1(0,0)) + N1[1]*(Dt*v1(1,0)) + N1[2]*(Dt*v1(2,0)) + N1[3]*(Dt*v1(3,0)) - N2[0]*(Dt*v2(0,0)) - N2[1]*(Dt*v2(1,0)) - N2[2]*(Dt*v2(2,0)) - N2[3]*(Dt*v2(3,0));
    const double crhs8 =     tan1slave(0,1); // TAN1SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs9 =     tan1slave(1,1); // TAN1SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs10 =     tan1slave(2,1); // TAN1SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs11 =     tan1slave(3,1); // TAN1SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs12 =     N1[0]*(Dt*v1(0,1)) + N1[1]*(Dt*v1(1,1)) + N1[2]*(Dt*v1(2,1)) + N1[3]*(Dt*v1(3,1)) - N2[0]*(Dt*v2(0,1)) - N2[1]*(Dt*v2(1,1)) - N2[2]*(Dt*v2(2,1)) - N2[3]*(Dt*v2(3,1));
    const double crhs13 =     tan1slave(0,2); // TAN1SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs14 =     tan1slave(1,2); // TAN1SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs15 =     tan1slave(2,2); // TAN1SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs16 =     tan1slave(3,2); // TAN1SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs17 =     N1[0]*(Dt*v1(0,2)) + N1[1]*(Dt*v1(1,2)) + N1[2]*(Dt*v1(2,2)) + N1[3]*(Dt*v1(3,2)) - N2[0]*(Dt*v2(0,2)) - N2[1]*(Dt*v2(1,2)) - N2[2]*(Dt*v2(2,2)) - N2[3]*(Dt*v2(3,2));
    const double crhs18 =     crhs12*(N1[0]*crhs8 + N1[1]*crhs9 + N1[2]*crhs10 + N1[3]*crhs11) + crhs17*(N1[0]*crhs13 + N1[1]*crhs14 + N1[2]*crhs15 + N1[3]*crhs16) + crhs7*(N1[0]*crhs3 + N1[1]*crhs4 + N1[2]*crhs5 + N1[3]*crhs6);
    const double crhs19 =     tan2slave(0,0); // TAN2SLAVE(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs20 =     tan2slave(1,0); // TAN2SLAVE(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs21 =     tan2slave(2,0); // TAN2SLAVE(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs22 =     tan2slave(3,0); // TAN2SLAVE(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs23 =     tan2slave(0,1); // TAN2SLAVE(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs24 =     tan2slave(1,1); // TAN2SLAVE(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs25 =     tan2slave(2,1); // TAN2SLAVE(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs26 =     tan2slave(3,1); // TAN2SLAVE(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs27 =     tan2slave(0,2); // TAN2SLAVE(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs28 =     tan2slave(1,2); // TAN2SLAVE(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs29 =     tan2slave(2,2); // TAN2SLAVE(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs30 =     tan2slave(3,2); // TAN2SLAVE(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs31 =     crhs12*(N1[0]*crhs23 + N1[1]*crhs24 + N1[2]*crhs25 + N1[3]*crhs26) + crhs17*(N1[0]*crhs27 + N1[1]*crhs28 + N1[2]*crhs29 + N1[3]*crhs30) + crhs7*(N1[0]*crhs19 + N1[1]*crhs20 + N1[2]*crhs21 + N1[3]*crhs22);
    const double crhs32 =     crhs0*crhs1*Phi[1]; // CRHS0*CRHS1*PHI[1](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs33 =     crhs0*crhs1*Phi[2]; // CRHS0*CRHS1*PHI[2](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
    const double crhs34 =     crhs0*crhs1*Phi[3]; // CRHS0*CRHS1*PHI[3](U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))

    rhs[0]=0;
    rhs[1]=0;
    rhs[2]=0;
    rhs[3]=0;
    rhs[4]=0;
    rhs[5]=0;
    rhs[6]=0;
    rhs[7]=0;
    rhs[8]=0;
    rhs[9]=0;
    rhs[10]=0;
    rhs[11]=0;
    rhs[12]=0;
    rhs[13]=0;
    rhs[14]=0;
    rhs[15]=0;
    rhs[16]=0;
    rhs[17]=0;
    rhs[18]=0;
    rhs[19]=0;
    rhs[20]=0;
    rhs[21]=0;
    rhs[22]=0;
    rhs[23]=0;
    rhs[24]=-crhs2*(crhs18*crhs3 + crhs19*crhs31);
    rhs[25]=-crhs2*(crhs18*crhs8 + crhs23*crhs31);
    rhs[26]=-crhs2*(crhs13*crhs18 + crhs27*crhs31);
    rhs[27]=-crhs32*(crhs18*crhs4 + crhs20*crhs31);
    rhs[28]=-crhs32*(crhs18*crhs9 + crhs24*crhs31);
    rhs[29]=-crhs32*(crhs14*crhs18 + crhs28*crhs31);
    rhs[30]=-crhs33*(crhs18*crhs5 + crhs21*crhs31);
    rhs[31]=-crhs33*(crhs10*crhs18 + crhs25*crhs31);
    rhs[32]=-crhs33*(crhs15*crhs18 + crhs29*crhs31);
    rhs[33]=-crhs34*(crhs18*crhs6 + crhs22*crhs31);
    rhs[34]=-crhs34*(crhs11*crhs18 + crhs26*crhs31);
    rhs[35]=-crhs34*(crhs16*crhs18 + crhs30*crhs31);

    
    return rhs;
}
private:
};// class Contact3D4N4N
}
#endif /* KRATOS_CONTACT3D4N4N defined */
