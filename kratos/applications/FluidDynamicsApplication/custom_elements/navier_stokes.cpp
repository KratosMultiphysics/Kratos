//    |  /           |
//    ' /   __| _` | __|  _ \   __|
//    . \  |   (   | |   (   |\__ `
//   _|\_\_|  \__,_|\__|\___/ ____/
//                   Multi-Physics
//
//  License:		 BSD License
//					 Kratos default license: kratos/license.txt
//
//  Main authors:    Ruben Zorrilla
//

#include "custom_elements/navier_stokes.h"

namespace Kratos {

template<>
void NavierStokes<3>::EquationIdVector(EquationIdVectorType& rResult, ProcessInfo& rCurrentProcessInfo)
{
    KRATOS_TRY

    unsigned int Dim = 3;
    unsigned int NumNodes = 4;
    unsigned int DofSize  = NumNodes*(Dim+1);

    if (rResult.size() != DofSize)
        rResult.resize(DofSize, false);

    for(unsigned int i=0; i<NumNodes; i++)
    {
        rResult[i*(Dim+1)  ]  =  this->GetGeometry()[i].GetDof(VELOCITY_X).EquationId();
        rResult[i*(Dim+1)+1]  =  this->GetGeometry()[i].GetDof(VELOCITY_Y).EquationId();
        rResult[i*(Dim+1)+2]  =  this->GetGeometry()[i].GetDof(VELOCITY_Z).EquationId();
        rResult[i*(Dim+1)+3]  =  this->GetGeometry()[i].GetDof(PRESSURE).EquationId();
    }

    KRATOS_CATCH("")
}


template<>
void NavierStokes<2>::EquationIdVector(EquationIdVectorType& rResult, ProcessInfo& rCurrentProcessInfo)
{
    KRATOS_TRY

    unsigned int Dim = 2;
    unsigned int NumNodes = 3;
    unsigned int DofSize  = NumNodes*(Dim+1);

    if (rResult.size() != DofSize)
        rResult.resize(DofSize, false);

    for(unsigned int i=0; i<NumNodes; i++)
    {
        rResult[i*(Dim+1)  ]  =  this->GetGeometry()[i].GetDof(VELOCITY_X).EquationId();
        rResult[i*(Dim+1)+1]  =  this->GetGeometry()[i].GetDof(VELOCITY_Y).EquationId();
        rResult[i*(Dim+1)+2]  =  this->GetGeometry()[i].GetDof(PRESSURE).EquationId();
    }

    KRATOS_CATCH("")
}


template<>
void NavierStokes<3>::GetDofList(DofsVectorType& ElementalDofList, ProcessInfo& rCurrentProcessInfo)
{
    KRATOS_TRY

    unsigned int Dim = 3;
    unsigned int NumNodes = 4;
    unsigned int DofSize  = NumNodes*(Dim+1);

    if (ElementalDofList.size() != DofSize)
        ElementalDofList.resize(DofSize);

    for(unsigned int i=0; i<NumNodes; i++)
    {
        ElementalDofList[i*(Dim+1)  ]  =  this->GetGeometry()[i].pGetDof(VELOCITY_X);
        ElementalDofList[i*(Dim+1)+1]  =  this->GetGeometry()[i].pGetDof(VELOCITY_Y);
        ElementalDofList[i*(Dim+1)+2]  =  this->GetGeometry()[i].pGetDof(VELOCITY_Z);
        ElementalDofList[i*(Dim+1)+3]  =  this->GetGeometry()[i].pGetDof(PRESSURE);
    }

    KRATOS_CATCH("");
}


template<>
void NavierStokes<2>::GetDofList(DofsVectorType& ElementalDofList, ProcessInfo& rCurrentProcessInfo)
{
    KRATOS_TRY

    unsigned int Dim = 2;
    unsigned int NumNodes = 3;
    unsigned int DofSize  = NumNodes*(Dim+1);

    if (ElementalDofList.size() != DofSize)
        ElementalDofList.resize(DofSize);

    for(unsigned int i=0; i<NumNodes; i++)
    {
        ElementalDofList[i*(Dim+1)  ]  =  this->GetGeometry()[i].pGetDof(VELOCITY_X);
        ElementalDofList[i*(Dim+1)+1]  =  this->GetGeometry()[i].pGetDof(VELOCITY_Y);
        ElementalDofList[i*(Dim+1)+2]  =  this->GetGeometry()[i].pGetDof(PRESSURE);
    }

    KRATOS_CATCH("");
}


template<>
void NavierStokes<3>::ComputeGaussPointLHSContribution(bounded_matrix<double,16,16>& lhs, const ElementDataStruct& data)
{
    const int nnodes = 4;
    const int dim = 3;
    //~ const int strain_size = 6;

    const double rho = inner_prod(data.N, data.rho);        // Density
    const double mu = inner_prod(data.N, data.mu);          // Dynamic viscosity
    const double h = data.h;                                // Characteristic element size
    const double c = data.c;                                // Wave velocity

    const double& bdf0 = data.bdf0;
    const double& bdf1 = data.bdf1;
    const double& bdf2 = data.bdf2;
    const double& delta_t = data.delta_t;
    const double& dyn_tau_coeff = data.dyn_tau_coeff;

    const bounded_matrix<double,nnodes,dim>& v = data.v;
    const bounded_matrix<double,nnodes,dim>& vn = data.vn;
    const bounded_matrix<double,nnodes,dim>& vnn = data.vnn;
    const bounded_matrix<double,nnodes,dim>& vmesh = data.vmesh;
    const bounded_matrix<double,nnodes,dim>& vconv = v - vmesh;
    const bounded_matrix<double,nnodes,dim>& f = data.f;
    const array_1d<double,nnodes>& p = data.p;
    const array_1d<double,nnodes>& pn = data.pn;
    const array_1d<double,nnodes>& pnn = data.pnn;
    //~ const array_1d<double,strain_size>& stress = data.stress;

    // Get constitutive matrix
    const Matrix& C = data.C;

    // Get shape function values
    const array_1d<double,nnodes>& N = data.N;
    const bounded_matrix<double,nnodes,dim>& DN = data.DN_DX;

    const array_1d<double,dim> vconv_gauss = prod(trans(vconv), N);

    const double vconv_norm = norm_2(vconv_gauss);

    // Stabilization parameters
    const double c1 = 4.0;
    const double c2 = 2.0;
    const double tau1 = 1.0/((rho*dyn_tau_coeff)/delta_t + (c2*rho*vconv_norm)/h + (c1*mu)/(h*h));
    const double tau2 = (h*h)/(c1*tau1);

    const double clhs0 =             pow(DN(0,0), 2);
        const double clhs1 =             C(0,0)*DN(0,0) + C(0,3)*DN(0,1) + C(0,5)*DN(0,2);
        const double clhs2 =             C(0,3)*DN(0,0);
        const double clhs3 =             C(3,3)*DN(0,1) + C(3,5)*DN(0,2) + clhs2;
        const double clhs4 =             C(0,5)*DN(0,0);
        const double clhs5 =             C(3,5)*DN(0,1) + C(5,5)*DN(0,2) + clhs4;
        const double clhs6 =             pow(rho, 2);
        const double clhs7 =             DN(0,1)*N[0]*clhs6*tau1;
        const double clhs8 =             DN(0,0)*v(0,1) + DN(1,0)*v(1,1) + DN(2,0)*v(2,1) + DN(3,0)*v(3,1);
        const double clhs9 =             N[0]*v(0,0) + N[1]*v(1,0) + N[2]*v(2,0) + N[3]*v(3,0);
        const double clhs10 =             -N[0]*vmesh(0,0) - N[1]*vmesh(1,0) - N[2]*vmesh(2,0) - N[3]*vmesh(3,0) + clhs9;
        const double clhs11 =             clhs10*clhs8;
        const double clhs12 =             DN(0,2)*N[0]*clhs6*tau1;
        const double clhs13 =             DN(0,0)*v(0,2) + DN(1,0)*v(1,2) + DN(2,0)*v(2,2) + DN(3,0)*v(3,2);
        const double clhs14 =             clhs10*clhs13;
        const double clhs15 =             N[0]*rho;
        const double clhs16 =             DN(0,0)*v(0,0) + DN(1,0)*v(1,0) + DN(2,0)*v(2,0) + DN(3,0)*v(3,0);
        const double clhs17 =             N[0]*v(0,1) + N[1]*v(1,1) + N[2]*v(2,1) + N[3]*v(3,1);
        const double clhs18 =             -N[0]*vmesh(0,1) - N[1]*vmesh(1,1) - N[2]*vmesh(2,1) - N[3]*vmesh(3,1) + clhs17;
        const double clhs19 =             N[0]*v(0,2) + N[1]*v(1,2) + N[2]*v(2,2) + N[3]*v(3,2);
        const double clhs20 =             -N[0]*vmesh(0,2) - N[1]*vmesh(1,2) - N[2]*vmesh(2,2) - N[3]*vmesh(3,2) + clhs19;
        const double clhs21 =             DN(0,0)*clhs10 + DN(0,1)*clhs18 + DN(0,2)*clhs20;
        const double clhs22 =             N[0]*clhs16 + clhs21;
        const double clhs23 =             pow(c, -2);
        const double clhs24 =             N[0]*(bdf0*p[0] + bdf1*pn[0] + bdf2*pnn[0]) + N[1]*(bdf0*p[1] + bdf1*pn[1] + bdf2*pnn[1]) + N[2]*(bdf0*p[2] + bdf1*pn[2] + bdf2*pnn[2]) + N[3]*(bdf0*p[3] + bdf1*pn[3] + bdf2*pnn[3]);
        const double clhs25 =             clhs23*clhs24;
        const double clhs26 =             N[0]*clhs25;
        const double clhs27 =             N[0]*bdf0;
        const double clhs28 =             clhs26 + rho*(clhs22 + clhs27);
        const double clhs29 =             DN(0,0)*clhs28*rho*tau1;
        const double clhs30 =             N[0]*clhs23*clhs24*tau1;
        const double clhs31 =             pow(N[0], 2);
        const double clhs32 =             bdf0*rho;
        const double clhs33 =             DN(0,0)*N[0]*rho*tau1;
        const double clhs34 =             DN(0,1)*v(0,0) + DN(1,1)*v(1,0) + DN(2,1)*v(2,0) + DN(3,1)*v(3,0);
        const double clhs35 =             clhs18*clhs34;
        const double clhs36 =             DN(0,2)*v(0,0) + DN(1,2)*v(1,0) + DN(2,2)*v(2,0) + DN(3,2)*v(3,0);
        const double clhs37 =             clhs20*clhs36;
        const double clhs38 =             DN(0,0)*p[0] + DN(1,0)*p[1] + DN(2,0)*p[2] + DN(3,0)*p[3] + clhs25*clhs9 - rho*(N[0]*f(0,0) + N[1]*f(1,0) + N[2]*f(2,0) + N[3]*f(3,0)) + rho*(N[0]*(bdf0*v(0,0) + bdf1*vn(0,0) + bdf2*vnn(0,0)) + N[1]*(bdf0*v(1,0) + bdf1*vn(1,0) + bdf2*vnn(1,0)) + N[2]*(bdf0*v(2,0) + bdf1*vn(2,0) + bdf2*vnn(2,0)) + N[3]*(bdf0*v(3,0) + bdf1*vn(3,0) + bdf2*vnn(3,0)) + clhs10*clhs16 + clhs35 + clhs37);
        const double clhs39 =             DN(0,1)*N[0]*rho*tau1;
        const double clhs40 =             DN(0,1)*v(0,1) + DN(1,1)*v(1,1) + DN(2,1)*v(2,1) + DN(3,1)*v(3,1);
        const double clhs41 =             DN(0,2)*v(0,1) + DN(1,2)*v(1,1) + DN(2,2)*v(2,1) + DN(3,2)*v(3,1);
        const double clhs42 =             clhs20*clhs41;
        const double clhs43 =             DN(0,1)*p[0] + DN(1,1)*p[1] + DN(2,1)*p[2] + DN(3,1)*p[3] + clhs17*clhs25 - rho*(N[0]*f(0,1) + N[1]*f(1,1) + N[2]*f(2,1) + N[3]*f(3,1)) + rho*(N[0]*(bdf0*v(0,1) + bdf1*vn(0,1) + bdf2*vnn(0,1)) + N[1]*(bdf0*v(1,1) + bdf1*vn(1,1) + bdf2*vnn(1,1)) + N[2]*(bdf0*v(2,1) + bdf1*vn(2,1) + bdf2*vnn(2,1)) + N[3]*(bdf0*v(3,1) + bdf1*vn(3,1) + bdf2*vnn(3,1)) + clhs11 + clhs18*clhs40 + clhs42);
        const double clhs44 =             DN(0,2)*N[0]*rho*tau1;
        const double clhs45 =             DN(0,1)*v(0,2) + DN(1,1)*v(1,2) + DN(2,1)*v(2,2) + DN(3,1)*v(3,2);
        const double clhs46 =             clhs18*clhs45;
        const double clhs47 =             DN(0,2)*v(0,2) + DN(1,2)*v(1,2) + DN(2,2)*v(2,2) + DN(3,2)*v(3,2);
        const double clhs48 =             DN(0,2)*p[0] + DN(1,2)*p[1] + DN(2,2)*p[2] + DN(3,2)*p[3] + clhs19*clhs25 - rho*(N[0]*f(0,2) + N[1]*f(1,2) + N[2]*f(2,2) + N[3]*f(3,2)) + rho*(N[0]*(bdf0*v(0,2) + bdf1*vn(0,2) + bdf2*vnn(0,2)) + N[1]*(bdf0*v(1,2) + bdf1*vn(1,2) + bdf2*vnn(1,2)) + N[2]*(bdf0*v(2,2) + bdf1*vn(2,2) + bdf2*vnn(2,2)) + N[3]*(bdf0*v(3,2) + bdf1*vn(3,2) + bdf2*vnn(3,2)) + clhs14 + clhs20*clhs47 + clhs46);
        const double clhs49 =             clhs25*clhs31 + clhs31*clhs32 + clhs33*clhs38 + clhs39*clhs43 + clhs44*clhs48;
        const double clhs50 =             DN(0,0)*DN(0,1);
        const double clhs51 =             clhs50*rho + clhs50*tau2;
        const double clhs52 =             C(0,1)*DN(0,1) + C(0,4)*DN(0,2) + clhs2;
        const double clhs53 =             C(1,3)*DN(0,1);
        const double clhs54 =             C(3,3)*DN(0,0) + C(3,4)*DN(0,2) + clhs53;
        const double clhs55 =             C(3,5)*DN(0,0);
        const double clhs56 =             C(4,5)*DN(0,2);
        const double clhs57 =             C(1,5)*DN(0,1) + clhs55 + clhs56;
        const double clhs58 =             clhs31*rho;
        const double clhs59 =             clhs34*clhs58;
        const double clhs60 =             DN(0,0)*N[0]*clhs34*clhs6*tau1;
        const double clhs61 =             DN(0,2)*N[0]*clhs45*clhs6*tau1;
        const double clhs62 =             clhs23*clhs24*tau1;
        const double clhs63 =             N[0]*clhs40 + clhs21;
        const double clhs64 =             clhs26 + rho*(clhs27 + clhs63);
        const double clhs65 =             DN(0,1)*clhs64*rho*tau1;
        const double clhs66 =             DN(0,0)*DN(0,2);
        const double clhs67 =             clhs66*rho + clhs66*tau2;
        const double clhs68 =             C(0,2)*DN(0,2) + C(0,4)*DN(0,1) + clhs4;
        const double clhs69 =             C(3,4)*DN(0,1);
        const double clhs70 =             C(2,3)*DN(0,2) + clhs55 + clhs69;
        const double clhs71 =             C(2,5)*DN(0,2);
        const double clhs72 =             C(4,5)*DN(0,1) + C(5,5)*DN(0,0) + clhs71;
        const double clhs73 =             clhs36*clhs58;
        const double clhs74 =             DN(0,0)*N[0]*clhs36*clhs6*tau1;
        const double clhs75 =             DN(0,1)*N[0]*clhs41*clhs6*tau1;
        const double clhs76 =             N[0]*clhs47 + clhs21;
        const double clhs77 =             clhs26 + rho*(clhs27 + clhs76);
        const double clhs78 =             DN(0,2)*clhs77*rho*tau1;
        const double clhs79 =             DN(0,0)*N[0];
        const double clhs80 =             1.0/rho;
        const double clhs81 =             bdf0*clhs23*clhs80*tau2;
        const double clhs82 =             bdf0*clhs23*clhs31;
        const double clhs83 =             N[0]*bdf0*clhs23;
        const double clhs84 =             clhs83*clhs9;
        const double clhs85 =             DN(0,0) + clhs84;
        const double clhs86 =             DN(0,0)*clhs85*rho*tau1;
        const double clhs87 =             clhs17*clhs83;
        const double clhs88 =             DN(0,1) + clhs87;
        const double clhs89 =             DN(0,1)*clhs88*rho*tau1;
        const double clhs90 =             clhs19*clhs83;
        const double clhs91 =             DN(0,2) + clhs90;
        const double clhs92 =             DN(0,2)*clhs91*rho*tau1;
        const double clhs93 =             bdf0*clhs23*clhs31*tau1;
        const double clhs94 =             DN(0,0)*DN(1,0);
        const double clhs95 =             clhs94*rho;
        const double clhs96 =             clhs94*tau2;
        const double clhs97 =             N[0]*bdf0*rho;
        const double clhs98 =             N[1]*clhs97;
        const double clhs99 =             C(0,0)*DN(1,0) + C(0,3)*DN(1,1) + C(0,5)*DN(1,2);
        const double clhs100 =             C(0,3)*DN(1,0);
        const double clhs101 =             C(3,3)*DN(1,1) + C(3,5)*DN(1,2) + clhs100;
        const double clhs102 =             C(0,5)*DN(1,0);
        const double clhs103 =             C(3,5)*DN(1,1) + C(5,5)*DN(1,2) + clhs102;
        const double clhs104 =             DN(0,1)*N[1]*clhs6*tau1;
        const double clhs105 =             DN(0,2)*N[1]*clhs6*tau1;
        const double clhs106 =             N[1]*clhs26;
        const double clhs107 =             DN(1,0)*clhs10 + DN(1,1)*clhs18 + DN(1,2)*clhs20;
        const double clhs108 =             N[1]*clhs16 + clhs107;
        const double clhs109 =             N[1]*clhs25;
        const double clhs110 =             N[1]*bdf0;
        const double clhs111 =             clhs109 + rho*(clhs108 + clhs110);
        const double clhs112 =             DN(0,0)*clhs111*rho*tau1;
        const double clhs113 =             DN(0,0)*N[1]*rho*tau1;
        const double clhs114 =             clhs113*clhs38;
        const double clhs115 =             DN(0,1)*N[1]*rho*tau1;
        const double clhs116 =             clhs115*clhs43;
        const double clhs117 =             DN(0,2)*N[1]*rho*tau1;
        const double clhs118 =             clhs117*clhs48;
        const double clhs119 =             N[0]*N[1]*rho;
        const double clhs120 =             clhs119*clhs34;
        const double clhs121 =             -clhs120*clhs62;
        const double clhs122 =             DN(0,0)*DN(1,1);
        const double clhs123 =             clhs122*rho;
        const double clhs124 =             clhs122*tau2;
        const double clhs125 =             C(0,1)*DN(1,1) + C(0,4)*DN(1,2) + clhs100;
        const double clhs126 =             C(1,3)*DN(1,1);
        const double clhs127 =             C(3,3)*DN(1,0) + C(3,4)*DN(1,2) + clhs126;
        const double clhs128 =             C(3,5)*DN(1,0);
        const double clhs129 =             C(4,5)*DN(1,2);
        const double clhs130 =             C(1,5)*DN(1,1) + clhs128 + clhs129;
        const double clhs131 =             DN(0,0)*N[1]*clhs34*clhs6*tau1;
        const double clhs132 =             DN(0,2)*N[1]*clhs45*clhs6*tau1;
        const double clhs133 =             N[1]*clhs40 + clhs107;
        const double clhs134 =             clhs109 + rho*(clhs110 + clhs133);
        const double clhs135 =             DN(0,1)*clhs134*rho*tau1;
        const double clhs136 =             clhs119*clhs36;
        const double clhs137 =             -clhs136*clhs62;
        const double clhs138 =             DN(0,0)*DN(1,2);
        const double clhs139 =             clhs138*rho;
        const double clhs140 =             clhs138*tau2;
        const double clhs141 =             C(0,2)*DN(1,2) + C(0,4)*DN(1,1) + clhs102;
        const double clhs142 =             C(3,4)*DN(1,1);
        const double clhs143 =             C(2,3)*DN(1,2) + clhs128 + clhs142;
        const double clhs144 =             C(2,5)*DN(1,2);
        const double clhs145 =             C(4,5)*DN(1,1) + C(5,5)*DN(1,0) + clhs144;
        const double clhs146 =             DN(0,0)*N[1]*clhs36*clhs6*tau1;
        const double clhs147 =             DN(0,1)*N[1]*clhs41*clhs6*tau1;
        const double clhs148 =             N[1]*clhs47 + clhs107;
        const double clhs149 =             clhs109 + rho*(clhs110 + clhs148);
        const double clhs150 =             DN(0,2)*clhs149*rho*tau1;
        const double clhs151 =             DN(0,0)*N[1];
        const double clhs152 =             N[1]*bdf0*clhs23;
        const double clhs153 =             clhs152*clhs9;
        const double clhs154 =             DN(1,0) + clhs153;
        const double clhs155 =             DN(0,0)*clhs154*rho*tau1;
        const double clhs156 =             clhs152*clhs17;
        const double clhs157 =             DN(1,1) + clhs156;
        const double clhs158 =             DN(0,1)*clhs157*rho*tau1;
        const double clhs159 =             clhs152*clhs19;
        const double clhs160 =             DN(1,2) + clhs159;
        const double clhs161 =             DN(0,2)*clhs160*rho*tau1;
        const double clhs162 =             N[0]*N[1]*bdf0*clhs23*tau1;
        const double clhs163 =             N[1]*clhs84 - clhs162*clhs38;
        const double clhs164 =             DN(0,0)*DN(2,0);
        const double clhs165 =             clhs164*rho;
        const double clhs166 =             clhs164*tau2;
        const double clhs167 =             N[2]*clhs97;
        const double clhs168 =             C(0,0)*DN(2,0) + C(0,3)*DN(2,1) + C(0,5)*DN(2,2);
        const double clhs169 =             C(0,3)*DN(2,0);
        const double clhs170 =             C(3,3)*DN(2,1) + C(3,5)*DN(2,2) + clhs169;
        const double clhs171 =             C(0,5)*DN(2,0);
        const double clhs172 =             C(3,5)*DN(2,1) + C(5,5)*DN(2,2) + clhs171;
        const double clhs173 =             DN(0,1)*N[2]*clhs6*tau1;
        const double clhs174 =             DN(0,2)*N[2]*clhs6*tau1;
        const double clhs175 =             N[2]*clhs26;
        const double clhs176 =             DN(2,0)*clhs10 + DN(2,1)*clhs18 + DN(2,2)*clhs20;
        const double clhs177 =             N[2]*clhs16 + clhs176;
        const double clhs178 =             N[2]*clhs25;
        const double clhs179 =             N[2]*bdf0;
        const double clhs180 =             clhs178 + rho*(clhs177 + clhs179);
        const double clhs181 =             DN(0,0)*clhs180*rho*tau1;
        const double clhs182 =             DN(0,0)*N[2]*rho*tau1;
        const double clhs183 =             clhs182*clhs38;
        const double clhs184 =             DN(0,1)*N[2]*rho*tau1;
        const double clhs185 =             clhs184*clhs43;
        const double clhs186 =             DN(0,2)*N[2]*rho*tau1;
        const double clhs187 =             clhs186*clhs48;
        const double clhs188 =             N[0]*N[2]*rho;
        const double clhs189 =             clhs188*clhs34;
        const double clhs190 =             -clhs189*clhs62;
        const double clhs191 =             DN(0,0)*DN(2,1);
        const double clhs192 =             clhs191*rho;
        const double clhs193 =             clhs191*tau2;
        const double clhs194 =             C(0,1)*DN(2,1) + C(0,4)*DN(2,2) + clhs169;
        const double clhs195 =             C(1,3)*DN(2,1);
        const double clhs196 =             C(3,3)*DN(2,0) + C(3,4)*DN(2,2) + clhs195;
        const double clhs197 =             C(3,5)*DN(2,0);
        const double clhs198 =             C(4,5)*DN(2,2);
        const double clhs199 =             C(1,5)*DN(2,1) + clhs197 + clhs198;
        const double clhs200 =             DN(0,0)*N[2]*clhs34*clhs6*tau1;
        const double clhs201 =             DN(0,2)*N[2]*clhs45*clhs6*tau1;
        const double clhs202 =             N[2]*clhs40 + clhs176;
        const double clhs203 =             clhs178 + rho*(clhs179 + clhs202);
        const double clhs204 =             DN(0,1)*clhs203*rho*tau1;
        const double clhs205 =             clhs188*clhs36;
        const double clhs206 =             -clhs205*clhs62;
        const double clhs207 =             DN(0,0)*DN(2,2);
        const double clhs208 =             clhs207*rho;
        const double clhs209 =             clhs207*tau2;
        const double clhs210 =             C(0,2)*DN(2,2) + C(0,4)*DN(2,1) + clhs171;
        const double clhs211 =             C(3,4)*DN(2,1);
        const double clhs212 =             C(2,3)*DN(2,2) + clhs197 + clhs211;
        const double clhs213 =             C(2,5)*DN(2,2);
        const double clhs214 =             C(4,5)*DN(2,1) + C(5,5)*DN(2,0) + clhs213;
        const double clhs215 =             DN(0,0)*N[2]*clhs36*clhs6*tau1;
        const double clhs216 =             DN(0,1)*N[2]*clhs41*clhs6*tau1;
        const double clhs217 =             N[2]*clhs47 + clhs176;
        const double clhs218 =             clhs178 + rho*(clhs179 + clhs217);
        const double clhs219 =             DN(0,2)*clhs218*rho*tau1;
        const double clhs220 =             DN(0,0)*N[2];
        const double clhs221 =             N[2]*bdf0*clhs23;
        const double clhs222 =             DN(2,0) + clhs221*clhs9;
        const double clhs223 =             DN(0,0)*clhs222*rho*tau1;
        const double clhs224 =             DN(2,1) + clhs17*clhs221;
        const double clhs225 =             DN(0,1)*clhs224*rho*tau1;
        const double clhs226 =             DN(2,2) + clhs19*clhs221;
        const double clhs227 =             DN(0,2)*clhs226*rho*tau1;
        const double clhs228 =             N[0]*N[2]*bdf0*clhs23*tau1;
        const double clhs229 =             N[2]*clhs84 - clhs228*clhs38;
        const double clhs230 =             DN(0,0)*DN(3,0);
        const double clhs231 =             clhs230*rho;
        const double clhs232 =             clhs230*tau2;
        const double clhs233 =             N[3]*clhs97;
        const double clhs234 =             C(0,0)*DN(3,0) + C(0,3)*DN(3,1) + C(0,5)*DN(3,2);
        const double clhs235 =             C(0,3)*DN(3,0);
        const double clhs236 =             C(3,3)*DN(3,1) + C(3,5)*DN(3,2) + clhs235;
        const double clhs237 =             C(0,5)*DN(3,0);
        const double clhs238 =             C(3,5)*DN(3,1) + C(5,5)*DN(3,2) + clhs237;
        const double clhs239 =             DN(0,1)*N[3]*clhs6*tau1;
        const double clhs240 =             DN(0,2)*N[3]*clhs6*tau1;
        const double clhs241 =             N[3]*clhs26;
        const double clhs242 =             DN(3,0)*clhs10 + DN(3,1)*clhs18 + DN(3,2)*clhs20;
        const double clhs243 =             N[3]*clhs16 + clhs242;
        const double clhs244 =             N[3]*clhs25;
        const double clhs245 =             N[3]*bdf0;
        const double clhs246 =             clhs244 + rho*(clhs243 + clhs245);
        const double clhs247 =             DN(0,0)*clhs246*rho*tau1;
        const double clhs248 =             DN(0,0)*N[3]*rho*tau1;
        const double clhs249 =             clhs248*clhs38;
        const double clhs250 =             DN(0,1)*N[3]*rho*tau1;
        const double clhs251 =             clhs250*clhs43;
        const double clhs252 =             DN(0,2)*N[3]*rho*tau1;
        const double clhs253 =             clhs252*clhs48;
        const double clhs254 =             N[0]*N[3]*rho;
        const double clhs255 =             clhs254*clhs34;
        const double clhs256 =             -clhs255*clhs62;
        const double clhs257 =             DN(0,0)*DN(3,1);
        const double clhs258 =             clhs257*rho;
        const double clhs259 =             clhs257*tau2;
        const double clhs260 =             C(0,1)*DN(3,1) + C(0,4)*DN(3,2) + clhs235;
        const double clhs261 =             C(1,3)*DN(3,1);
        const double clhs262 =             C(3,3)*DN(3,0) + C(3,4)*DN(3,2) + clhs261;
        const double clhs263 =             C(3,5)*DN(3,0);
        const double clhs264 =             C(4,5)*DN(3,2);
        const double clhs265 =             C(1,5)*DN(3,1) + clhs263 + clhs264;
        const double clhs266 =             DN(0,0)*N[3]*clhs34*clhs6*tau1;
        const double clhs267 =             DN(0,2)*N[3]*clhs45*clhs6*tau1;
        const double clhs268 =             N[3]*clhs40 + clhs242;
        const double clhs269 =             clhs244 + rho*(clhs245 + clhs268);
        const double clhs270 =             DN(0,1)*clhs269*rho*tau1;
        const double clhs271 =             clhs254*clhs36;
        const double clhs272 =             -clhs271*clhs62;
        const double clhs273 =             DN(0,0)*DN(3,2);
        const double clhs274 =             clhs273*rho;
        const double clhs275 =             clhs273*tau2;
        const double clhs276 =             C(0,2)*DN(3,2) + C(0,4)*DN(3,1) + clhs237;
        const double clhs277 =             C(3,4)*DN(3,1);
        const double clhs278 =             C(2,3)*DN(3,2) + clhs263 + clhs277;
        const double clhs279 =             C(2,5)*DN(3,2);
        const double clhs280 =             C(4,5)*DN(3,1) + C(5,5)*DN(3,0) + clhs279;
        const double clhs281 =             DN(0,0)*N[3]*clhs36*clhs6*tau1;
        const double clhs282 =             DN(0,1)*N[3]*clhs41*clhs6*tau1;
        const double clhs283 =             N[3]*clhs47 + clhs242;
        const double clhs284 =             clhs244 + rho*(clhs245 + clhs283);
        const double clhs285 =             DN(0,2)*clhs284*rho*tau1;
        const double clhs286 =             DN(0,0)*N[3];
        const double clhs287 =             N[3]*bdf0*clhs23;
        const double clhs288 =             DN(3,0) + clhs287*clhs9;
        const double clhs289 =             DN(0,0)*clhs288*rho*tau1;
        const double clhs290 =             DN(3,1) + clhs17*clhs287;
        const double clhs291 =             DN(0,1)*clhs290*rho*tau1;
        const double clhs292 =             DN(3,2) + clhs19*clhs287;
        const double clhs293 =             DN(0,2)*clhs292*rho*tau1;
        const double clhs294 =             N[0]*N[3]*bdf0*clhs23*tau1;
        const double clhs295 =             N[3]*clhs84 - clhs294*clhs38;
        const double clhs296 =             C(0,1)*DN(0,0) + C(1,5)*DN(0,2) + clhs53;
        const double clhs297 =             C(0,4)*DN(0,0) + clhs56 + clhs69;
        const double clhs298 =             clhs58*clhs8;
        const double clhs299 =             DN(0,1)*N[0]*clhs6*clhs8*tau1;
        const double clhs300 =             DN(0,2)*N[0]*clhs13*clhs6*tau1;
        const double clhs301 =             pow(DN(0,1), 2);
        const double clhs302 =             C(1,1)*DN(0,1) + C(1,3)*DN(0,0) + C(1,4)*DN(0,2);
        const double clhs303 =             C(1,4)*DN(0,1);
        const double clhs304 =             C(3,4)*DN(0,0) + C(4,4)*DN(0,2) + clhs303;
        const double clhs305 =             DN(0,0)*N[0]*clhs6*tau1;
        const double clhs306 =             DN(0,1)*DN(0,2);
        const double clhs307 =             clhs306*rho + clhs306*tau2;
        const double clhs308 =             C(1,2)*DN(0,2) + C(1,5)*DN(0,0) + clhs303;
        const double clhs309 =             C(2,4)*DN(0,2);
        const double clhs310 =             C(4,4)*DN(0,1) + C(4,5)*DN(0,0) + clhs309;
        const double clhs311 =             clhs41*clhs58;
        const double clhs312 =             DN(0,1)*N[0];
        const double clhs313 =             DN(0,1)*DN(1,0);
        const double clhs314 =             clhs313*rho + clhs313*tau2;
        const double clhs315 =             C(0,1)*DN(1,0) + C(1,5)*DN(1,2) + clhs126;
        const double clhs316 =             C(0,4)*DN(1,0) + clhs129 + clhs142;
        const double clhs317 =             clhs119*clhs8;
        const double clhs318 =             DN(0,1)*N[1]*clhs6*clhs8*tau1;
        const double clhs319 =             DN(0,2)*N[1]*clhs13*clhs6*tau1;
        const double clhs320 =             -clhs317*clhs62;
        const double clhs321 =             DN(0,1)*DN(1,1);
        const double clhs322 =             clhs321*rho;
        const double clhs323 =             clhs321*tau2;
        const double clhs324 =             C(1,1)*DN(1,1) + C(1,3)*DN(1,0) + C(1,4)*DN(1,2);
        const double clhs325 =             C(1,4)*DN(1,1);
        const double clhs326 =             C(3,4)*DN(1,0) + C(4,4)*DN(1,2) + clhs325;
        const double clhs327 =             DN(0,0)*N[1]*clhs6*tau1;
        const double clhs328 =             clhs106 + clhs114 + clhs116 + clhs118 + clhs98;
        const double clhs329 =             clhs119*clhs41;
        const double clhs330 =             -clhs329*clhs62 + clhs329;
        const double clhs331 =             DN(0,1)*DN(1,2);
        const double clhs332 =             clhs331*rho;
        const double clhs333 =             clhs331*tau2;
        const double clhs334 =             C(1,2)*DN(1,2) + C(1,5)*DN(1,0) + clhs325;
        const double clhs335 =             C(2,4)*DN(1,2);
        const double clhs336 =             C(4,4)*DN(1,1) + C(4,5)*DN(1,0) + clhs335;
        const double clhs337 =             DN(0,1)*N[1];
        const double clhs338 =             N[1]*clhs87 - clhs162*clhs43;
        const double clhs339 =             DN(0,1)*DN(2,0);
        const double clhs340 =             clhs339*rho + clhs339*tau2;
        const double clhs341 =             C(0,1)*DN(2,0) + C(1,5)*DN(2,2) + clhs195;
        const double clhs342 =             C(0,4)*DN(2,0) + clhs198 + clhs211;
        const double clhs343 =             clhs188*clhs8;
        const double clhs344 =             DN(0,1)*N[2]*clhs6*clhs8*tau1;
        const double clhs345 =             DN(0,2)*N[2]*clhs13*clhs6*tau1;
        const double clhs346 =             -clhs343*clhs62;
        const double clhs347 =             DN(0,1)*DN(2,1);
        const double clhs348 =             clhs347*rho;
        const double clhs349 =             clhs347*tau2;
        const double clhs350 =             C(1,1)*DN(2,1) + C(1,3)*DN(2,0) + C(1,4)*DN(2,2);
        const double clhs351 =             C(1,4)*DN(2,1);
        const double clhs352 =             C(3,4)*DN(2,0) + C(4,4)*DN(2,2) + clhs351;
        const double clhs353 =             DN(0,0)*N[2]*clhs6*tau1;
        const double clhs354 =             clhs167 + clhs175 + clhs183 + clhs185 + clhs187;
        const double clhs355 =             clhs188*clhs41;
        const double clhs356 =             -clhs355*clhs62 + clhs355;
        const double clhs357 =             DN(0,1)*DN(2,2);
        const double clhs358 =             clhs357*rho;
        const double clhs359 =             clhs357*tau2;
        const double clhs360 =             C(1,2)*DN(2,2) + C(1,5)*DN(2,0) + clhs351;
        const double clhs361 =             C(2,4)*DN(2,2);
        const double clhs362 =             C(4,4)*DN(2,1) + C(4,5)*DN(2,0) + clhs361;
        const double clhs363 =             DN(0,1)*N[2];
        const double clhs364 =             N[2]*clhs87 - clhs228*clhs43;
        const double clhs365 =             DN(0,1)*DN(3,0);
        const double clhs366 =             clhs365*rho + clhs365*tau2;
        const double clhs367 =             C(0,1)*DN(3,0) + C(1,5)*DN(3,2) + clhs261;
        const double clhs368 =             C(0,4)*DN(3,0) + clhs264 + clhs277;
        const double clhs369 =             clhs254*clhs8;
        const double clhs370 =             DN(0,1)*N[3]*clhs6*clhs8*tau1;
        const double clhs371 =             DN(0,2)*N[3]*clhs13*clhs6*tau1;
        const double clhs372 =             -clhs369*clhs62;
        const double clhs373 =             DN(0,1)*DN(3,1);
        const double clhs374 =             clhs373*rho;
        const double clhs375 =             clhs373*tau2;
        const double clhs376 =             C(1,1)*DN(3,1) + C(1,3)*DN(3,0) + C(1,4)*DN(3,2);
        const double clhs377 =             C(1,4)*DN(3,1);
        const double clhs378 =             C(3,4)*DN(3,0) + C(4,4)*DN(3,2) + clhs377;
        const double clhs379 =             DN(0,0)*N[3]*clhs6*tau1;
        const double clhs380 =             clhs233 + clhs241 + clhs249 + clhs251 + clhs253;
        const double clhs381 =             clhs254*clhs41;
        const double clhs382 =             -clhs381*clhs62 + clhs381;
        const double clhs383 =             DN(0,1)*DN(3,2);
        const double clhs384 =             clhs383*rho;
        const double clhs385 =             clhs383*tau2;
        const double clhs386 =             C(1,2)*DN(3,2) + C(1,5)*DN(3,0) + clhs377;
        const double clhs387 =             C(2,4)*DN(3,2);
        const double clhs388 =             C(4,4)*DN(3,1) + C(4,5)*DN(3,0) + clhs387;
        const double clhs389 =             DN(0,1)*N[3];
        const double clhs390 =             N[3]*clhs87 - clhs294*clhs43;
        const double clhs391 =             C(0,2)*DN(0,0) + C(2,3)*DN(0,1) + clhs71;
        const double clhs392 =             clhs13*clhs58;
        const double clhs393 =             C(1,2)*DN(0,1) + C(2,3)*DN(0,0) + clhs309;
        const double clhs394 =             clhs45*clhs58;
        const double clhs395 =             pow(DN(0,2), 2);
        const double clhs396 =             C(2,2)*DN(0,2) + C(2,4)*DN(0,1) + C(2,5)*DN(0,0);
        const double clhs397 =             DN(0,2)*N[0];
        const double clhs398 =             DN(0,2)*DN(1,0);
        const double clhs399 =             clhs398*rho + clhs398*tau2;
        const double clhs400 =             C(0,2)*DN(1,0) + C(2,3)*DN(1,1) + clhs144;
        const double clhs401 =             clhs119*clhs13;
        const double clhs402 =             -clhs401*clhs62;
        const double clhs403 =             DN(0,2)*DN(1,1);
        const double clhs404 =             clhs403*rho;
        const double clhs405 =             clhs403*tau2;
        const double clhs406 =             C(1,2)*DN(1,1) + C(2,3)*DN(1,0) + clhs335;
        const double clhs407 =             clhs119*clhs45;
        const double clhs408 =             -clhs407*clhs62;
        const double clhs409 =             DN(0,2)*DN(1,2);
        const double clhs410 =             clhs409*rho;
        const double clhs411 =             clhs409*tau2;
        const double clhs412 =             C(2,2)*DN(1,2) + C(2,4)*DN(1,1) + C(2,5)*DN(1,0);
        const double clhs413 =             DN(0,2)*N[1];
        const double clhs414 =             N[1]*clhs90 - clhs162*clhs48;
        const double clhs415 =             DN(0,2)*DN(2,0);
        const double clhs416 =             clhs415*rho + clhs415*tau2;
        const double clhs417 =             C(0,2)*DN(2,0) + C(2,3)*DN(2,1) + clhs213;
        const double clhs418 =             clhs13*clhs188;
        const double clhs419 =             -clhs418*clhs62;
        const double clhs420 =             DN(0,2)*DN(2,1);
        const double clhs421 =             clhs420*rho;
        const double clhs422 =             clhs420*tau2;
        const double clhs423 =             C(1,2)*DN(2,1) + C(2,3)*DN(2,0) + clhs361;
        const double clhs424 =             clhs188*clhs45;
        const double clhs425 =             -clhs424*clhs62;
        const double clhs426 =             DN(0,2)*DN(2,2);
        const double clhs427 =             clhs426*rho;
        const double clhs428 =             clhs426*tau2;
        const double clhs429 =             C(2,2)*DN(2,2) + C(2,4)*DN(2,1) + C(2,5)*DN(2,0);
        const double clhs430 =             DN(0,2)*N[2];
        const double clhs431 =             N[2]*clhs90 - clhs228*clhs48;
        const double clhs432 =             DN(0,2)*DN(3,0);
        const double clhs433 =             clhs432*rho + clhs432*tau2;
        const double clhs434 =             C(0,2)*DN(3,0) + C(2,3)*DN(3,1) + clhs279;
        const double clhs435 =             clhs13*clhs254;
        const double clhs436 =             -clhs435*clhs62;
        const double clhs437 =             DN(0,2)*DN(3,1);
        const double clhs438 =             clhs437*rho;
        const double clhs439 =             clhs437*tau2;
        const double clhs440 =             C(1,2)*DN(3,1) + C(2,3)*DN(3,0) + clhs387;
        const double clhs441 =             clhs254*clhs45;
        const double clhs442 =             -clhs441*clhs62;
        const double clhs443 =             DN(0,2)*DN(3,2);
        const double clhs444 =             clhs443*rho;
        const double clhs445 =             clhs443*tau2;
        const double clhs446 =             C(2,2)*DN(3,2) + C(2,4)*DN(3,1) + C(2,5)*DN(3,0);
        const double clhs447 =             DN(0,2)*N[3];
        const double clhs448 =             N[3]*clhs90 - clhs294*clhs48;
        const double clhs449 =             DN(0,0)*tau1;
        const double clhs450 =             DN(0,1)*tau1;
        const double clhs451 =             DN(0,2)*tau1;
        const double clhs452 =             bdf0*clhs23*clhs80;
        const double clhs453 =             DN(1,0)*N[0];
        const double clhs454 =             DN(1,1)*N[0];
        const double clhs455 =             DN(1,2)*N[0];
        const double clhs456 =             N[0]*bdf0*clhs23*clhs80;
        const double clhs457 =             N[1]*clhs456;
        const double clhs458 =             DN(2,0)*N[0];
        const double clhs459 =             DN(2,1)*N[0];
        const double clhs460 =             DN(2,2)*N[0];
        const double clhs461 =             N[2]*clhs456;
        const double clhs462 =             DN(3,0)*N[0];
        const double clhs463 =             DN(3,1)*N[0];
        const double clhs464 =             DN(3,2)*N[0];
        const double clhs465 =             N[3]*clhs456;
        const double clhs466 =             DN(1,1)*N[0]*clhs6*tau1;
        const double clhs467 =             DN(1,2)*N[0]*clhs6*tau1;
        const double clhs468 =             N[1]*rho;
        const double clhs469 =             DN(1,0)*clhs28*rho*tau1;
        const double clhs470 =             N[1]*clhs23*clhs24*tau1;
        const double clhs471 =             DN(1,0)*N[0]*rho*tau1;
        const double clhs472 =             clhs38*clhs471;
        const double clhs473 =             DN(1,1)*N[0]*rho*tau1;
        const double clhs474 =             clhs43*clhs473;
        const double clhs475 =             DN(1,2)*N[0]*rho*tau1;
        const double clhs476 =             clhs475*clhs48;
        const double clhs477 =             DN(1,0)*N[0]*clhs34*clhs6*tau1;
        const double clhs478 =             DN(1,2)*N[0]*clhs45*clhs6*tau1;
        const double clhs479 =             DN(1,1)*clhs64*rho*tau1;
        const double clhs480 =             DN(1,0)*N[0]*clhs36*clhs6*tau1;
        const double clhs481 =             DN(1,1)*N[0]*clhs41*clhs6*tau1;
        const double clhs482 =             DN(1,2)*clhs77*rho*tau1;
        const double clhs483 =             DN(1,0)*clhs85*rho*tau1;
        const double clhs484 =             DN(1,1)*clhs88*rho*tau1;
        const double clhs485 =             DN(1,2)*clhs91*rho*tau1;
        const double clhs486 =             pow(DN(1,0), 2);
        const double clhs487 =             DN(1,1)*N[1]*clhs6*tau1;
        const double clhs488 =             DN(1,2)*N[1]*clhs6*tau1;
        const double clhs489 =             DN(1,0)*clhs111*rho*tau1;
        const double clhs490 =             pow(N[1], 2);
        const double clhs491 =             DN(1,0)*N[1]*rho*tau1;
        const double clhs492 =             DN(1,1)*N[1]*rho*tau1;
        const double clhs493 =             DN(1,2)*N[1]*rho*tau1;
        const double clhs494 =             clhs25*clhs490 + clhs32*clhs490 + clhs38*clhs491 + clhs43*clhs492 + clhs48*clhs493;
        const double clhs495 =             DN(1,0)*DN(1,1);
        const double clhs496 =             clhs495*rho + clhs495*tau2;
        const double clhs497 =             clhs490*rho;
        const double clhs498 =             clhs34*clhs497;
        const double clhs499 =             DN(1,0)*N[1]*clhs34*clhs6*tau1;
        const double clhs500 =             DN(1,2)*N[1]*clhs45*clhs6*tau1;
        const double clhs501 =             DN(1,1)*clhs134*rho*tau1;
        const double clhs502 =             DN(1,0)*DN(1,2);
        const double clhs503 =             clhs502*rho + clhs502*tau2;
        const double clhs504 =             clhs36*clhs497;
        const double clhs505 =             DN(1,0)*N[1]*clhs36*clhs6*tau1;
        const double clhs506 =             DN(1,1)*N[1]*clhs41*clhs6*tau1;
        const double clhs507 =             DN(1,2)*clhs149*rho*tau1;
        const double clhs508 =             DN(1,0)*N[1];
        const double clhs509 =             bdf0*clhs23*clhs490;
        const double clhs510 =             DN(1,0)*clhs154*rho*tau1;
        const double clhs511 =             DN(1,1)*clhs157*rho*tau1;
        const double clhs512 =             DN(1,2)*clhs160*rho*tau1;
        const double clhs513 =             bdf0*clhs23*clhs490*tau1;
        const double clhs514 =             DN(1,0)*DN(2,0);
        const double clhs515 =             clhs514*rho;
        const double clhs516 =             clhs514*tau2;
        const double clhs517 =             N[1]*bdf0*rho;
        const double clhs518 =             N[2]*clhs517;
        const double clhs519 =             DN(1,1)*N[2]*clhs6*tau1;
        const double clhs520 =             DN(1,2)*N[2]*clhs6*tau1;
        const double clhs521 =             N[2]*clhs109;
        const double clhs522 =             DN(1,0)*clhs180*rho*tau1;
        const double clhs523 =             DN(1,0)*N[2]*rho*tau1;
        const double clhs524 =             clhs38*clhs523;
        const double clhs525 =             DN(1,1)*N[2]*rho*tau1;
        const double clhs526 =             clhs43*clhs525;
        const double clhs527 =             DN(1,2)*N[2]*rho*tau1;
        const double clhs528 =             clhs48*clhs527;
        const double clhs529 =             N[1]*N[2]*rho;
        const double clhs530 =             clhs34*clhs529;
        const double clhs531 =             -clhs530*clhs62;
        const double clhs532 =             DN(1,0)*DN(2,1);
        const double clhs533 =             clhs532*rho;
        const double clhs534 =             clhs532*tau2;
        const double clhs535 =             DN(1,0)*N[2]*clhs34*clhs6*tau1;
        const double clhs536 =             DN(1,2)*N[2]*clhs45*clhs6*tau1;
        const double clhs537 =             DN(1,1)*clhs203*rho*tau1;
        const double clhs538 =             clhs36*clhs529;
        const double clhs539 =             -clhs538*clhs62;
        const double clhs540 =             DN(1,0)*DN(2,2);
        const double clhs541 =             clhs540*rho;
        const double clhs542 =             clhs540*tau2;
        const double clhs543 =             DN(1,0)*N[2]*clhs36*clhs6*tau1;
        const double clhs544 =             DN(1,1)*N[2]*clhs41*clhs6*tau1;
        const double clhs545 =             DN(1,2)*clhs218*rho*tau1;
        const double clhs546 =             DN(1,0)*N[2];
        const double clhs547 =             DN(1,0)*clhs222*rho*tau1;
        const double clhs548 =             DN(1,1)*clhs224*rho*tau1;
        const double clhs549 =             DN(1,2)*clhs226*rho*tau1;
        const double clhs550 =             N[1]*N[2]*bdf0*clhs23*tau1;
        const double clhs551 =             N[2]*clhs153 - clhs38*clhs550;
        const double clhs552 =             DN(1,0)*DN(3,0);
        const double clhs553 =             clhs552*rho;
        const double clhs554 =             clhs552*tau2;
        const double clhs555 =             N[3]*clhs517;
        const double clhs556 =             DN(1,1)*N[3]*clhs6*tau1;
        const double clhs557 =             DN(1,2)*N[3]*clhs6*tau1;
        const double clhs558 =             N[3]*clhs109;
        const double clhs559 =             DN(1,0)*clhs246*rho*tau1;
        const double clhs560 =             DN(1,0)*N[3]*rho*tau1;
        const double clhs561 =             clhs38*clhs560;
        const double clhs562 =             DN(1,1)*N[3]*rho*tau1;
        const double clhs563 =             clhs43*clhs562;
        const double clhs564 =             DN(1,2)*N[3]*rho*tau1;
        const double clhs565 =             clhs48*clhs564;
        const double clhs566 =             N[1]*N[3]*rho;
        const double clhs567 =             clhs34*clhs566;
        const double clhs568 =             -clhs567*clhs62;
        const double clhs569 =             DN(1,0)*DN(3,1);
        const double clhs570 =             clhs569*rho;
        const double clhs571 =             clhs569*tau2;
        const double clhs572 =             DN(1,0)*N[3]*clhs34*clhs6*tau1;
        const double clhs573 =             DN(1,2)*N[3]*clhs45*clhs6*tau1;
        const double clhs574 =             DN(1,1)*clhs269*rho*tau1;
        const double clhs575 =             clhs36*clhs566;
        const double clhs576 =             -clhs575*clhs62;
        const double clhs577 =             DN(1,0)*DN(3,2);
        const double clhs578 =             clhs577*rho;
        const double clhs579 =             clhs577*tau2;
        const double clhs580 =             DN(1,0)*N[3]*clhs36*clhs6*tau1;
        const double clhs581 =             DN(1,1)*N[3]*clhs41*clhs6*tau1;
        const double clhs582 =             DN(1,2)*clhs284*rho*tau1;
        const double clhs583 =             DN(1,0)*N[3];
        const double clhs584 =             DN(1,0)*clhs288*rho*tau1;
        const double clhs585 =             DN(1,1)*clhs290*rho*tau1;
        const double clhs586 =             DN(1,2)*clhs292*rho*tau1;
        const double clhs587 =             N[1]*N[3]*bdf0*clhs23*tau1;
        const double clhs588 =             N[3]*clhs153 - clhs38*clhs587;
        const double clhs589 =             DN(1,1)*N[0]*clhs6*clhs8*tau1;
        const double clhs590 =             DN(1,2)*N[0]*clhs13*clhs6*tau1;
        const double clhs591 =             DN(1,0)*N[0]*clhs6*tau1;
        const double clhs592 =             clhs497*clhs8;
        const double clhs593 =             DN(1,1)*N[1]*clhs6*clhs8*tau1;
        const double clhs594 =             DN(1,2)*N[1]*clhs13*clhs6*tau1;
        const double clhs595 =             pow(DN(1,1), 2);
        const double clhs596 =             DN(1,0)*N[1]*clhs6*tau1;
        const double clhs597 =             DN(1,1)*DN(1,2);
        const double clhs598 =             clhs597*rho + clhs597*tau2;
        const double clhs599 =             clhs41*clhs497;
        const double clhs600 =             DN(1,1)*N[1];
        const double clhs601 =             DN(1,1)*DN(2,0);
        const double clhs602 =             clhs601*rho + clhs601*tau2;
        const double clhs603 =             clhs529*clhs8;
        const double clhs604 =             DN(1,1)*N[2]*clhs6*clhs8*tau1;
        const double clhs605 =             DN(1,2)*N[2]*clhs13*clhs6*tau1;
        const double clhs606 =             -clhs603*clhs62;
        const double clhs607 =             DN(1,1)*DN(2,1);
        const double clhs608 =             clhs607*rho;
        const double clhs609 =             clhs607*tau2;
        const double clhs610 =             DN(1,0)*N[2]*clhs6*tau1;
        const double clhs611 =             clhs518 + clhs521 + clhs524 + clhs526 + clhs528;
        const double clhs612 =             clhs41*clhs529;
        const double clhs613 =             -clhs612*clhs62 + clhs612;
        const double clhs614 =             DN(1,1)*DN(2,2);
        const double clhs615 =             clhs614*rho;
        const double clhs616 =             clhs614*tau2;
        const double clhs617 =             DN(1,1)*N[2];
        const double clhs618 =             N[2]*clhs156 - clhs43*clhs550;
        const double clhs619 =             DN(1,1)*DN(3,0);
        const double clhs620 =             clhs619*rho + clhs619*tau2;
        const double clhs621 =             clhs566*clhs8;
        const double clhs622 =             DN(1,1)*N[3]*clhs6*clhs8*tau1;
        const double clhs623 =             DN(1,2)*N[3]*clhs13*clhs6*tau1;
        const double clhs624 =             -clhs62*clhs621;
        const double clhs625 =             DN(1,1)*DN(3,1);
        const double clhs626 =             clhs625*rho;
        const double clhs627 =             clhs625*tau2;
        const double clhs628 =             DN(1,0)*N[3]*clhs6*tau1;
        const double clhs629 =             clhs555 + clhs558 + clhs561 + clhs563 + clhs565;
        const double clhs630 =             clhs41*clhs566;
        const double clhs631 =             -clhs62*clhs630 + clhs630;
        const double clhs632 =             DN(1,1)*DN(3,2);
        const double clhs633 =             clhs632*rho;
        const double clhs634 =             clhs632*tau2;
        const double clhs635 =             DN(1,1)*N[3];
        const double clhs636 =             N[3]*clhs156 - clhs43*clhs587;
        const double clhs637 =             clhs13*clhs497;
        const double clhs638 =             clhs45*clhs497;
        const double clhs639 =             pow(DN(1,2), 2);
        const double clhs640 =             DN(1,2)*N[1];
        const double clhs641 =             DN(1,2)*DN(2,0);
        const double clhs642 =             clhs641*rho + clhs641*tau2;
        const double clhs643 =             clhs13*clhs529;
        const double clhs644 =             -clhs62*clhs643;
        const double clhs645 =             DN(1,2)*DN(2,1);
        const double clhs646 =             clhs645*rho;
        const double clhs647 =             clhs645*tau2;
        const double clhs648 =             clhs45*clhs529;
        const double clhs649 =             -clhs62*clhs648;
        const double clhs650 =             DN(1,2)*DN(2,2);
        const double clhs651 =             clhs650*rho;
        const double clhs652 =             clhs650*tau2;
        const double clhs653 =             DN(1,2)*N[2];
        const double clhs654 =             N[2]*clhs159 - clhs48*clhs550;
        const double clhs655 =             DN(1,2)*DN(3,0);
        const double clhs656 =             clhs655*rho + clhs655*tau2;
        const double clhs657 =             clhs13*clhs566;
        const double clhs658 =             -clhs62*clhs657;
        const double clhs659 =             DN(1,2)*DN(3,1);
        const double clhs660 =             clhs659*rho;
        const double clhs661 =             clhs659*tau2;
        const double clhs662 =             clhs45*clhs566;
        const double clhs663 =             -clhs62*clhs662;
        const double clhs664 =             DN(1,2)*DN(3,2);
        const double clhs665 =             clhs664*rho;
        const double clhs666 =             clhs664*tau2;
        const double clhs667 =             DN(1,2)*N[3];
        const double clhs668 =             N[3]*clhs159 - clhs48*clhs587;
        const double clhs669 =             DN(1,0)*tau1;
        const double clhs670 =             DN(1,1)*tau1;
        const double clhs671 =             DN(1,2)*tau1;
        const double clhs672 =             DN(2,0)*N[1];
        const double clhs673 =             DN(2,1)*N[1];
        const double clhs674 =             DN(2,2)*N[1];
        const double clhs675 =             N[1]*bdf0*clhs23*clhs80;
        const double clhs676 =             N[2]*clhs675;
        const double clhs677 =             DN(3,0)*N[1];
        const double clhs678 =             DN(3,1)*N[1];
        const double clhs679 =             DN(3,2)*N[1];
        const double clhs680 =             N[3]*clhs675;
        const double clhs681 =             DN(2,1)*N[0]*clhs6*tau1;
        const double clhs682 =             DN(2,2)*N[0]*clhs6*tau1;
        const double clhs683 =             N[2]*rho;
        const double clhs684 =             DN(2,0)*clhs28*rho*tau1;
        const double clhs685 =             N[2]*clhs23*clhs24*tau1;
        const double clhs686 =             DN(2,0)*N[0]*rho*tau1;
        const double clhs687 =             clhs38*clhs686;
        const double clhs688 =             DN(2,1)*N[0]*rho*tau1;
        const double clhs689 =             clhs43*clhs688;
        const double clhs690 =             DN(2,2)*N[0]*rho*tau1;
        const double clhs691 =             clhs48*clhs690;
        const double clhs692 =             DN(2,0)*N[0]*clhs34*clhs6*tau1;
        const double clhs693 =             DN(2,2)*N[0]*clhs45*clhs6*tau1;
        const double clhs694 =             DN(2,1)*clhs64*rho*tau1;
        const double clhs695 =             DN(2,0)*N[0]*clhs36*clhs6*tau1;
        const double clhs696 =             DN(2,1)*N[0]*clhs41*clhs6*tau1;
        const double clhs697 =             DN(2,2)*clhs77*rho*tau1;
        const double clhs698 =             DN(2,0)*clhs85*rho*tau1;
        const double clhs699 =             DN(2,1)*clhs88*rho*tau1;
        const double clhs700 =             DN(2,2)*clhs91*rho*tau1;
        const double clhs701 =             DN(2,1)*N[1]*clhs6*tau1;
        const double clhs702 =             DN(2,2)*N[1]*clhs6*tau1;
        const double clhs703 =             DN(2,0)*clhs111*rho*tau1;
        const double clhs704 =             DN(2,0)*N[1]*rho*tau1;
        const double clhs705 =             clhs38*clhs704;
        const double clhs706 =             DN(2,1)*N[1]*rho*tau1;
        const double clhs707 =             clhs43*clhs706;
        const double clhs708 =             DN(2,2)*N[1]*rho*tau1;
        const double clhs709 =             clhs48*clhs708;
        const double clhs710 =             DN(2,0)*N[1]*clhs34*clhs6*tau1;
        const double clhs711 =             DN(2,2)*N[1]*clhs45*clhs6*tau1;
        const double clhs712 =             DN(2,1)*clhs134*rho*tau1;
        const double clhs713 =             DN(2,0)*N[1]*clhs36*clhs6*tau1;
        const double clhs714 =             DN(2,1)*N[1]*clhs41*clhs6*tau1;
        const double clhs715 =             DN(2,2)*clhs149*rho*tau1;
        const double clhs716 =             DN(2,0)*clhs154*rho*tau1;
        const double clhs717 =             DN(2,1)*clhs157*rho*tau1;
        const double clhs718 =             DN(2,2)*clhs160*rho*tau1;
        const double clhs719 =             pow(DN(2,0), 2);
        const double clhs720 =             DN(2,1)*N[2]*clhs6*tau1;
        const double clhs721 =             DN(2,2)*N[2]*clhs6*tau1;
        const double clhs722 =             DN(2,0)*clhs180*rho*tau1;
        const double clhs723 =             pow(N[2], 2);
        const double clhs724 =             DN(2,0)*N[2]*rho*tau1;
        const double clhs725 =             DN(2,1)*N[2]*rho*tau1;
        const double clhs726 =             DN(2,2)*N[2]*rho*tau1;
        const double clhs727 =             clhs25*clhs723 + clhs32*clhs723 + clhs38*clhs724 + clhs43*clhs725 + clhs48*clhs726;
        const double clhs728 =             DN(2,0)*DN(2,1);
        const double clhs729 =             clhs728*rho + clhs728*tau2;
        const double clhs730 =             clhs723*rho;
        const double clhs731 =             clhs34*clhs730;
        const double clhs732 =             DN(2,0)*N[2]*clhs34*clhs6*tau1;
        const double clhs733 =             DN(2,2)*N[2]*clhs45*clhs6*tau1;
        const double clhs734 =             DN(2,1)*clhs203*rho*tau1;
        const double clhs735 =             DN(2,0)*DN(2,2);
        const double clhs736 =             clhs735*rho + clhs735*tau2;
        const double clhs737 =             clhs36*clhs730;
        const double clhs738 =             DN(2,0)*N[2]*clhs36*clhs6*tau1;
        const double clhs739 =             DN(2,1)*N[2]*clhs41*clhs6*tau1;
        const double clhs740 =             DN(2,2)*clhs218*rho*tau1;
        const double clhs741 =             DN(2,0)*N[2];
        const double clhs742 =             bdf0*clhs23*clhs723;
        const double clhs743 =             DN(2,0)*clhs222*rho*tau1;
        const double clhs744 =             DN(2,1)*clhs224*rho*tau1;
        const double clhs745 =             DN(2,2)*clhs226*rho*tau1;
        const double clhs746 =             bdf0*clhs23*clhs723*tau1;
        const double clhs747 =             DN(2,0)*DN(3,0);
        const double clhs748 =             clhs747*rho;
        const double clhs749 =             clhs747*tau2;
        const double clhs750 =             N[2]*N[3]*bdf0;
        const double clhs751 =             clhs750*rho;
        const double clhs752 =             DN(2,1)*N[3]*clhs6*tau1;
        const double clhs753 =             DN(2,2)*N[3]*clhs6*tau1;
        const double clhs754 =             N[3]*clhs178;
        const double clhs755 =             DN(2,0)*clhs246*rho*tau1;
        const double clhs756 =             DN(2,0)*N[3]*rho*tau1;
        const double clhs757 =             clhs38*clhs756;
        const double clhs758 =             DN(2,1)*N[3]*rho*tau1;
        const double clhs759 =             clhs43*clhs758;
        const double clhs760 =             DN(2,2)*N[3]*rho*tau1;
        const double clhs761 =             clhs48*clhs760;
        const double clhs762 =             N[2]*N[3]*rho;
        const double clhs763 =             clhs34*clhs762;
        const double clhs764 =             -clhs62*clhs763;
        const double clhs765 =             DN(2,0)*DN(3,1);
        const double clhs766 =             clhs765*rho;
        const double clhs767 =             clhs765*tau2;
        const double clhs768 =             DN(2,0)*N[3]*clhs34*clhs6*tau1;
        const double clhs769 =             DN(2,2)*N[3]*clhs45*clhs6*tau1;
        const double clhs770 =             DN(2,1)*clhs269*rho*tau1;
        const double clhs771 =             clhs36*clhs762;
        const double clhs772 =             -clhs62*clhs771;
        const double clhs773 =             DN(2,0)*DN(3,2);
        const double clhs774 =             clhs773*rho;
        const double clhs775 =             clhs773*tau2;
        const double clhs776 =             DN(2,0)*N[3]*clhs36*clhs6*tau1;
        const double clhs777 =             DN(2,1)*N[3]*clhs41*clhs6*tau1;
        const double clhs778 =             DN(2,2)*clhs284*rho*tau1;
        const double clhs779 =             DN(2,0)*N[3];
        const double clhs780 =             DN(2,0)*clhs288*rho*tau1;
        const double clhs781 =             DN(2,1)*clhs290*rho*tau1;
        const double clhs782 =             DN(2,2)*clhs292*rho*tau1;
        const double clhs783 =             N[2]*N[3]*bdf0*clhs23;
        const double clhs784 =             N[2]*N[3]*bdf0*clhs23*tau1;
        const double clhs785 =             -clhs38*clhs784 + clhs783*clhs9;
        const double clhs786 =             DN(2,1)*N[0]*clhs6*clhs8*tau1;
        const double clhs787 =             DN(2,2)*N[0]*clhs13*clhs6*tau1;
        const double clhs788 =             DN(2,0)*N[0]*clhs6*tau1;
        const double clhs789 =             DN(2,1)*N[1]*clhs6*clhs8*tau1;
        const double clhs790 =             DN(2,2)*N[1]*clhs13*clhs6*tau1;
        const double clhs791 =             DN(2,0)*N[1]*clhs6*tau1;
        const double clhs792 =             clhs730*clhs8;
        const double clhs793 =             DN(2,1)*N[2]*clhs6*clhs8*tau1;
        const double clhs794 =             DN(2,2)*N[2]*clhs13*clhs6*tau1;
        const double clhs795 =             pow(DN(2,1), 2);
        const double clhs796 =             DN(2,0)*N[2]*clhs6*tau1;
        const double clhs797 =             DN(2,1)*DN(2,2);
        const double clhs798 =             clhs797*rho + clhs797*tau2;
        const double clhs799 =             clhs41*clhs730;
        const double clhs800 =             DN(2,1)*N[2];
        const double clhs801 =             DN(2,1)*DN(3,0);
        const double clhs802 =             clhs801*rho + clhs801*tau2;
        const double clhs803 =             clhs762*clhs8;
        const double clhs804 =             DN(2,1)*N[3]*clhs6*clhs8*tau1;
        const double clhs805 =             DN(2,2)*N[3]*clhs13*clhs6*tau1;
        const double clhs806 =             -clhs62*clhs803;
        const double clhs807 =             DN(2,1)*DN(3,1);
        const double clhs808 =             clhs807*rho;
        const double clhs809 =             clhs807*tau2;
        const double clhs810 =             DN(2,0)*N[3]*clhs6*tau1;
        const double clhs811 =             clhs751 + clhs754 + clhs757 + clhs759 + clhs761;
        const double clhs812 =             clhs41*clhs762;
        const double clhs813 =             -clhs62*clhs812 + clhs812;
        const double clhs814 =             DN(2,1)*DN(3,2);
        const double clhs815 =             clhs814*rho;
        const double clhs816 =             clhs814*tau2;
        const double clhs817 =             DN(2,1)*N[3];
        const double clhs818 =             clhs17*clhs783 - clhs43*clhs784;
        const double clhs819 =             clhs13*clhs730;
        const double clhs820 =             clhs45*clhs730;
        const double clhs821 =             pow(DN(2,2), 2);
        const double clhs822 =             DN(2,2)*N[2];
        const double clhs823 =             DN(2,2)*DN(3,0);
        const double clhs824 =             clhs823*rho + clhs823*tau2;
        const double clhs825 =             clhs13*clhs762;
        const double clhs826 =             -clhs62*clhs825;
        const double clhs827 =             DN(2,2)*DN(3,1);
        const double clhs828 =             clhs827*rho;
        const double clhs829 =             clhs827*tau2;
        const double clhs830 =             clhs45*clhs762;
        const double clhs831 =             -clhs62*clhs830;
        const double clhs832 =             DN(2,2)*DN(3,2);
        const double clhs833 =             clhs832*rho;
        const double clhs834 =             clhs832*tau2;
        const double clhs835 =             DN(2,2)*N[3];
        const double clhs836 =             clhs19*clhs783 - clhs48*clhs784;
        const double clhs837 =             DN(2,0)*tau1;
        const double clhs838 =             DN(2,1)*tau1;
        const double clhs839 =             DN(2,2)*tau1;
        const double clhs840 =             DN(3,0)*N[2];
        const double clhs841 =             DN(3,1)*N[2];
        const double clhs842 =             DN(3,2)*N[2];
        const double clhs843 =             clhs23*clhs750*clhs80;
        const double clhs844 =             DN(3,1)*N[0]*clhs6*tau1;
        const double clhs845 =             DN(3,2)*N[0]*clhs6*tau1;
        const double clhs846 =             N[3]*rho;
        const double clhs847 =             DN(3,0)*clhs28*rho*tau1;
        const double clhs848 =             N[3]*clhs23*clhs24*tau1;
        const double clhs849 =             DN(3,0)*N[0]*rho*tau1;
        const double clhs850 =             clhs38*clhs849;
        const double clhs851 =             DN(3,1)*N[0]*rho*tau1;
        const double clhs852 =             clhs43*clhs851;
        const double clhs853 =             DN(3,2)*N[0]*rho*tau1;
        const double clhs854 =             clhs48*clhs853;
        const double clhs855 =             DN(3,0)*N[0]*clhs34*clhs6*tau1;
        const double clhs856 =             DN(3,2)*N[0]*clhs45*clhs6*tau1;
        const double clhs857 =             DN(3,1)*clhs64*rho*tau1;
        const double clhs858 =             DN(3,0)*N[0]*clhs36*clhs6*tau1;
        const double clhs859 =             DN(3,1)*N[0]*clhs41*clhs6*tau1;
        const double clhs860 =             DN(3,2)*clhs77*rho*tau1;
        const double clhs861 =             DN(3,0)*clhs85*rho*tau1;
        const double clhs862 =             DN(3,1)*clhs88*rho*tau1;
        const double clhs863 =             DN(3,2)*clhs91*rho*tau1;
        const double clhs864 =             DN(3,1)*N[1]*clhs6*tau1;
        const double clhs865 =             DN(3,2)*N[1]*clhs6*tau1;
        const double clhs866 =             DN(3,0)*clhs111*rho*tau1;
        const double clhs867 =             DN(3,0)*N[1]*rho*tau1;
        const double clhs868 =             clhs38*clhs867;
        const double clhs869 =             DN(3,1)*N[1]*rho*tau1;
        const double clhs870 =             clhs43*clhs869;
        const double clhs871 =             DN(3,2)*N[1]*rho*tau1;
        const double clhs872 =             clhs48*clhs871;
        const double clhs873 =             DN(3,0)*N[1]*clhs34*clhs6*tau1;
        const double clhs874 =             DN(3,2)*N[1]*clhs45*clhs6*tau1;
        const double clhs875 =             DN(3,1)*clhs134*rho*tau1;
        const double clhs876 =             DN(3,0)*N[1]*clhs36*clhs6*tau1;
        const double clhs877 =             DN(3,1)*N[1]*clhs41*clhs6*tau1;
        const double clhs878 =             DN(3,2)*clhs149*rho*tau1;
        const double clhs879 =             DN(3,0)*clhs154*rho*tau1;
        const double clhs880 =             DN(3,1)*clhs157*rho*tau1;
        const double clhs881 =             DN(3,2)*clhs160*rho*tau1;
        const double clhs882 =             DN(3,1)*N[2]*clhs6*tau1;
        const double clhs883 =             DN(3,2)*N[2]*clhs6*tau1;
        const double clhs884 =             DN(3,0)*clhs180*rho*tau1;
        const double clhs885 =             DN(3,0)*N[2]*rho*tau1;
        const double clhs886 =             clhs38*clhs885;
        const double clhs887 =             DN(3,1)*N[2]*rho*tau1;
        const double clhs888 =             clhs43*clhs887;
        const double clhs889 =             DN(3,2)*N[2]*rho*tau1;
        const double clhs890 =             clhs48*clhs889;
        const double clhs891 =             DN(3,0)*N[2]*clhs34*clhs6*tau1;
        const double clhs892 =             DN(3,2)*N[2]*clhs45*clhs6*tau1;
        const double clhs893 =             DN(3,1)*clhs203*rho*tau1;
        const double clhs894 =             DN(3,0)*N[2]*clhs36*clhs6*tau1;
        const double clhs895 =             DN(3,1)*N[2]*clhs41*clhs6*tau1;
        const double clhs896 =             DN(3,2)*clhs218*rho*tau1;
        const double clhs897 =             DN(3,0)*clhs222*rho*tau1;
        const double clhs898 =             DN(3,1)*clhs224*rho*tau1;
        const double clhs899 =             DN(3,2)*clhs226*rho*tau1;
        const double clhs900 =             pow(DN(3,0), 2);
        const double clhs901 =             DN(3,1)*N[3]*clhs6*tau1;
        const double clhs902 =             DN(3,2)*N[3]*clhs6*tau1;
        const double clhs903 =             DN(3,0)*clhs246*rho*tau1;
        const double clhs904 =             pow(N[3], 2);
        const double clhs905 =             DN(3,0)*N[3]*rho*tau1;
        const double clhs906 =             DN(3,1)*N[3]*rho*tau1;
        const double clhs907 =             DN(3,2)*N[3]*rho*tau1;
        const double clhs908 =             clhs25*clhs904 + clhs32*clhs904 + clhs38*clhs905 + clhs43*clhs906 + clhs48*clhs907;
        const double clhs909 =             DN(3,0)*DN(3,1);
        const double clhs910 =             clhs909*rho + clhs909*tau2;
        const double clhs911 =             clhs904*rho;
        const double clhs912 =             clhs34*clhs911;
        const double clhs913 =             DN(3,0)*N[3]*clhs34*clhs6*tau1;
        const double clhs914 =             DN(3,2)*N[3]*clhs45*clhs6*tau1;
        const double clhs915 =             DN(3,1)*clhs269*rho*tau1;
        const double clhs916 =             DN(3,0)*DN(3,2);
        const double clhs917 =             clhs916*rho + clhs916*tau2;
        const double clhs918 =             clhs36*clhs911;
        const double clhs919 =             DN(3,0)*N[3]*clhs36*clhs6*tau1;
        const double clhs920 =             DN(3,1)*N[3]*clhs41*clhs6*tau1;
        const double clhs921 =             DN(3,2)*clhs284*rho*tau1;
        const double clhs922 =             DN(3,0)*N[3];
        const double clhs923 =             bdf0*clhs23*clhs904;
        const double clhs924 =             DN(3,0)*clhs288*rho*tau1;
        const double clhs925 =             DN(3,1)*clhs290*rho*tau1;
        const double clhs926 =             DN(3,2)*clhs292*rho*tau1;
        const double clhs927 =             bdf0*clhs23*clhs904*tau1;
        const double clhs928 =             DN(3,1)*N[0]*clhs6*clhs8*tau1;
        const double clhs929 =             DN(3,2)*N[0]*clhs13*clhs6*tau1;
        const double clhs930 =             DN(3,0)*N[0]*clhs6*tau1;
        const double clhs931 =             DN(3,1)*N[1]*clhs6*clhs8*tau1;
        const double clhs932 =             DN(3,2)*N[1]*clhs13*clhs6*tau1;
        const double clhs933 =             DN(3,0)*N[1]*clhs6*tau1;
        const double clhs934 =             DN(3,1)*N[2]*clhs6*clhs8*tau1;
        const double clhs935 =             DN(3,2)*N[2]*clhs13*clhs6*tau1;
        const double clhs936 =             DN(3,0)*N[2]*clhs6*tau1;
        const double clhs937 =             clhs8*clhs911;
        const double clhs938 =             DN(3,1)*N[3]*clhs6*clhs8*tau1;
        const double clhs939 =             DN(3,2)*N[3]*clhs13*clhs6*tau1;
        const double clhs940 =             pow(DN(3,1), 2);
        const double clhs941 =             DN(3,0)*N[3]*clhs6*tau1;
        const double clhs942 =             DN(3,1)*DN(3,2);
        const double clhs943 =             clhs942*rho + clhs942*tau2;
        const double clhs944 =             clhs41*clhs911;
        const double clhs945 =             DN(3,1)*N[3];
        const double clhs946 =             clhs13*clhs911;
        const double clhs947 =             clhs45*clhs911;
        const double clhs948 =             pow(DN(3,2), 2);
        const double clhs949 =             DN(3,2)*N[3];
        const double clhs950 =             DN(3,0)*tau1;
        const double clhs951 =             DN(3,1)*tau1;
        const double clhs952 =             DN(3,2)*tau1;

        lhs(0,0)=DN(0,0)*clhs1 + DN(0,1)*clhs3 + DN(0,2)*clhs5 + clhs0*rho + clhs0*tau2 + clhs10*clhs29 + clhs11*clhs7 + clhs12*clhs14 + clhs15*clhs22 - clhs28*clhs30 + clhs49;
        lhs(0,1)=DN(0,0)*clhs52 + DN(0,1)*clhs54 + DN(0,2)*clhs57 + clhs10*clhs60 + clhs10*clhs61 + clhs10*clhs65 + clhs51 - clhs59*clhs62 + clhs59;
        lhs(0,2)=DN(0,0)*clhs68 + DN(0,1)*clhs70 + DN(0,2)*clhs72 + clhs10*clhs74 + clhs10*clhs75 + clhs10*clhs78 - clhs62*clhs73 + clhs67 + clhs73;
        lhs(0,3)=clhs10*clhs86 + clhs10*clhs89 + clhs10*clhs92 - clhs30*clhs85 - clhs38*clhs93 + clhs79*clhs81 - clhs79 + clhs82*clhs9;
        lhs(0,4)=DN(0,0)*clhs99 + DN(0,1)*clhs101 + DN(0,2)*clhs103 + clhs10*clhs112 + clhs104*clhs11 + clhs105*clhs14 + clhs106 + clhs108*clhs15 - clhs111*clhs30 + clhs114 + clhs116 + clhs118 + clhs95 + clhs96 + clhs98;
        lhs(0,5)=DN(0,0)*clhs125 + DN(0,1)*clhs127 + DN(0,2)*clhs130 + clhs10*clhs131 + clhs10*clhs132 + clhs10*clhs135 + clhs120 + clhs121 + clhs123 + clhs124;
        lhs(0,6)=DN(0,0)*clhs141 + DN(0,1)*clhs143 + DN(0,2)*clhs145 + clhs10*clhs146 + clhs10*clhs147 + clhs10*clhs150 + clhs136 + clhs137 + clhs139 + clhs140;
        lhs(0,7)=clhs10*clhs155 + clhs10*clhs158 + clhs10*clhs161 + clhs151*clhs81 - clhs151 - clhs154*clhs30 + clhs163;
        lhs(0,8)=DN(0,0)*clhs168 + DN(0,1)*clhs170 + DN(0,2)*clhs172 + clhs10*clhs181 + clhs11*clhs173 + clhs14*clhs174 + clhs15*clhs177 + clhs165 + clhs166 + clhs167 + clhs175 - clhs180*clhs30 + clhs183 + clhs185 + clhs187;
        lhs(0,9)=DN(0,0)*clhs194 + DN(0,1)*clhs196 + DN(0,2)*clhs199 + clhs10*clhs200 + clhs10*clhs201 + clhs10*clhs204 + clhs189 + clhs190 + clhs192 + clhs193;
        lhs(0,10)=DN(0,0)*clhs210 + DN(0,1)*clhs212 + DN(0,2)*clhs214 + clhs10*clhs215 + clhs10*clhs216 + clhs10*clhs219 + clhs205 + clhs206 + clhs208 + clhs209;
        lhs(0,11)=clhs10*clhs223 + clhs10*clhs225 + clhs10*clhs227 + clhs220*clhs81 - clhs220 - clhs222*clhs30 + clhs229;
        lhs(0,12)=DN(0,0)*clhs234 + DN(0,1)*clhs236 + DN(0,2)*clhs238 + clhs10*clhs247 + clhs11*clhs239 + clhs14*clhs240 + clhs15*clhs243 + clhs231 + clhs232 + clhs233 + clhs241 - clhs246*clhs30 + clhs249 + clhs251 + clhs253;
        lhs(0,13)=DN(0,0)*clhs260 + DN(0,1)*clhs262 + DN(0,2)*clhs265 + clhs10*clhs266 + clhs10*clhs267 + clhs10*clhs270 + clhs255 + clhs256 + clhs258 + clhs259;
        lhs(0,14)=DN(0,0)*clhs276 + DN(0,1)*clhs278 + DN(0,2)*clhs280 + clhs10*clhs281 + clhs10*clhs282 + clhs10*clhs285 + clhs271 + clhs272 + clhs274 + clhs275;
        lhs(0,15)=clhs10*clhs289 + clhs10*clhs291 + clhs10*clhs293 + clhs286*clhs81 - clhs286 - clhs288*clhs30 + clhs295;
        lhs(1,0)=DN(0,0)*clhs3 + DN(0,1)*clhs296 + DN(0,2)*clhs297 + clhs18*clhs29 + clhs18*clhs299 + clhs18*clhs300 - clhs298*clhs62 + clhs298 + clhs51;
        lhs(1,1)=DN(0,0)*clhs54 + DN(0,1)*clhs302 + DN(0,2)*clhs304 + clhs12*clhs46 + clhs15*clhs63 + clhs18*clhs65 - clhs30*clhs64 + clhs301*rho + clhs301*tau2 + clhs305*clhs35 + clhs49;
        lhs(1,2)=DN(0,0)*clhs70 + DN(0,1)*clhs308 + DN(0,2)*clhs310 + clhs18*clhs74 + clhs18*clhs75 + clhs18*clhs78 + clhs307 - clhs311*clhs62 + clhs311;
        lhs(1,3)=clhs17*clhs82 + clhs18*clhs86 + clhs18*clhs89 + clhs18*clhs92 - clhs30*clhs88 + clhs312*clhs81 - clhs312 - clhs43*clhs93;
        lhs(1,4)=DN(0,0)*clhs101 + DN(0,1)*clhs315 + DN(0,2)*clhs316 + clhs112*clhs18 + clhs18*clhs318 + clhs18*clhs319 + clhs314 + clhs317 + clhs320;
        lhs(1,5)=DN(0,0)*clhs127 + DN(0,1)*clhs324 + DN(0,2)*clhs326 + clhs105*clhs46 + clhs133*clhs15 - clhs134*clhs30 + clhs135*clhs18 + clhs322 + clhs323 + clhs327*clhs35 + clhs328;
        lhs(1,6)=DN(0,0)*clhs143 + DN(0,1)*clhs334 + DN(0,2)*clhs336 + clhs146*clhs18 + clhs147*clhs18 + clhs150*clhs18 + clhs330 + clhs332 + clhs333;
        lhs(1,7)=clhs155*clhs18 - clhs157*clhs30 + clhs158*clhs18 + clhs161*clhs18 + clhs337*clhs81 - clhs337 + clhs338;
        lhs(1,8)=DN(0,0)*clhs170 + DN(0,1)*clhs341 + DN(0,2)*clhs342 + clhs18*clhs181 + clhs18*clhs344 + clhs18*clhs345 + clhs340 + clhs343 + clhs346;
        lhs(1,9)=DN(0,0)*clhs196 + DN(0,1)*clhs350 + DN(0,2)*clhs352 + clhs15*clhs202 + clhs174*clhs46 + clhs18*clhs204 - clhs203*clhs30 + clhs348 + clhs349 + clhs35*clhs353 + clhs354;
        lhs(1,10)=DN(0,0)*clhs212 + DN(0,1)*clhs360 + DN(0,2)*clhs362 + clhs18*clhs215 + clhs18*clhs216 + clhs18*clhs219 + clhs356 + clhs358 + clhs359;
        lhs(1,11)=clhs18*clhs223 + clhs18*clhs225 + clhs18*clhs227 - clhs224*clhs30 + clhs363*clhs81 - clhs363 + clhs364;
        lhs(1,12)=DN(0,0)*clhs236 + DN(0,1)*clhs367 + DN(0,2)*clhs368 + clhs18*clhs247 + clhs18*clhs370 + clhs18*clhs371 + clhs366 + clhs369 + clhs372;
        lhs(1,13)=DN(0,0)*clhs262 + DN(0,1)*clhs376 + DN(0,2)*clhs378 + clhs15*clhs268 + clhs18*clhs270 + clhs240*clhs46 - clhs269*clhs30 + clhs35*clhs379 + clhs374 + clhs375 + clhs380;
        lhs(1,14)=DN(0,0)*clhs278 + DN(0,1)*clhs386 + DN(0,2)*clhs388 + clhs18*clhs281 + clhs18*clhs282 + clhs18*clhs285 + clhs382 + clhs384 + clhs385;
        lhs(1,15)=clhs18*clhs289 + clhs18*clhs291 + clhs18*clhs293 - clhs290*clhs30 + clhs389*clhs81 - clhs389 + clhs390;
        lhs(2,0)=DN(0,0)*clhs5 + DN(0,1)*clhs297 + DN(0,2)*clhs391 + clhs20*clhs29 + clhs20*clhs299 + clhs20*clhs300 - clhs392*clhs62 + clhs392 + clhs67;
        lhs(2,1)=DN(0,0)*clhs57 + DN(0,1)*clhs304 + DN(0,2)*clhs393 + clhs20*clhs60 + clhs20*clhs61 + clhs20*clhs65 + clhs307 - clhs394*clhs62 + clhs394;
        lhs(2,2)=DN(0,0)*clhs72 + DN(0,1)*clhs310 + DN(0,2)*clhs396 + clhs15*clhs76 + clhs20*clhs78 - clhs30*clhs77 + clhs305*clhs37 + clhs395*rho + clhs395*tau2 + clhs42*clhs7 + clhs49;
        lhs(2,3)=clhs19*clhs82 + clhs20*clhs86 + clhs20*clhs89 + clhs20*clhs92 - clhs30*clhs91 + clhs397*clhs81 - clhs397 - clhs48*clhs93;
        lhs(2,4)=DN(0,0)*clhs103 + DN(0,1)*clhs316 + DN(0,2)*clhs400 + clhs112*clhs20 + clhs20*clhs318 + clhs20*clhs319 + clhs399 + clhs401 + clhs402;
        lhs(2,5)=DN(0,0)*clhs130 + DN(0,1)*clhs326 + DN(0,2)*clhs406 + clhs131*clhs20 + clhs132*clhs20 + clhs135*clhs20 + clhs404 + clhs405 + clhs407 + clhs408;
        lhs(2,6)=DN(0,0)*clhs145 + DN(0,1)*clhs336 + DN(0,2)*clhs412 + clhs104*clhs42 + clhs148*clhs15 - clhs149*clhs30 + clhs150*clhs20 + clhs327*clhs37 + clhs328 + clhs410 + clhs411;
        lhs(2,7)=clhs155*clhs20 + clhs158*clhs20 - clhs160*clhs30 + clhs161*clhs20 + clhs413*clhs81 - clhs413 + clhs414;
        lhs(2,8)=DN(0,0)*clhs172 + DN(0,1)*clhs342 + DN(0,2)*clhs417 + clhs181*clhs20 + clhs20*clhs344 + clhs20*clhs345 + clhs416 + clhs418 + clhs419;
        lhs(2,9)=DN(0,0)*clhs199 + DN(0,1)*clhs352 + DN(0,2)*clhs423 + clhs20*clhs200 + clhs20*clhs201 + clhs20*clhs204 + clhs421 + clhs422 + clhs424 + clhs425;
        lhs(2,10)=DN(0,0)*clhs214 + DN(0,1)*clhs362 + DN(0,2)*clhs429 + clhs15*clhs217 + clhs173*clhs42 + clhs20*clhs219 - clhs218*clhs30 + clhs353*clhs37 + clhs354 + clhs427 + clhs428;
        lhs(2,11)=clhs20*clhs223 + clhs20*clhs225 + clhs20*clhs227 - clhs226*clhs30 + clhs430*clhs81 - clhs430 + clhs431;
        lhs(2,12)=DN(0,0)*clhs238 + DN(0,1)*clhs368 + DN(0,2)*clhs434 + clhs20*clhs247 + clhs20*clhs370 + clhs20*clhs371 + clhs433 + clhs435 + clhs436;
        lhs(2,13)=DN(0,0)*clhs265 + DN(0,1)*clhs378 + DN(0,2)*clhs440 + clhs20*clhs266 + clhs20*clhs267 + clhs20*clhs270 + clhs438 + clhs439 + clhs441 + clhs442;
        lhs(2,14)=DN(0,0)*clhs280 + DN(0,1)*clhs388 + DN(0,2)*clhs446 + clhs15*clhs283 + clhs20*clhs285 + clhs239*clhs42 - clhs284*clhs30 + clhs37*clhs379 + clhs380 + clhs444 + clhs445;
        lhs(2,15)=clhs20*clhs289 + clhs20*clhs291 + clhs20*clhs293 - clhs292*clhs30 + clhs447*clhs81 - clhs447 + clhs448;
        lhs(3,0)=clhs13*clhs44 + clhs28*clhs449 + clhs39*clhs8 + 2*clhs79;
        lhs(3,1)=2*clhs312 + clhs33*clhs34 + clhs44*clhs45 + clhs450*clhs64;
        lhs(3,2)=clhs33*clhs36 + clhs39*clhs41 + 2*clhs397 + clhs451*clhs77;
        lhs(3,3)=clhs31*clhs452 + clhs449*clhs85 + clhs450*clhs88 + clhs451*clhs91;
        lhs(3,4)=clhs111*clhs449 + clhs115*clhs8 + clhs117*clhs13 + 2*clhs453;
        lhs(3,5)=clhs113*clhs34 + clhs117*clhs45 + clhs134*clhs450 + 2*clhs454;
        lhs(3,6)=clhs113*clhs36 + clhs115*clhs41 + clhs149*clhs451 + 2*clhs455;
        lhs(3,7)=clhs154*clhs449 + clhs157*clhs450 + clhs160*clhs451 + clhs457;
        lhs(3,8)=clhs13*clhs186 + clhs180*clhs449 + clhs184*clhs8 + 2*clhs458;
        lhs(3,9)=clhs182*clhs34 + clhs186*clhs45 + clhs203*clhs450 + 2*clhs459;
        lhs(3,10)=clhs182*clhs36 + clhs184*clhs41 + clhs218*clhs451 + 2*clhs460;
        lhs(3,11)=clhs222*clhs449 + clhs224*clhs450 + clhs226*clhs451 + clhs461;
        lhs(3,12)=clhs13*clhs252 + clhs246*clhs449 + clhs250*clhs8 + 2*clhs462;
        lhs(3,13)=clhs248*clhs34 + clhs252*clhs45 + clhs269*clhs450 + 2*clhs463;
        lhs(3,14)=clhs248*clhs36 + clhs250*clhs41 + clhs284*clhs451 + 2*clhs464;
        lhs(3,15)=clhs288*clhs449 + clhs290*clhs450 + clhs292*clhs451 + clhs465;
        lhs(4,0)=DN(1,0)*clhs1 + DN(1,1)*clhs3 + DN(1,2)*clhs5 + clhs10*clhs469 + clhs106 + clhs11*clhs466 + clhs14*clhs467 + clhs22*clhs468 - clhs28*clhs470 + clhs472 + clhs474 + clhs476 + clhs95 + clhs96 + clhs98;
        lhs(4,1)=DN(1,0)*clhs52 + DN(1,1)*clhs54 + DN(1,2)*clhs57 + clhs10*clhs477 + clhs10*clhs478 + clhs10*clhs479 + clhs120 + clhs121 + clhs314;
        lhs(4,2)=DN(1,0)*clhs68 + DN(1,1)*clhs70 + DN(1,2)*clhs72 + clhs10*clhs480 + clhs10*clhs481 + clhs10*clhs482 + clhs136 + clhs137 + clhs399;
        lhs(4,3)=clhs10*clhs483 + clhs10*clhs484 + clhs10*clhs485 + clhs163 + clhs453*clhs81 - clhs453 - clhs470*clhs85;
        lhs(4,4)=DN(1,0)*clhs99 + DN(1,1)*clhs101 + DN(1,2)*clhs103 + clhs10*clhs489 + clhs108*clhs468 + clhs11*clhs487 - clhs111*clhs470 + clhs14*clhs488 + clhs486*rho + clhs486*tau2 + clhs494;
        lhs(4,5)=DN(1,0)*clhs125 + DN(1,1)*clhs127 + DN(1,2)*clhs130 + clhs10*clhs499 + clhs10*clhs500 + clhs10*clhs501 + clhs496 - clhs498*clhs62 + clhs498;
        lhs(4,6)=DN(1,0)*clhs141 + DN(1,1)*clhs143 + DN(1,2)*clhs145 + clhs10*clhs505 + clhs10*clhs506 + clhs10*clhs507 + clhs503 - clhs504*clhs62 + clhs504;
        lhs(4,7)=clhs10*clhs510 + clhs10*clhs511 + clhs10*clhs512 - clhs154*clhs470 - clhs38*clhs513 + clhs508*clhs81 - clhs508 + clhs509*clhs9;
        lhs(4,8)=DN(1,0)*clhs168 + DN(1,1)*clhs170 + DN(1,2)*clhs172 + clhs10*clhs522 + clhs11*clhs519 + clhs14*clhs520 + clhs177*clhs468 - clhs180*clhs470 + clhs515 + clhs516 + clhs518 + clhs521 + clhs524 + clhs526 + clhs528;
        lhs(4,9)=DN(1,0)*clhs194 + DN(1,1)*clhs196 + DN(1,2)*clhs199 + clhs10*clhs535 + clhs10*clhs536 + clhs10*clhs537 + clhs530 + clhs531 + clhs533 + clhs534;
        lhs(4,10)=DN(1,0)*clhs210 + DN(1,1)*clhs212 + DN(1,2)*clhs214 + clhs10*clhs543 + clhs10*clhs544 + clhs10*clhs545 + clhs538 + clhs539 + clhs541 + clhs542;
        lhs(4,11)=clhs10*clhs547 + clhs10*clhs548 + clhs10*clhs549 - clhs222*clhs470 + clhs546*clhs81 - clhs546 + clhs551;
        lhs(4,12)=DN(1,0)*clhs234 + DN(1,1)*clhs236 + DN(1,2)*clhs238 + clhs10*clhs559 + clhs11*clhs556 + clhs14*clhs557 + clhs243*clhs468 - clhs246*clhs470 + clhs553 + clhs554 + clhs555 + clhs558 + clhs561 + clhs563 + clhs565;
        lhs(4,13)=DN(1,0)*clhs260 + DN(1,1)*clhs262 + DN(1,2)*clhs265 + clhs10*clhs572 + clhs10*clhs573 + clhs10*clhs574 + clhs567 + clhs568 + clhs570 + clhs571;
        lhs(4,14)=DN(1,0)*clhs276 + DN(1,1)*clhs278 + DN(1,2)*clhs280 + clhs10*clhs580 + clhs10*clhs581 + clhs10*clhs582 + clhs575 + clhs576 + clhs578 + clhs579;
        lhs(4,15)=clhs10*clhs584 + clhs10*clhs585 + clhs10*clhs586 - clhs288*clhs470 + clhs583*clhs81 - clhs583 + clhs588;
        lhs(5,0)=DN(1,0)*clhs3 + DN(1,1)*clhs296 + DN(1,2)*clhs297 + clhs123 + clhs124 + clhs18*clhs469 + clhs18*clhs589 + clhs18*clhs590 + clhs317 + clhs320;
        lhs(5,1)=DN(1,0)*clhs54 + DN(1,1)*clhs302 + DN(1,2)*clhs304 + clhs106 + clhs18*clhs479 + clhs322 + clhs323 + clhs35*clhs591 + clhs46*clhs467 + clhs468*clhs63 - clhs470*clhs64 + clhs472 + clhs474 + clhs476 + clhs98;
        lhs(5,2)=DN(1,0)*clhs70 + DN(1,1)*clhs308 + DN(1,2)*clhs310 + clhs18*clhs480 + clhs18*clhs481 + clhs18*clhs482 + clhs330 + clhs404 + clhs405;
        lhs(5,3)=clhs18*clhs483 + clhs18*clhs484 + clhs18*clhs485 + clhs338 + clhs454*clhs81 - clhs454 - clhs470*clhs88;
        lhs(5,4)=DN(1,0)*clhs101 + DN(1,1)*clhs315 + DN(1,2)*clhs316 + clhs18*clhs489 + clhs18*clhs593 + clhs18*clhs594 + clhs496 - clhs592*clhs62 + clhs592;
        lhs(5,5)=DN(1,0)*clhs127 + DN(1,1)*clhs324 + DN(1,2)*clhs326 + clhs133*clhs468 - clhs134*clhs470 + clhs18*clhs501 + clhs35*clhs596 + clhs46*clhs488 + clhs494 + clhs595*rho + clhs595*tau2;
        lhs(5,6)=DN(1,0)*clhs143 + DN(1,1)*clhs334 + DN(1,2)*clhs336 + clhs18*clhs505 + clhs18*clhs506 + clhs18*clhs507 + clhs598 - clhs599*clhs62 + clhs599;
        lhs(5,7)=-clhs157*clhs470 + clhs17*clhs509 + clhs18*clhs510 + clhs18*clhs511 + clhs18*clhs512 - clhs43*clhs513 + clhs600*clhs81 - clhs600;
        lhs(5,8)=DN(1,0)*clhs170 + DN(1,1)*clhs341 + DN(1,2)*clhs342 + clhs18*clhs522 + clhs18*clhs604 + clhs18*clhs605 + clhs602 + clhs603 + clhs606;
        lhs(5,9)=DN(1,0)*clhs196 + DN(1,1)*clhs350 + DN(1,2)*clhs352 + clhs18*clhs537 + clhs202*clhs468 - clhs203*clhs470 + clhs35*clhs610 + clhs46*clhs520 + clhs608 + clhs609 + clhs611;
        lhs(5,10)=DN(1,0)*clhs212 + DN(1,1)*clhs360 + DN(1,2)*clhs362 + clhs18*clhs543 + clhs18*clhs544 + clhs18*clhs545 + clhs613 + clhs615 + clhs616;
        lhs(5,11)=clhs18*clhs547 + clhs18*clhs548 + clhs18*clhs549 - clhs224*clhs470 + clhs617*clhs81 - clhs617 + clhs618;
        lhs(5,12)=DN(1,0)*clhs236 + DN(1,1)*clhs367 + DN(1,2)*clhs368 + clhs18*clhs559 + clhs18*clhs622 + clhs18*clhs623 + clhs620 + clhs621 + clhs624;
        lhs(5,13)=DN(1,0)*clhs262 + DN(1,1)*clhs376 + DN(1,2)*clhs378 + clhs18*clhs574 + clhs268*clhs468 - clhs269*clhs470 + clhs35*clhs628 + clhs46*clhs557 + clhs626 + clhs627 + clhs629;
        lhs(5,14)=DN(1,0)*clhs278 + DN(1,1)*clhs386 + DN(1,2)*clhs388 + clhs18*clhs580 + clhs18*clhs581 + clhs18*clhs582 + clhs631 + clhs633 + clhs634;
        lhs(5,15)=clhs18*clhs584 + clhs18*clhs585 + clhs18*clhs586 - clhs290*clhs470 + clhs635*clhs81 - clhs635 + clhs636;
        lhs(6,0)=DN(1,0)*clhs5 + DN(1,1)*clhs297 + DN(1,2)*clhs391 + clhs139 + clhs140 + clhs20*clhs469 + clhs20*clhs589 + clhs20*clhs590 + clhs401 + clhs402;
        lhs(6,1)=DN(1,0)*clhs57 + DN(1,1)*clhs304 + DN(1,2)*clhs393 + clhs20*clhs477 + clhs20*clhs478 + clhs20*clhs479 + clhs332 + clhs333 + clhs407 + clhs408;
        lhs(6,2)=DN(1,0)*clhs72 + DN(1,1)*clhs310 + DN(1,2)*clhs396 + clhs106 + clhs20*clhs482 + clhs37*clhs591 + clhs410 + clhs411 + clhs42*clhs466 + clhs468*clhs76 - clhs470*clhs77 + clhs472 + clhs474 + clhs476 + clhs98;
        lhs(6,3)=clhs20*clhs483 + clhs20*clhs484 + clhs20*clhs485 + clhs414 + clhs455*clhs81 - clhs455 - clhs470*clhs91;
        lhs(6,4)=DN(1,0)*clhs103 + DN(1,1)*clhs316 + DN(1,2)*clhs400 + clhs20*clhs489 + clhs20*clhs593 + clhs20*clhs594 + clhs503 - clhs62*clhs637 + clhs637;
        lhs(6,5)=DN(1,0)*clhs130 + DN(1,1)*clhs326 + DN(1,2)*clhs406 + clhs20*clhs499 + clhs20*clhs500 + clhs20*clhs501 + clhs598 - clhs62*clhs638 + clhs638;
        lhs(6,6)=DN(1,0)*clhs145 + DN(1,1)*clhs336 + DN(1,2)*clhs412 + clhs148*clhs468 - clhs149*clhs470 + clhs20*clhs507 + clhs37*clhs596 + clhs42*clhs487 + clhs494 + clhs639*rho + clhs639*tau2;
        lhs(6,7)=-clhs160*clhs470 + clhs19*clhs509 + clhs20*clhs510 + clhs20*clhs511 + clhs20*clhs512 - clhs48*clhs513 + clhs640*clhs81 - clhs640;
        lhs(6,8)=DN(1,0)*clhs172 + DN(1,1)*clhs342 + DN(1,2)*clhs417 + clhs20*clhs522 + clhs20*clhs604 + clhs20*clhs605 + clhs642 + clhs643 + clhs644;
        lhs(6,9)=DN(1,0)*clhs199 + DN(1,1)*clhs352 + DN(1,2)*clhs423 + clhs20*clhs535 + clhs20*clhs536 + clhs20*clhs537 + clhs646 + clhs647 + clhs648 + clhs649;
        lhs(6,10)=DN(1,0)*clhs214 + DN(1,1)*clhs362 + DN(1,2)*clhs429 + clhs20*clhs545 + clhs217*clhs468 - clhs218*clhs470 + clhs37*clhs610 + clhs42*clhs519 + clhs611 + clhs651 + clhs652;
        lhs(6,11)=clhs20*clhs547 + clhs20*clhs548 + clhs20*clhs549 - clhs226*clhs470 + clhs653*clhs81 - clhs653 + clhs654;
        lhs(6,12)=DN(1,0)*clhs238 + DN(1,1)*clhs368 + DN(1,2)*clhs434 + clhs20*clhs559 + clhs20*clhs622 + clhs20*clhs623 + clhs656 + clhs657 + clhs658;
        lhs(6,13)=DN(1,0)*clhs265 + DN(1,1)*clhs378 + DN(1,2)*clhs440 + clhs20*clhs572 + clhs20*clhs573 + clhs20*clhs574 + clhs660 + clhs661 + clhs662 + clhs663;
        lhs(6,14)=DN(1,0)*clhs280 + DN(1,1)*clhs388 + DN(1,2)*clhs446 + clhs20*clhs582 + clhs283*clhs468 - clhs284*clhs470 + clhs37*clhs628 + clhs42*clhs556 + clhs629 + clhs665 + clhs666;
        lhs(6,15)=clhs20*clhs584 + clhs20*clhs585 + clhs20*clhs586 - clhs292*clhs470 + clhs667*clhs81 - clhs667 + clhs668;
        lhs(7,0)=clhs13*clhs475 + 2*clhs151 + clhs28*clhs669 + clhs473*clhs8;
        lhs(7,1)=2*clhs337 + clhs34*clhs471 + clhs45*clhs475 + clhs64*clhs670;
        lhs(7,2)=clhs36*clhs471 + clhs41*clhs473 + 2*clhs413 + clhs671*clhs77;
        lhs(7,3)=clhs457 + clhs669*clhs85 + clhs670*clhs88 + clhs671*clhs91;
        lhs(7,4)=clhs111*clhs669 + clhs13*clhs493 + clhs492*clhs8 + 2*clhs508;
        lhs(7,5)=clhs134*clhs670 + clhs34*clhs491 + clhs45*clhs493 + 2*clhs600;
        lhs(7,6)=clhs149*clhs671 + clhs36*clhs491 + clhs41*clhs492 + 2*clhs640;
        lhs(7,7)=clhs154*clhs669 + clhs157*clhs670 + clhs160*clhs671 + clhs452*clhs490;
        lhs(7,8)=clhs13*clhs527 + clhs180*clhs669 + clhs525*clhs8 + 2*clhs672;
        lhs(7,9)=clhs203*clhs670 + clhs34*clhs523 + clhs45*clhs527 + 2*clhs673;
        lhs(7,10)=clhs218*clhs671 + clhs36*clhs523 + clhs41*clhs525 + 2*clhs674;
        lhs(7,11)=clhs222*clhs669 + clhs224*clhs670 + clhs226*clhs671 + clhs676;
        lhs(7,12)=clhs13*clhs564 + clhs246*clhs669 + clhs562*clhs8 + 2*clhs677;
        lhs(7,13)=clhs269*clhs670 + clhs34*clhs560 + clhs45*clhs564 + 2*clhs678;
        lhs(7,14)=clhs284*clhs671 + clhs36*clhs560 + clhs41*clhs562 + 2*clhs679;
        lhs(7,15)=clhs288*clhs669 + clhs290*clhs670 + clhs292*clhs671 + clhs680;
        lhs(8,0)=DN(2,0)*clhs1 + DN(2,1)*clhs3 + DN(2,2)*clhs5 + clhs10*clhs684 + clhs11*clhs681 + clhs14*clhs682 + clhs165 + clhs166 + clhs167 + clhs175 + clhs22*clhs683 - clhs28*clhs685 + clhs687 + clhs689 + clhs691;
        lhs(8,1)=DN(2,0)*clhs52 + DN(2,1)*clhs54 + DN(2,2)*clhs57 + clhs10*clhs692 + clhs10*clhs693 + clhs10*clhs694 + clhs189 + clhs190 + clhs340;
        lhs(8,2)=DN(2,0)*clhs68 + DN(2,1)*clhs70 + DN(2,2)*clhs72 + clhs10*clhs695 + clhs10*clhs696 + clhs10*clhs697 + clhs205 + clhs206 + clhs416;
        lhs(8,3)=clhs10*clhs698 + clhs10*clhs699 + clhs10*clhs700 + clhs229 + clhs458*clhs81 - clhs458 - clhs685*clhs85;
        lhs(8,4)=DN(2,0)*clhs99 + DN(2,1)*clhs101 + DN(2,2)*clhs103 + clhs10*clhs703 + clhs108*clhs683 + clhs11*clhs701 - clhs111*clhs685 + clhs14*clhs702 + clhs515 + clhs516 + clhs518 + clhs521 + clhs705 + clhs707 + clhs709;
        lhs(8,5)=DN(2,0)*clhs125 + DN(2,1)*clhs127 + DN(2,2)*clhs130 + clhs10*clhs710 + clhs10*clhs711 + clhs10*clhs712 + clhs530 + clhs531 + clhs602;
        lhs(8,6)=DN(2,0)*clhs141 + DN(2,1)*clhs143 + DN(2,2)*clhs145 + clhs10*clhs713 + clhs10*clhs714 + clhs10*clhs715 + clhs538 + clhs539 + clhs642;
        lhs(8,7)=clhs10*clhs716 + clhs10*clhs717 + clhs10*clhs718 - clhs154*clhs685 + clhs551 + clhs672*clhs81 - clhs672;
        lhs(8,8)=DN(2,0)*clhs168 + DN(2,1)*clhs170 + DN(2,2)*clhs172 + clhs10*clhs722 + clhs11*clhs720 + clhs14*clhs721 + clhs177*clhs683 - clhs180*clhs685 + clhs719*rho + clhs719*tau2 + clhs727;
        lhs(8,9)=DN(2,0)*clhs194 + DN(2,1)*clhs196 + DN(2,2)*clhs199 + clhs10*clhs732 + clhs10*clhs733 + clhs10*clhs734 - clhs62*clhs731 + clhs729 + clhs731;
        lhs(8,10)=DN(2,0)*clhs210 + DN(2,1)*clhs212 + DN(2,2)*clhs214 + clhs10*clhs738 + clhs10*clhs739 + clhs10*clhs740 - clhs62*clhs737 + clhs736 + clhs737;
        lhs(8,11)=clhs10*clhs743 + clhs10*clhs744 + clhs10*clhs745 - clhs222*clhs685 - clhs38*clhs746 + clhs741*clhs81 - clhs741 + clhs742*clhs9;
        lhs(8,12)=DN(2,0)*clhs234 + DN(2,1)*clhs236 + DN(2,2)*clhs238 + clhs10*clhs755 + clhs11*clhs752 + clhs14*clhs753 + clhs243*clhs683 - clhs246*clhs685 + clhs748 + clhs749 + clhs751 + clhs754 + clhs757 + clhs759 + clhs761;
        lhs(8,13)=DN(2,0)*clhs260 + DN(2,1)*clhs262 + DN(2,2)*clhs265 + clhs10*clhs768 + clhs10*clhs769 + clhs10*clhs770 + clhs763 + clhs764 + clhs766 + clhs767;
        lhs(8,14)=DN(2,0)*clhs276 + DN(2,1)*clhs278 + DN(2,2)*clhs280 + clhs10*clhs776 + clhs10*clhs777 + clhs10*clhs778 + clhs771 + clhs772 + clhs774 + clhs775;
        lhs(8,15)=clhs10*clhs780 + clhs10*clhs781 + clhs10*clhs782 - clhs288*clhs685 + clhs779*clhs81 - clhs779 + clhs785;
        lhs(9,0)=DN(2,0)*clhs3 + DN(2,1)*clhs296 + DN(2,2)*clhs297 + clhs18*clhs684 + clhs18*clhs786 + clhs18*clhs787 + clhs192 + clhs193 + clhs343 + clhs346;
        lhs(9,1)=DN(2,0)*clhs54 + DN(2,1)*clhs302 + DN(2,2)*clhs304 + clhs167 + clhs175 + clhs18*clhs694 + clhs348 + clhs349 + clhs35*clhs788 + clhs46*clhs682 + clhs63*clhs683 - clhs64*clhs685 + clhs687 + clhs689 + clhs691;
        lhs(9,2)=DN(2,0)*clhs70 + DN(2,1)*clhs308 + DN(2,2)*clhs310 + clhs18*clhs695 + clhs18*clhs696 + clhs18*clhs697 + clhs356 + clhs421 + clhs422;
        lhs(9,3)=clhs18*clhs698 + clhs18*clhs699 + clhs18*clhs700 + clhs364 + clhs459*clhs81 - clhs459 - clhs685*clhs88;
        lhs(9,4)=DN(2,0)*clhs101 + DN(2,1)*clhs315 + DN(2,2)*clhs316 + clhs18*clhs703 + clhs18*clhs789 + clhs18*clhs790 + clhs533 + clhs534 + clhs603 + clhs606;
        lhs(9,5)=DN(2,0)*clhs127 + DN(2,1)*clhs324 + DN(2,2)*clhs326 + clhs133*clhs683 - clhs134*clhs685 + clhs18*clhs712 + clhs35*clhs791 + clhs46*clhs702 + clhs518 + clhs521 + clhs608 + clhs609 + clhs705 + clhs707 + clhs709;
        lhs(9,6)=DN(2,0)*clhs143 + DN(2,1)*clhs334 + DN(2,2)*clhs336 + clhs18*clhs713 + clhs18*clhs714 + clhs18*clhs715 + clhs613 + clhs646 + clhs647;
        lhs(9,7)=-clhs157*clhs685 + clhs18*clhs716 + clhs18*clhs717 + clhs18*clhs718 + clhs618 + clhs673*clhs81 - clhs673;
        lhs(9,8)=DN(2,0)*clhs170 + DN(2,1)*clhs341 + DN(2,2)*clhs342 + clhs18*clhs722 + clhs18*clhs793 + clhs18*clhs794 - clhs62*clhs792 + clhs729 + clhs792;
        lhs(9,9)=DN(2,0)*clhs196 + DN(2,1)*clhs350 + DN(2,2)*clhs352 + clhs18*clhs734 + clhs202*clhs683 - clhs203*clhs685 + clhs35*clhs796 + clhs46*clhs721 + clhs727 + clhs795*rho + clhs795*tau2;
        lhs(9,10)=DN(2,0)*clhs212 + DN(2,1)*clhs360 + DN(2,2)*clhs362 + clhs18*clhs738 + clhs18*clhs739 + clhs18*clhs740 - clhs62*clhs799 + clhs798 + clhs799;
        lhs(9,11)=clhs17*clhs742 + clhs18*clhs743 + clhs18*clhs744 + clhs18*clhs745 - clhs224*clhs685 - clhs43*clhs746 + clhs800*clhs81 - clhs800;
        lhs(9,12)=DN(2,0)*clhs236 + DN(2,1)*clhs367 + DN(2,2)*clhs368 + clhs18*clhs755 + clhs18*clhs804 + clhs18*clhs805 + clhs802 + clhs803 + clhs806;
        lhs(9,13)=DN(2,0)*clhs262 + DN(2,1)*clhs376 + DN(2,2)*clhs378 + clhs18*clhs770 + clhs268*clhs683 - clhs269*clhs685 + clhs35*clhs810 + clhs46*clhs753 + clhs808 + clhs809 + clhs811;
        lhs(9,14)=DN(2,0)*clhs278 + DN(2,1)*clhs386 + DN(2,2)*clhs388 + clhs18*clhs776 + clhs18*clhs777 + clhs18*clhs778 + clhs813 + clhs815 + clhs816;
        lhs(9,15)=clhs18*clhs780 + clhs18*clhs781 + clhs18*clhs782 - clhs290*clhs685 + clhs81*clhs817 - clhs817 + clhs818;
        lhs(10,0)=DN(2,0)*clhs5 + DN(2,1)*clhs297 + DN(2,2)*clhs391 + clhs20*clhs684 + clhs20*clhs786 + clhs20*clhs787 + clhs208 + clhs209 + clhs418 + clhs419;
        lhs(10,1)=DN(2,0)*clhs57 + DN(2,1)*clhs304 + DN(2,2)*clhs393 + clhs20*clhs692 + clhs20*clhs693 + clhs20*clhs694 + clhs358 + clhs359 + clhs424 + clhs425;
        lhs(10,2)=DN(2,0)*clhs72 + DN(2,1)*clhs310 + DN(2,2)*clhs396 + clhs167 + clhs175 + clhs20*clhs697 + clhs37*clhs788 + clhs42*clhs681 + clhs427 + clhs428 + clhs683*clhs76 - clhs685*clhs77 + clhs687 + clhs689 + clhs691;
        lhs(10,3)=clhs20*clhs698 + clhs20*clhs699 + clhs20*clhs700 + clhs431 + clhs460*clhs81 - clhs460 - clhs685*clhs91;
        lhs(10,4)=DN(2,0)*clhs103 + DN(2,1)*clhs316 + DN(2,2)*clhs400 + clhs20*clhs703 + clhs20*clhs789 + clhs20*clhs790 + clhs541 + clhs542 + clhs643 + clhs644;
        lhs(10,5)=DN(2,0)*clhs130 + DN(2,1)*clhs326 + DN(2,2)*clhs406 + clhs20*clhs710 + clhs20*clhs711 + clhs20*clhs712 + clhs615 + clhs616 + clhs648 + clhs649;
        lhs(10,6)=DN(2,0)*clhs145 + DN(2,1)*clhs336 + DN(2,2)*clhs412 + clhs148*clhs683 - clhs149*clhs685 + clhs20*clhs715 + clhs37*clhs791 + clhs42*clhs701 + clhs518 + clhs521 + clhs651 + clhs652 + clhs705 + clhs707 + clhs709;
        lhs(10,7)=-clhs160*clhs685 + clhs20*clhs716 + clhs20*clhs717 + clhs20*clhs718 + clhs654 + clhs674*clhs81 - clhs674;
        lhs(10,8)=DN(2,0)*clhs172 + DN(2,1)*clhs342 + DN(2,2)*clhs417 + clhs20*clhs722 + clhs20*clhs793 + clhs20*clhs794 - clhs62*clhs819 + clhs736 + clhs819;
        lhs(10,9)=DN(2,0)*clhs199 + DN(2,1)*clhs352 + DN(2,2)*clhs423 + clhs20*clhs732 + clhs20*clhs733 + clhs20*clhs734 - clhs62*clhs820 + clhs798 + clhs820;
        lhs(10,10)=DN(2,0)*clhs214 + DN(2,1)*clhs362 + DN(2,2)*clhs429 + clhs20*clhs740 + clhs217*clhs683 - clhs218*clhs685 + clhs37*clhs796 + clhs42*clhs720 + clhs727 + clhs821*rho + clhs821*tau2;
        lhs(10,11)=clhs19*clhs742 + clhs20*clhs743 + clhs20*clhs744 + clhs20*clhs745 - clhs226*clhs685 - clhs48*clhs746 + clhs81*clhs822 - clhs822;
        lhs(10,12)=DN(2,0)*clhs238 + DN(2,1)*clhs368 + DN(2,2)*clhs434 + clhs20*clhs755 + clhs20*clhs804 + clhs20*clhs805 + clhs824 + clhs825 + clhs826;
        lhs(10,13)=DN(2,0)*clhs265 + DN(2,1)*clhs378 + DN(2,2)*clhs440 + clhs20*clhs768 + clhs20*clhs769 + clhs20*clhs770 + clhs828 + clhs829 + clhs830 + clhs831;
        lhs(10,14)=DN(2,0)*clhs280 + DN(2,1)*clhs388 + DN(2,2)*clhs446 + clhs20*clhs778 + clhs283*clhs683 - clhs284*clhs685 + clhs37*clhs810 + clhs42*clhs752 + clhs811 + clhs833 + clhs834;
        lhs(10,15)=clhs20*clhs780 + clhs20*clhs781 + clhs20*clhs782 - clhs292*clhs685 + clhs81*clhs835 - clhs835 + clhs836;
        lhs(11,0)=clhs13*clhs690 + 2*clhs220 + clhs28*clhs837 + clhs688*clhs8;
        lhs(11,1)=clhs34*clhs686 + 2*clhs363 + clhs45*clhs690 + clhs64*clhs838;
        lhs(11,2)=clhs36*clhs686 + clhs41*clhs688 + 2*clhs430 + clhs77*clhs839;
        lhs(11,3)=clhs461 + clhs837*clhs85 + clhs838*clhs88 + clhs839*clhs91;
        lhs(11,4)=clhs111*clhs837 + clhs13*clhs708 + 2*clhs546 + clhs706*clhs8;
        lhs(11,5)=clhs134*clhs838 + clhs34*clhs704 + clhs45*clhs708 + 2*clhs617;
        lhs(11,6)=clhs149*clhs839 + clhs36*clhs704 + clhs41*clhs706 + 2*clhs653;
        lhs(11,7)=clhs154*clhs837 + clhs157*clhs838 + clhs160*clhs839 + clhs676;
        lhs(11,8)=clhs13*clhs726 + clhs180*clhs837 + clhs725*clhs8 + 2*clhs741;
        lhs(11,9)=clhs203*clhs838 + clhs34*clhs724 + clhs45*clhs726 + 2*clhs800;
        lhs(11,10)=clhs218*clhs839 + clhs36*clhs724 + clhs41*clhs725 + 2*clhs822;
        lhs(11,11)=clhs222*clhs837 + clhs224*clhs838 + clhs226*clhs839 + clhs452*clhs723;
        lhs(11,12)=clhs13*clhs760 + clhs246*clhs837 + clhs758*clhs8 + 2*clhs840;
        lhs(11,13)=clhs269*clhs838 + clhs34*clhs756 + clhs45*clhs760 + 2*clhs841;
        lhs(11,14)=clhs284*clhs839 + clhs36*clhs756 + clhs41*clhs758 + 2*clhs842;
        lhs(11,15)=clhs288*clhs837 + clhs290*clhs838 + clhs292*clhs839 + clhs843;
        lhs(12,0)=DN(3,0)*clhs1 + DN(3,1)*clhs3 + DN(3,2)*clhs5 + clhs10*clhs847 + clhs11*clhs844 + clhs14*clhs845 + clhs22*clhs846 + clhs231 + clhs232 + clhs233 + clhs241 - clhs28*clhs848 + clhs850 + clhs852 + clhs854;
        lhs(12,1)=DN(3,0)*clhs52 + DN(3,1)*clhs54 + DN(3,2)*clhs57 + clhs10*clhs855 + clhs10*clhs856 + clhs10*clhs857 + clhs255 + clhs256 + clhs366;
        lhs(12,2)=DN(3,0)*clhs68 + DN(3,1)*clhs70 + DN(3,2)*clhs72 + clhs10*clhs858 + clhs10*clhs859 + clhs10*clhs860 + clhs271 + clhs272 + clhs433;
        lhs(12,3)=clhs10*clhs861 + clhs10*clhs862 + clhs10*clhs863 + clhs295 + clhs462*clhs81 - clhs462 - clhs848*clhs85;
        lhs(12,4)=DN(3,0)*clhs99 + DN(3,1)*clhs101 + DN(3,2)*clhs103 + clhs10*clhs866 + clhs108*clhs846 + clhs11*clhs864 - clhs111*clhs848 + clhs14*clhs865 + clhs553 + clhs554 + clhs555 + clhs558 + clhs868 + clhs870 + clhs872;
        lhs(12,5)=DN(3,0)*clhs125 + DN(3,1)*clhs127 + DN(3,2)*clhs130 + clhs10*clhs873 + clhs10*clhs874 + clhs10*clhs875 + clhs567 + clhs568 + clhs620;
        lhs(12,6)=DN(3,0)*clhs141 + DN(3,1)*clhs143 + DN(3,2)*clhs145 + clhs10*clhs876 + clhs10*clhs877 + clhs10*clhs878 + clhs575 + clhs576 + clhs656;
        lhs(12,7)=clhs10*clhs879 + clhs10*clhs880 + clhs10*clhs881 - clhs154*clhs848 + clhs588 + clhs677*clhs81 - clhs677;
        lhs(12,8)=DN(3,0)*clhs168 + DN(3,1)*clhs170 + DN(3,2)*clhs172 + clhs10*clhs884 + clhs11*clhs882 + clhs14*clhs883 + clhs177*clhs846 - clhs180*clhs848 + clhs748 + clhs749 + clhs751 + clhs754 + clhs886 + clhs888 + clhs890;
        lhs(12,9)=DN(3,0)*clhs194 + DN(3,1)*clhs196 + DN(3,2)*clhs199 + clhs10*clhs891 + clhs10*clhs892 + clhs10*clhs893 + clhs763 + clhs764 + clhs802;
        lhs(12,10)=DN(3,0)*clhs210 + DN(3,1)*clhs212 + DN(3,2)*clhs214 + clhs10*clhs894 + clhs10*clhs895 + clhs10*clhs896 + clhs771 + clhs772 + clhs824;
        lhs(12,11)=clhs10*clhs897 + clhs10*clhs898 + clhs10*clhs899 - clhs222*clhs848 + clhs785 + clhs81*clhs840 - clhs840;
        lhs(12,12)=DN(3,0)*clhs234 + DN(3,1)*clhs236 + DN(3,2)*clhs238 + clhs10*clhs903 + clhs11*clhs901 + clhs14*clhs902 + clhs243*clhs846 - clhs246*clhs848 + clhs900*rho + clhs900*tau2 + clhs908;
        lhs(12,13)=DN(3,0)*clhs260 + DN(3,1)*clhs262 + DN(3,2)*clhs265 + clhs10*clhs913 + clhs10*clhs914 + clhs10*clhs915 - clhs62*clhs912 + clhs910 + clhs912;
        lhs(12,14)=DN(3,0)*clhs276 + DN(3,1)*clhs278 + DN(3,2)*clhs280 + clhs10*clhs919 + clhs10*clhs920 + clhs10*clhs921 - clhs62*clhs918 + clhs917 + clhs918;
        lhs(12,15)=clhs10*clhs924 + clhs10*clhs925 + clhs10*clhs926 - clhs288*clhs848 - clhs38*clhs927 + clhs81*clhs922 + clhs9*clhs923 - clhs922;
        lhs(13,0)=DN(3,0)*clhs3 + DN(3,1)*clhs296 + DN(3,2)*clhs297 + clhs18*clhs847 + clhs18*clhs928 + clhs18*clhs929 + clhs258 + clhs259 + clhs369 + clhs372;
        lhs(13,1)=DN(3,0)*clhs54 + DN(3,1)*clhs302 + DN(3,2)*clhs304 + clhs18*clhs857 + clhs233 + clhs241 + clhs35*clhs930 + clhs374 + clhs375 + clhs46*clhs845 + clhs63*clhs846 - clhs64*clhs848 + clhs850 + clhs852 + clhs854;
        lhs(13,2)=DN(3,0)*clhs70 + DN(3,1)*clhs308 + DN(3,2)*clhs310 + clhs18*clhs858 + clhs18*clhs859 + clhs18*clhs860 + clhs382 + clhs438 + clhs439;
        lhs(13,3)=clhs18*clhs861 + clhs18*clhs862 + clhs18*clhs863 + clhs390 + clhs463*clhs81 - clhs463 - clhs848*clhs88;
        lhs(13,4)=DN(3,0)*clhs101 + DN(3,1)*clhs315 + DN(3,2)*clhs316 + clhs18*clhs866 + clhs18*clhs931 + clhs18*clhs932 + clhs570 + clhs571 + clhs621 + clhs624;
        lhs(13,5)=DN(3,0)*clhs127 + DN(3,1)*clhs324 + DN(3,2)*clhs326 + clhs133*clhs846 - clhs134*clhs848 + clhs18*clhs875 + clhs35*clhs933 + clhs46*clhs865 + clhs555 + clhs558 + clhs626 + clhs627 + clhs868 + clhs870 + clhs872;
        lhs(13,6)=DN(3,0)*clhs143 + DN(3,1)*clhs334 + DN(3,2)*clhs336 + clhs18*clhs876 + clhs18*clhs877 + clhs18*clhs878 + clhs631 + clhs660 + clhs661;
        lhs(13,7)=-clhs157*clhs848 + clhs18*clhs879 + clhs18*clhs880 + clhs18*clhs881 + clhs636 + clhs678*clhs81 - clhs678;
        lhs(13,8)=DN(3,0)*clhs170 + DN(3,1)*clhs341 + DN(3,2)*clhs342 + clhs18*clhs884 + clhs18*clhs934 + clhs18*clhs935 + clhs766 + clhs767 + clhs803 + clhs806;
        lhs(13,9)=DN(3,0)*clhs196 + DN(3,1)*clhs350 + DN(3,2)*clhs352 + clhs18*clhs893 + clhs202*clhs846 - clhs203*clhs848 + clhs35*clhs936 + clhs46*clhs883 + clhs751 + clhs754 + clhs808 + clhs809 + clhs886 + clhs888 + clhs890;
        lhs(13,10)=DN(3,0)*clhs212 + DN(3,1)*clhs360 + DN(3,2)*clhs362 + clhs18*clhs894 + clhs18*clhs895 + clhs18*clhs896 + clhs813 + clhs828 + clhs829;
        lhs(13,11)=clhs18*clhs897 + clhs18*clhs898 + clhs18*clhs899 - clhs224*clhs848 + clhs81*clhs841 + clhs818 - clhs841;
        lhs(13,12)=DN(3,0)*clhs236 + DN(3,1)*clhs367 + DN(3,2)*clhs368 + clhs18*clhs903 + clhs18*clhs938 + clhs18*clhs939 - clhs62*clhs937 + clhs910 + clhs937;
        lhs(13,13)=DN(3,0)*clhs262 + DN(3,1)*clhs376 + DN(3,2)*clhs378 + clhs18*clhs915 + clhs268*clhs846 - clhs269*clhs848 + clhs35*clhs941 + clhs46*clhs902 + clhs908 + clhs940*rho + clhs940*tau2;
        lhs(13,14)=DN(3,0)*clhs278 + DN(3,1)*clhs386 + DN(3,2)*clhs388 + clhs18*clhs919 + clhs18*clhs920 + clhs18*clhs921 - clhs62*clhs944 + clhs943 + clhs944;
        lhs(13,15)=clhs17*clhs923 + clhs18*clhs924 + clhs18*clhs925 + clhs18*clhs926 - clhs290*clhs848 - clhs43*clhs927 + clhs81*clhs945 - clhs945;
        lhs(14,0)=DN(3,0)*clhs5 + DN(3,1)*clhs297 + DN(3,2)*clhs391 + clhs20*clhs847 + clhs20*clhs928 + clhs20*clhs929 + clhs274 + clhs275 + clhs435 + clhs436;
        lhs(14,1)=DN(3,0)*clhs57 + DN(3,1)*clhs304 + DN(3,2)*clhs393 + clhs20*clhs855 + clhs20*clhs856 + clhs20*clhs857 + clhs384 + clhs385 + clhs441 + clhs442;
        lhs(14,2)=DN(3,0)*clhs72 + DN(3,1)*clhs310 + DN(3,2)*clhs396 + clhs20*clhs860 + clhs233 + clhs241 + clhs37*clhs930 + clhs42*clhs844 + clhs444 + clhs445 + clhs76*clhs846 - clhs77*clhs848 + clhs850 + clhs852 + clhs854;
        lhs(14,3)=clhs20*clhs861 + clhs20*clhs862 + clhs20*clhs863 + clhs448 + clhs464*clhs81 - clhs464 - clhs848*clhs91;
        lhs(14,4)=DN(3,0)*clhs103 + DN(3,1)*clhs316 + DN(3,2)*clhs400 + clhs20*clhs866 + clhs20*clhs931 + clhs20*clhs932 + clhs578 + clhs579 + clhs657 + clhs658;
        lhs(14,5)=DN(3,0)*clhs130 + DN(3,1)*clhs326 + DN(3,2)*clhs406 + clhs20*clhs873 + clhs20*clhs874 + clhs20*clhs875 + clhs633 + clhs634 + clhs662 + clhs663;
        lhs(14,6)=DN(3,0)*clhs145 + DN(3,1)*clhs336 + DN(3,2)*clhs412 + clhs148*clhs846 - clhs149*clhs848 + clhs20*clhs878 + clhs37*clhs933 + clhs42*clhs864 + clhs555 + clhs558 + clhs665 + clhs666 + clhs868 + clhs870 + clhs872;
        lhs(14,7)=-clhs160*clhs848 + clhs20*clhs879 + clhs20*clhs880 + clhs20*clhs881 + clhs668 + clhs679*clhs81 - clhs679;
        lhs(14,8)=DN(3,0)*clhs172 + DN(3,1)*clhs342 + DN(3,2)*clhs417 + clhs20*clhs884 + clhs20*clhs934 + clhs20*clhs935 + clhs774 + clhs775 + clhs825 + clhs826;
        lhs(14,9)=DN(3,0)*clhs199 + DN(3,1)*clhs352 + DN(3,2)*clhs423 + clhs20*clhs891 + clhs20*clhs892 + clhs20*clhs893 + clhs815 + clhs816 + clhs830 + clhs831;
        lhs(14,10)=DN(3,0)*clhs214 + DN(3,1)*clhs362 + DN(3,2)*clhs429 + clhs20*clhs896 + clhs217*clhs846 - clhs218*clhs848 + clhs37*clhs936 + clhs42*clhs882 + clhs751 + clhs754 + clhs833 + clhs834 + clhs886 + clhs888 + clhs890;
        lhs(14,11)=clhs20*clhs897 + clhs20*clhs898 + clhs20*clhs899 - clhs226*clhs848 + clhs81*clhs842 + clhs836 - clhs842;
        lhs(14,12)=DN(3,0)*clhs238 + DN(3,1)*clhs368 + DN(3,2)*clhs434 + clhs20*clhs903 + clhs20*clhs938 + clhs20*clhs939 - clhs62*clhs946 + clhs917 + clhs946;
        lhs(14,13)=DN(3,0)*clhs265 + DN(3,1)*clhs378 + DN(3,2)*clhs440 + clhs20*clhs913 + clhs20*clhs914 + clhs20*clhs915 - clhs62*clhs947 + clhs943 + clhs947;
        lhs(14,14)=DN(3,0)*clhs280 + DN(3,1)*clhs388 + DN(3,2)*clhs446 + clhs20*clhs921 + clhs283*clhs846 - clhs284*clhs848 + clhs37*clhs941 + clhs42*clhs901 + clhs908 + clhs948*rho + clhs948*tau2;
        lhs(14,15)=clhs19*clhs923 + clhs20*clhs924 + clhs20*clhs925 + clhs20*clhs926 - clhs292*clhs848 - clhs48*clhs927 + clhs81*clhs949 - clhs949;
        lhs(15,0)=clhs13*clhs853 + clhs28*clhs950 + 2*clhs286 + clhs8*clhs851;
        lhs(15,1)=clhs34*clhs849 + 2*clhs389 + clhs45*clhs853 + clhs64*clhs951;
        lhs(15,2)=clhs36*clhs849 + clhs41*clhs851 + 2*clhs447 + clhs77*clhs952;
        lhs(15,3)=clhs465 + clhs85*clhs950 + clhs88*clhs951 + clhs91*clhs952;
        lhs(15,4)=clhs111*clhs950 + clhs13*clhs871 + 2*clhs583 + clhs8*clhs869;
        lhs(15,5)=clhs134*clhs951 + clhs34*clhs867 + clhs45*clhs871 + 2*clhs635;
        lhs(15,6)=clhs149*clhs952 + clhs36*clhs867 + clhs41*clhs869 + 2*clhs667;
        lhs(15,7)=clhs154*clhs950 + clhs157*clhs951 + clhs160*clhs952 + clhs680;
        lhs(15,8)=clhs13*clhs889 + clhs180*clhs950 + 2*clhs779 + clhs8*clhs887;
        lhs(15,9)=clhs203*clhs951 + clhs34*clhs885 + clhs45*clhs889 + 2*clhs817;
        lhs(15,10)=clhs218*clhs952 + clhs36*clhs885 + clhs41*clhs887 + 2*clhs835;
        lhs(15,11)=clhs222*clhs950 + clhs224*clhs951 + clhs226*clhs952 + clhs843;
        lhs(15,12)=clhs13*clhs907 + clhs246*clhs950 + clhs8*clhs906 + 2*clhs922;
        lhs(15,13)=clhs269*clhs951 + clhs34*clhs905 + clhs45*clhs907 + 2*clhs945;
        lhs(15,14)=clhs284*clhs952 + clhs36*clhs905 + clhs41*clhs906 + 2*clhs949;
        lhs(15,15)=clhs288*clhs950 + clhs290*clhs951 + clhs292*clhs952 + clhs452*clhs904;

}


template<>
void NavierStokes<2>::ComputeGaussPointLHSContribution(bounded_matrix<double,9,9>& lhs, const ElementDataStruct& data)
{
    const int nnodes = 3;
    const int dim = 2;
    //~ const int strain_size = 3;

    const double rho = inner_prod(data.N, data.rho);        // Density
    const double mu = inner_prod(data.N, data.mu);          // Dynamic viscosity
    const double h = data.h;                                // Characteristic element size
    const double c = data.c;                                // Wave velocity

    const double& bdf0 = data.bdf0;
    const double& bdf1 = data.bdf1;
    const double& bdf2 = data.bdf2;
    const double& delta_t = data.delta_t;
    const double& dyn_tau_coeff = data.dyn_tau_coeff;

    const bounded_matrix<double,nnodes,dim>& v = data.v;
    const bounded_matrix<double,nnodes,dim>& vn = data.vn;
    const bounded_matrix<double,nnodes,dim>& vnn = data.vnn;
    const bounded_matrix<double,nnodes,dim>& vmesh = data.vmesh;
    const bounded_matrix<double,nnodes,dim>& vconv = v - vmesh;
    const bounded_matrix<double,nnodes,dim>& f = data.f;
    const array_1d<double,nnodes>& p = data.p;
    const array_1d<double,nnodes>& pn = data.pn;
    const array_1d<double,nnodes>& pnn = data.pnn;
    //~ const array_1d<double,strain_size>& stress = data.stress;

    // Get constitutive matrix
    const Matrix& C = data.C;

    // Get shape function values
    const array_1d<double,nnodes>& N = data.N;
    const bounded_matrix<double,nnodes,dim>& DN = data.DN_DX;

    const array_1d<double,dim> vconv_gauss = prod(trans(vconv), N);

    const double vconv_norm = norm_2(vconv_gauss);

    // Stabilization parameters
    const double c1 = 4.0;
    const double c2 = 2.0;
    const double tau1 = 1.0/((rho*dyn_tau_coeff)/delta_t + (c2*rho*vconv_norm)/h + (c1*mu)/(h*h));
    const double tau2 = (h*h)/(c1*tau1);

    const double clhs0 =             pow(N[0], 2);
        const double clhs1 =             bdf0*rho;
        const double clhs2 =             pow(c, -2);
        const double clhs3 =             N[0]*(bdf0*p[0] + bdf1*pn[0] + bdf2*pnn[0]) + N[1]*(bdf0*p[1] + bdf1*pn[1] + bdf2*pnn[1]) + N[2]*(bdf0*p[2] + bdf1*pn[2] + bdf2*pnn[2]);
        const double clhs4 =             clhs2*clhs3;
        const double clhs5 =             DN(0,0)*N[0];
        const double clhs6 =             N[0]*v(0,0) + N[1]*v(1,0) + N[2]*v(2,0);
        const double clhs7 =             DN(0,0)*v(0,0) + DN(1,0)*v(1,0) + DN(2,0)*v(2,0);
        const double clhs8 =             -N[0]*vmesh(0,0) - N[1]*vmesh(1,0) - N[2]*vmesh(2,0) + clhs6;
        const double clhs9 =             DN(0,1)*v(0,0) + DN(1,1)*v(1,0) + DN(2,1)*v(2,0);
        const double clhs10 =             N[0]*v(0,1) + N[1]*v(1,1) + N[2]*v(2,1);
        const double clhs11 =             -N[0]*vmesh(0,1) - N[1]*vmesh(1,1) - N[2]*vmesh(2,1) + clhs10;
        const double clhs12 =             clhs11*clhs9;
        const double clhs13 =             DN(0,0)*p[0] + DN(1,0)*p[1] + DN(2,0)*p[2] + clhs4*clhs6 - rho*(N[0]*f(0,0) + N[1]*f(1,0) + N[2]*f(2,0)) + rho*(N[0]*(bdf0*v(0,0) + bdf1*vn(0,0) + bdf2*vnn(0,0)) + N[1]*(bdf0*v(1,0) + bdf1*vn(1,0) + bdf2*vnn(1,0)) + N[2]*(bdf0*v(2,0) + bdf1*vn(2,0) + bdf2*vnn(2,0)) + clhs12 + clhs7*clhs8);
        const double clhs14 =             clhs13*rho*tau1;
        const double clhs15 =             DN(0,1)*N[0];
        const double clhs16 =             DN(0,0)*v(0,1) + DN(1,0)*v(1,1) + DN(2,0)*v(2,1);
        const double clhs17 =             clhs16*clhs8;
        const double clhs18 =             DN(0,1)*v(0,1) + DN(1,1)*v(1,1) + DN(2,1)*v(2,1);
        const double clhs19 =             DN(0,1)*p[0] + DN(1,1)*p[1] + DN(2,1)*p[2] + clhs10*clhs4 - rho*(N[0]*f(0,1) + N[1]*f(1,1) + N[2]*f(2,1)) + rho*(N[0]*(bdf0*v(0,1) + bdf1*vn(0,1) + bdf2*vnn(0,1)) + N[1]*(bdf0*v(1,1) + bdf1*vn(1,1) + bdf2*vnn(1,1)) + N[2]*(bdf0*v(2,1) + bdf1*vn(2,1) + bdf2*vnn(2,1)) + clhs11*clhs18 + clhs17);
        const double clhs20 =             clhs19*rho*tau1;
        const double clhs21 =             clhs0*clhs1 + clhs0*clhs4 + clhs14*clhs5 + clhs15*clhs20;
        const double clhs22 =             pow(DN(0,0), 2);
        const double clhs23 =             C(0,0)*DN(0,0) + C(0,2)*DN(0,1);
        const double clhs24 =             C(0,2)*DN(0,0);
        const double clhs25 =             C(2,2)*DN(0,1) + clhs24;
        const double clhs26 =             pow(rho, 2);
        const double clhs27 =             DN(0,1)*N[0]*clhs26*tau1;
        const double clhs28 =             N[0]*rho;
        const double clhs29 =             DN(0,0)*clhs8 + DN(0,1)*clhs11;
        const double clhs30 =             N[0]*clhs7 + clhs29;
        const double clhs31 =             N[0]*clhs4;
        const double clhs32 =             N[0]*bdf0;
        const double clhs33 =             clhs31 + rho*(clhs30 + clhs32);
        const double clhs34 =             DN(0,0)*clhs33*rho*tau1;
        const double clhs35 =             N[0]*clhs2*clhs3*tau1;
        const double clhs36 =             DN(0,0)*DN(0,1);
        const double clhs37 =             clhs36*rho + clhs36*tau2;
        const double clhs38 =             C(0,1)*DN(0,1) + clhs24;
        const double clhs39 =             C(1,2)*DN(0,1);
        const double clhs40 =             C(2,2)*DN(0,0) + clhs39;
        const double clhs41 =             clhs0*rho;
        const double clhs42 =             clhs41*clhs9;
        const double clhs43 =             DN(0,0)*N[0]*clhs26*tau1;
        const double clhs44 =             clhs8*clhs9;
        const double clhs45 =             clhs2*clhs3*tau1;
        const double clhs46 =             N[0]*clhs18 + clhs29;
        const double clhs47 =             clhs31 + rho*(clhs32 + clhs46);
        const double clhs48 =             DN(0,1)*clhs47*rho*tau1;
        const double clhs49 =             1.0/rho;
        const double clhs50 =             bdf0*clhs2*clhs49*tau2;
        const double clhs51 =             bdf0*clhs0*clhs2;
        const double clhs52 =             N[0]*bdf0*clhs2;
        const double clhs53 =             clhs52*clhs6;
        const double clhs54 =             DN(0,0) + clhs53;
        const double clhs55 =             DN(0,0)*clhs54*rho*tau1;
        const double clhs56 =             clhs10*clhs52;
        const double clhs57 =             DN(0,1) + clhs56;
        const double clhs58 =             DN(0,1)*clhs57*rho*tau1;
        const double clhs59 =             bdf0*clhs0*clhs2*tau1;
        const double clhs60 =             DN(0,0)*N[1];
        const double clhs61 =             clhs14*clhs60;
        const double clhs62 =             DN(0,1)*N[1];
        const double clhs63 =             clhs20*clhs62;
        const double clhs64 =             DN(0,0)*DN(1,0);
        const double clhs65 =             clhs64*rho;
        const double clhs66 =             clhs64*tau2;
        const double clhs67 =             N[0]*bdf0*rho;
        const double clhs68 =             N[1]*clhs67;
        const double clhs69 =             C(0,0)*DN(1,0) + C(0,2)*DN(1,1);
        const double clhs70 =             C(0,2)*DN(1,0);
        const double clhs71 =             C(2,2)*DN(1,1) + clhs70;
        const double clhs72 =             DN(0,1)*N[1]*clhs26*tau1;
        const double clhs73 =             N[1]*clhs31;
        const double clhs74 =             DN(1,0)*clhs8 + DN(1,1)*clhs11;
        const double clhs75 =             N[1]*clhs7 + clhs74;
        const double clhs76 =             N[1]*clhs4;
        const double clhs77 =             N[1]*bdf0;
        const double clhs78 =             clhs76 + rho*(clhs75 + clhs77);
        const double clhs79 =             DN(0,0)*clhs78*rho*tau1;
        const double clhs80 =             N[0]*N[1]*rho;
        const double clhs81 =             clhs80*clhs9;
        const double clhs82 =             -clhs45*clhs81;
        const double clhs83 =             DN(0,0)*DN(1,1);
        const double clhs84 =             clhs83*rho;
        const double clhs85 =             clhs83*tau2;
        const double clhs86 =             C(0,1)*DN(1,1) + clhs70;
        const double clhs87 =             C(1,2)*DN(1,1);
        const double clhs88 =             C(2,2)*DN(1,0) + clhs87;
        const double clhs89 =             DN(0,0)*N[1]*clhs26*tau1;
        const double clhs90 =             N[1]*clhs18 + clhs74;
        const double clhs91 =             clhs76 + rho*(clhs77 + clhs90);
        const double clhs92 =             DN(0,1)*clhs91*rho*tau1;
        const double clhs93 =             N[1]*bdf0*clhs2;
        const double clhs94 =             DN(1,0) + clhs6*clhs93;
        const double clhs95 =             DN(0,0)*clhs94*rho*tau1;
        const double clhs96 =             DN(1,1) + clhs10*clhs93;
        const double clhs97 =             DN(0,1)*clhs96*rho*tau1;
        const double clhs98 =             N[0]*N[1]*bdf0*clhs2*tau1;
        const double clhs99 =             N[1]*clhs53 - clhs13*clhs98;
        const double clhs100 =             DN(0,0)*N[2];
        const double clhs101 =             clhs100*clhs14;
        const double clhs102 =             DN(0,1)*N[2];
        const double clhs103 =             clhs102*clhs20;
        const double clhs104 =             DN(0,0)*DN(2,0);
        const double clhs105 =             clhs104*rho;
        const double clhs106 =             clhs104*tau2;
        const double clhs107 =             N[2]*clhs67;
        const double clhs108 =             C(0,0)*DN(2,0) + C(0,2)*DN(2,1);
        const double clhs109 =             C(0,2)*DN(2,0);
        const double clhs110 =             C(2,2)*DN(2,1) + clhs109;
        const double clhs111 =             DN(0,1)*N[2]*clhs26*tau1;
        const double clhs112 =             N[2]*clhs31;
        const double clhs113 =             DN(2,0)*clhs8 + DN(2,1)*clhs11;
        const double clhs114 =             N[2]*clhs7 + clhs113;
        const double clhs115 =             N[2]*clhs4;
        const double clhs116 =             N[2]*bdf0;
        const double clhs117 =             clhs115 + rho*(clhs114 + clhs116);
        const double clhs118 =             DN(0,0)*clhs117*rho*tau1;
        const double clhs119 =             N[0]*N[2]*rho;
        const double clhs120 =             clhs119*clhs9;
        const double clhs121 =             -clhs120*clhs45;
        const double clhs122 =             DN(0,0)*DN(2,1);
        const double clhs123 =             clhs122*rho;
        const double clhs124 =             clhs122*tau2;
        const double clhs125 =             C(0,1)*DN(2,1) + clhs109;
        const double clhs126 =             C(1,2)*DN(2,1);
        const double clhs127 =             C(2,2)*DN(2,0) + clhs126;
        const double clhs128 =             DN(0,0)*N[2]*clhs26*tau1;
        const double clhs129 =             N[2]*clhs18 + clhs113;
        const double clhs130 =             clhs115 + rho*(clhs116 + clhs129);
        const double clhs131 =             DN(0,1)*clhs130*rho*tau1;
        const double clhs132 =             N[2]*bdf0*clhs2;
        const double clhs133 =             DN(2,0) + clhs132*clhs6;
        const double clhs134 =             DN(0,0)*clhs133*rho*tau1;
        const double clhs135 =             DN(2,1) + clhs10*clhs132;
        const double clhs136 =             DN(0,1)*clhs135*rho*tau1;
        const double clhs137 =             N[0]*N[2]*bdf0*clhs2*tau1;
        const double clhs138 =             N[2]*clhs53 - clhs13*clhs137;
        const double clhs139 =             C(0,1)*DN(0,0) + clhs39;
        const double clhs140 =             clhs16*clhs41;
        const double clhs141 =             clhs11*clhs16;
        const double clhs142 =             pow(DN(0,1), 2);
        const double clhs143 =             C(1,1)*DN(0,1) + C(1,2)*DN(0,0);
        const double clhs144 =             DN(0,1)*DN(1,0);
        const double clhs145 =             clhs144*rho + clhs144*tau2;
        const double clhs146 =             C(0,1)*DN(1,0) + clhs87;
        const double clhs147 =             clhs16*clhs80;
        const double clhs148 =             -clhs147*clhs45;
        const double clhs149 =             DN(0,1)*DN(1,1);
        const double clhs150 =             clhs149*rho + clhs149*tau2 + clhs68 + clhs73;
        const double clhs151 =             C(1,1)*DN(1,1) + C(1,2)*DN(1,0);
        const double clhs152 =             N[1]*clhs56 - clhs19*clhs98;
        const double clhs153 =             DN(0,1)*DN(2,0);
        const double clhs154 =             clhs153*rho + clhs153*tau2;
        const double clhs155 =             C(0,1)*DN(2,0) + clhs126;
        const double clhs156 =             clhs119*clhs16;
        const double clhs157 =             -clhs156*clhs45;
        const double clhs158 =             DN(0,1)*DN(2,1);
        const double clhs159 =             clhs107 + clhs112 + clhs158*rho + clhs158*tau2;
        const double clhs160 =             C(1,1)*DN(2,1) + C(1,2)*DN(2,0);
        const double clhs161 =             N[2]*clhs56 - clhs137*clhs19;
        const double clhs162 =             clhs16*rho*tau1;
        const double clhs163 =             DN(0,0)*tau1;
        const double clhs164 =             clhs9*rho*tau1;
        const double clhs165 =             DN(0,1)*tau1;
        const double clhs166 =             bdf0*clhs2*clhs49;
        const double clhs167 =             DN(1,0)*N[0];
        const double clhs168 =             DN(1,1)*N[0];
        const double clhs169 =             N[0]*bdf0*clhs2*clhs49;
        const double clhs170 =             N[1]*clhs169;
        const double clhs171 =             DN(2,0)*N[0];
        const double clhs172 =             DN(2,1)*N[0];
        const double clhs173 =             N[2]*clhs169;
        const double clhs174 =             clhs14*clhs167;
        const double clhs175 =             clhs168*clhs20;
        const double clhs176 =             DN(1,1)*N[0]*clhs26*tau1;
        const double clhs177 =             N[1]*rho;
        const double clhs178 =             DN(1,0)*clhs33*rho*tau1;
        const double clhs179 =             N[1]*clhs2*clhs3*tau1;
        const double clhs180 =             DN(1,0)*N[0]*clhs26*tau1;
        const double clhs181 =             DN(1,1)*clhs47*rho*tau1;
        const double clhs182 =             DN(1,0)*clhs54*rho*tau1;
        const double clhs183 =             DN(1,1)*clhs57*rho*tau1;
        const double clhs184 =             pow(N[1], 2);
        const double clhs185 =             DN(1,0)*N[1];
        const double clhs186 =             DN(1,1)*N[1];
        const double clhs187 =             clhs1*clhs184 + clhs14*clhs185 + clhs184*clhs4 + clhs186*clhs20;
        const double clhs188 =             pow(DN(1,0), 2);
        const double clhs189 =             DN(1,1)*N[1]*clhs26*tau1;
        const double clhs190 =             DN(1,0)*clhs78*rho*tau1;
        const double clhs191 =             DN(1,0)*DN(1,1);
        const double clhs192 =             clhs191*rho + clhs191*tau2;
        const double clhs193 =             clhs184*rho;
        const double clhs194 =             clhs193*clhs9;
        const double clhs195 =             DN(1,0)*N[1]*clhs26*tau1;
        const double clhs196 =             DN(1,1)*clhs91*rho*tau1;
        const double clhs197 =             bdf0*clhs184*clhs2;
        const double clhs198 =             DN(1,0)*clhs94*rho*tau1;
        const double clhs199 =             DN(1,1)*clhs96*rho*tau1;
        const double clhs200 =             bdf0*clhs184*clhs2*tau1;
        const double clhs201 =             DN(1,0)*N[2];
        const double clhs202 =             clhs14*clhs201;
        const double clhs203 =             DN(1,1)*N[2];
        const double clhs204 =             clhs20*clhs203;
        const double clhs205 =             DN(1,0)*DN(2,0);
        const double clhs206 =             clhs205*rho;
        const double clhs207 =             clhs205*tau2;
        const double clhs208 =             N[1]*N[2]*bdf0;
        const double clhs209 =             clhs208*rho;
        const double clhs210 =             DN(1,1)*N[2]*clhs26*tau1;
        const double clhs211 =             N[2]*clhs76;
        const double clhs212 =             DN(1,0)*clhs117*rho*tau1;
        const double clhs213 =             N[1]*N[2]*rho;
        const double clhs214 =             clhs213*clhs9;
        const double clhs215 =             -clhs214*clhs45;
        const double clhs216 =             DN(1,0)*DN(2,1);
        const double clhs217 =             clhs216*rho;
        const double clhs218 =             clhs216*tau2;
        const double clhs219 =             DN(1,0)*N[2]*clhs26*tau1;
        const double clhs220 =             DN(1,1)*clhs130*rho*tau1;
        const double clhs221 =             DN(1,0)*clhs133*rho*tau1;
        const double clhs222 =             DN(1,1)*clhs135*rho*tau1;
        const double clhs223 =             N[1]*N[2]*bdf0*clhs2;
        const double clhs224 =             N[1]*N[2]*bdf0*clhs2*tau1;
        const double clhs225 =             -clhs13*clhs224 + clhs223*clhs6;
        const double clhs226 =             clhs16*clhs193;
        const double clhs227 =             pow(DN(1,1), 2);
        const double clhs228 =             DN(1,1)*DN(2,0);
        const double clhs229 =             clhs228*rho + clhs228*tau2;
        const double clhs230 =             clhs16*clhs213;
        const double clhs231 =             -clhs230*clhs45;
        const double clhs232 =             DN(1,1)*DN(2,1);
        const double clhs233 =             clhs209 + clhs211 + clhs232*rho + clhs232*tau2;
        const double clhs234 =             clhs10*clhs223 - clhs19*clhs224;
        const double clhs235 =             DN(1,0)*tau1;
        const double clhs236 =             DN(1,1)*tau1;
        const double clhs237 =             DN(2,0)*N[1];
        const double clhs238 =             DN(2,1)*N[1];
        const double clhs239 =             clhs2*clhs208*clhs49;
        const double clhs240 =             clhs14*clhs171;
        const double clhs241 =             clhs172*clhs20;
        const double clhs242 =             DN(2,1)*N[0]*clhs26*tau1;
        const double clhs243 =             N[2]*rho;
        const double clhs244 =             DN(2,0)*clhs33*rho*tau1;
        const double clhs245 =             N[2]*clhs2*clhs3*tau1;
        const double clhs246 =             DN(2,0)*N[0]*clhs26*tau1;
        const double clhs247 =             DN(2,1)*clhs47*rho*tau1;
        const double clhs248 =             DN(2,0)*clhs54*rho*tau1;
        const double clhs249 =             DN(2,1)*clhs57*rho*tau1;
        const double clhs250 =             clhs14*clhs237;
        const double clhs251 =             clhs20*clhs238;
        const double clhs252 =             DN(2,1)*N[1]*clhs26*tau1;
        const double clhs253 =             DN(2,0)*clhs78*rho*tau1;
        const double clhs254 =             DN(2,0)*N[1]*clhs26*tau1;
        const double clhs255 =             DN(2,1)*clhs91*rho*tau1;
        const double clhs256 =             DN(2,0)*clhs94*rho*tau1;
        const double clhs257 =             DN(2,1)*clhs96*rho*tau1;
        const double clhs258 =             pow(N[2], 2);
        const double clhs259 =             DN(2,0)*N[2];
        const double clhs260 =             DN(2,1)*N[2];
        const double clhs261 =             clhs1*clhs258 + clhs14*clhs259 + clhs20*clhs260 + clhs258*clhs4;
        const double clhs262 =             pow(DN(2,0), 2);
        const double clhs263 =             DN(2,1)*N[2]*clhs26*tau1;
        const double clhs264 =             DN(2,0)*clhs117*rho*tau1;
        const double clhs265 =             DN(2,0)*DN(2,1);
        const double clhs266 =             clhs265*rho + clhs265*tau2;
        const double clhs267 =             clhs258*rho;
        const double clhs268 =             clhs267*clhs9;
        const double clhs269 =             DN(2,0)*N[2]*clhs26*tau1;
        const double clhs270 =             DN(2,1)*clhs130*rho*tau1;
        const double clhs271 =             bdf0*clhs2*clhs258;
        const double clhs272 =             DN(2,0)*clhs133*rho*tau1;
        const double clhs273 =             DN(2,1)*clhs135*rho*tau1;
        const double clhs274 =             bdf0*clhs2*clhs258*tau1;
        const double clhs275 =             clhs16*clhs267;
        const double clhs276 =             pow(DN(2,1), 2);
        const double clhs277 =             DN(2,0)*tau1;
        const double clhs278 =             DN(2,1)*tau1;

        lhs(0,0)=DN(0,0)*clhs23 + DN(0,1)*clhs25 + clhs17*clhs27 + clhs21 + clhs22*rho + clhs22*tau2 + clhs28*clhs30 - clhs33*clhs35 + clhs34*clhs8;
        lhs(0,1)=DN(0,0)*clhs38 + DN(0,1)*clhs40 + clhs37 - clhs42*clhs45 + clhs42 + clhs43*clhs44 + clhs48*clhs8;
        lhs(0,2)=-clhs13*clhs59 - clhs35*clhs54 + clhs5*clhs50 - clhs5 + clhs51*clhs6 + clhs55*clhs8 + clhs58*clhs8;
        lhs(0,3)=DN(0,0)*clhs69 + DN(0,1)*clhs71 + clhs17*clhs72 + clhs28*clhs75 - clhs35*clhs78 + clhs61 + clhs63 + clhs65 + clhs66 + clhs68 + clhs73 + clhs79*clhs8;
        lhs(0,4)=DN(0,0)*clhs86 + DN(0,1)*clhs88 + clhs44*clhs89 + clhs8*clhs92 + clhs81 + clhs82 + clhs84 + clhs85;
        lhs(0,5)=-clhs35*clhs94 + clhs50*clhs60 - clhs60 + clhs8*clhs95 + clhs8*clhs97 + clhs99;
        lhs(0,6)=DN(0,0)*clhs108 + DN(0,1)*clhs110 + clhs101 + clhs103 + clhs105 + clhs106 + clhs107 + clhs111*clhs17 + clhs112 + clhs114*clhs28 - clhs117*clhs35 + clhs118*clhs8;
        lhs(0,7)=DN(0,0)*clhs125 + DN(0,1)*clhs127 + clhs120 + clhs121 + clhs123 + clhs124 + clhs128*clhs44 + clhs131*clhs8;
        lhs(0,8)=clhs100*clhs50 - clhs100 - clhs133*clhs35 + clhs134*clhs8 + clhs136*clhs8 + clhs138;
        lhs(1,0)=DN(0,0)*clhs25 + DN(0,1)*clhs139 + clhs11*clhs34 - clhs140*clhs45 + clhs140 + clhs141*clhs27 + clhs37;
        lhs(1,1)=DN(0,0)*clhs40 + DN(0,1)*clhs143 + clhs11*clhs48 + clhs12*clhs43 + clhs142*rho + clhs142*tau2 + clhs21 + clhs28*clhs46 - clhs35*clhs47;
        lhs(1,2)=clhs10*clhs51 + clhs11*clhs55 + clhs11*clhs58 + clhs15*clhs50 - clhs15 - clhs19*clhs59 - clhs35*clhs57;
        lhs(1,3)=DN(0,0)*clhs71 + DN(0,1)*clhs146 + clhs11*clhs79 + clhs141*clhs72 + clhs145 + clhs147 + clhs148;
        lhs(1,4)=DN(0,0)*clhs88 + DN(0,1)*clhs151 + clhs11*clhs92 + clhs12*clhs89 + clhs150 + clhs28*clhs90 - clhs35*clhs91 + clhs61 + clhs63;
        lhs(1,5)=clhs11*clhs95 + clhs11*clhs97 + clhs152 - clhs35*clhs96 + clhs50*clhs62 - clhs62;
        lhs(1,6)=DN(0,0)*clhs110 + DN(0,1)*clhs155 + clhs11*clhs118 + clhs111*clhs141 + clhs154 + clhs156 + clhs157;
        lhs(1,7)=DN(0,0)*clhs127 + DN(0,1)*clhs160 + clhs101 + clhs103 + clhs11*clhs131 + clhs12*clhs128 + clhs129*clhs28 - clhs130*clhs35 + clhs159;
        lhs(1,8)=clhs102*clhs50 - clhs102 + clhs11*clhs134 + clhs11*clhs136 - clhs135*clhs35 + clhs161;
        lhs(2,0)=clhs15*clhs162 + clhs163*clhs33 + 2*clhs5;
        lhs(2,1)=2*clhs15 + clhs164*clhs5 + clhs165*clhs47;
        lhs(2,2)=clhs0*clhs166 + clhs163*clhs54 + clhs165*clhs57;
        lhs(2,3)=clhs162*clhs62 + clhs163*clhs78 + 2*clhs167;
        lhs(2,4)=clhs164*clhs60 + clhs165*clhs91 + 2*clhs168;
        lhs(2,5)=clhs163*clhs94 + clhs165*clhs96 + clhs170;
        lhs(2,6)=clhs102*clhs162 + clhs117*clhs163 + 2*clhs171;
        lhs(2,7)=clhs100*clhs164 + clhs130*clhs165 + 2*clhs172;
        lhs(2,8)=clhs133*clhs163 + clhs135*clhs165 + clhs173;
        lhs(3,0)=DN(1,0)*clhs23 + DN(1,1)*clhs25 + clhs17*clhs176 + clhs174 + clhs175 + clhs177*clhs30 + clhs178*clhs8 - clhs179*clhs33 + clhs65 + clhs66 + clhs68 + clhs73;
        lhs(3,1)=DN(1,0)*clhs38 + DN(1,1)*clhs40 + clhs145 + clhs180*clhs44 + clhs181*clhs8 + clhs81 + clhs82;
        lhs(3,2)=clhs167*clhs50 - clhs167 - clhs179*clhs54 + clhs182*clhs8 + clhs183*clhs8 + clhs99;
        lhs(3,3)=DN(1,0)*clhs69 + DN(1,1)*clhs71 + clhs17*clhs189 + clhs177*clhs75 - clhs179*clhs78 + clhs187 + clhs188*rho + clhs188*tau2 + clhs190*clhs8;
        lhs(3,4)=DN(1,0)*clhs86 + DN(1,1)*clhs88 + clhs192 - clhs194*clhs45 + clhs194 + clhs195*clhs44 + clhs196*clhs8;
        lhs(3,5)=-clhs13*clhs200 - clhs179*clhs94 + clhs185*clhs50 - clhs185 + clhs197*clhs6 + clhs198*clhs8 + clhs199*clhs8;
        lhs(3,6)=DN(1,0)*clhs108 + DN(1,1)*clhs110 + clhs114*clhs177 - clhs117*clhs179 + clhs17*clhs210 + clhs202 + clhs204 + clhs206 + clhs207 + clhs209 + clhs211 + clhs212*clhs8;
        lhs(3,7)=DN(1,0)*clhs125 + DN(1,1)*clhs127 + clhs214 + clhs215 + clhs217 + clhs218 + clhs219*clhs44 + clhs220*clhs8;
        lhs(3,8)=-clhs133*clhs179 + clhs201*clhs50 - clhs201 + clhs221*clhs8 + clhs222*clhs8 + clhs225;
        lhs(4,0)=DN(1,0)*clhs25 + DN(1,1)*clhs139 + clhs11*clhs178 + clhs141*clhs176 + clhs147 + clhs148 + clhs84 + clhs85;
        lhs(4,1)=DN(1,0)*clhs40 + DN(1,1)*clhs143 + clhs11*clhs181 + clhs12*clhs180 + clhs150 + clhs174 + clhs175 + clhs177*clhs46 - clhs179*clhs47;
        lhs(4,2)=clhs11*clhs182 + clhs11*clhs183 + clhs152 + clhs168*clhs50 - clhs168 - clhs179*clhs57;
        lhs(4,3)=DN(1,0)*clhs71 + DN(1,1)*clhs146 + clhs11*clhs190 + clhs141*clhs189 + clhs192 - clhs226*clhs45 + clhs226;
        lhs(4,4)=DN(1,0)*clhs88 + DN(1,1)*clhs151 + clhs11*clhs196 + clhs12*clhs195 + clhs177*clhs90 - clhs179*clhs91 + clhs187 + clhs227*rho + clhs227*tau2;
        lhs(4,5)=clhs10*clhs197 + clhs11*clhs198 + clhs11*clhs199 - clhs179*clhs96 + clhs186*clhs50 - clhs186 - clhs19*clhs200;
        lhs(4,6)=DN(1,0)*clhs110 + DN(1,1)*clhs155 + clhs11*clhs212 + clhs141*clhs210 + clhs229 + clhs230 + clhs231;
        lhs(4,7)=DN(1,0)*clhs127 + DN(1,1)*clhs160 + clhs11*clhs220 + clhs12*clhs219 + clhs129*clhs177 - clhs130*clhs179 + clhs202 + clhs204 + clhs233;
        lhs(4,8)=clhs11*clhs221 + clhs11*clhs222 - clhs135*clhs179 + clhs203*clhs50 - clhs203 + clhs234;
        lhs(5,0)=clhs162*clhs168 + clhs235*clhs33 + 2*clhs60;
        lhs(5,1)=clhs164*clhs167 + clhs236*clhs47 + 2*clhs62;
        lhs(5,2)=clhs170 + clhs235*clhs54 + clhs236*clhs57;
        lhs(5,3)=clhs162*clhs186 + 2*clhs185 + clhs235*clhs78;
        lhs(5,4)=clhs164*clhs185 + 2*clhs186 + clhs236*clhs91;
        lhs(5,5)=clhs166*clhs184 + clhs235*clhs94 + clhs236*clhs96;
        lhs(5,6)=clhs117*clhs235 + clhs162*clhs203 + 2*clhs237;
        lhs(5,7)=clhs130*clhs236 + clhs164*clhs201 + 2*clhs238;
        lhs(5,8)=clhs133*clhs235 + clhs135*clhs236 + clhs239;
        lhs(6,0)=DN(2,0)*clhs23 + DN(2,1)*clhs25 + clhs105 + clhs106 + clhs107 + clhs112 + clhs17*clhs242 + clhs240 + clhs241 + clhs243*clhs30 + clhs244*clhs8 - clhs245*clhs33;
        lhs(6,1)=DN(2,0)*clhs38 + DN(2,1)*clhs40 + clhs120 + clhs121 + clhs154 + clhs246*clhs44 + clhs247*clhs8;
        lhs(6,2)=clhs138 + clhs171*clhs50 - clhs171 - clhs245*clhs54 + clhs248*clhs8 + clhs249*clhs8;
        lhs(6,3)=DN(2,0)*clhs69 + DN(2,1)*clhs71 + clhs17*clhs252 + clhs206 + clhs207 + clhs209 + clhs211 + clhs243*clhs75 - clhs245*clhs78 + clhs250 + clhs251 + clhs253*clhs8;
        lhs(6,4)=DN(2,0)*clhs86 + DN(2,1)*clhs88 + clhs214 + clhs215 + clhs229 + clhs254*clhs44 + clhs255*clhs8;
        lhs(6,5)=clhs225 + clhs237*clhs50 - clhs237 - clhs245*clhs94 + clhs256*clhs8 + clhs257*clhs8;
        lhs(6,6)=DN(2,0)*clhs108 + DN(2,1)*clhs110 + clhs114*clhs243 - clhs117*clhs245 + clhs17*clhs263 + clhs261 + clhs262*rho + clhs262*tau2 + clhs264*clhs8;
        lhs(6,7)=DN(2,0)*clhs125 + DN(2,1)*clhs127 + clhs266 - clhs268*clhs45 + clhs268 + clhs269*clhs44 + clhs270*clhs8;
        lhs(6,8)=-clhs13*clhs274 - clhs133*clhs245 + clhs259*clhs50 - clhs259 + clhs271*clhs6 + clhs272*clhs8 + clhs273*clhs8;
        lhs(7,0)=DN(2,0)*clhs25 + DN(2,1)*clhs139 + clhs11*clhs244 + clhs123 + clhs124 + clhs141*clhs242 + clhs156 + clhs157;
        lhs(7,1)=DN(2,0)*clhs40 + DN(2,1)*clhs143 + clhs11*clhs247 + clhs12*clhs246 + clhs159 + clhs240 + clhs241 + clhs243*clhs46 - clhs245*clhs47;
        lhs(7,2)=clhs11*clhs248 + clhs11*clhs249 + clhs161 + clhs172*clhs50 - clhs172 - clhs245*clhs57;
        lhs(7,3)=DN(2,0)*clhs71 + DN(2,1)*clhs146 + clhs11*clhs253 + clhs141*clhs252 + clhs217 + clhs218 + clhs230 + clhs231;
        lhs(7,4)=DN(2,0)*clhs88 + DN(2,1)*clhs151 + clhs11*clhs255 + clhs12*clhs254 + clhs233 + clhs243*clhs90 - clhs245*clhs91 + clhs250 + clhs251;
        lhs(7,5)=clhs11*clhs256 + clhs11*clhs257 + clhs234 + clhs238*clhs50 - clhs238 - clhs245*clhs96;
        lhs(7,6)=DN(2,0)*clhs110 + DN(2,1)*clhs155 + clhs11*clhs264 + clhs141*clhs263 + clhs266 - clhs275*clhs45 + clhs275;
        lhs(7,7)=DN(2,0)*clhs127 + DN(2,1)*clhs160 + clhs11*clhs270 + clhs12*clhs269 + clhs129*clhs243 - clhs130*clhs245 + clhs261 + clhs276*rho + clhs276*tau2;
        lhs(7,8)=clhs10*clhs271 + clhs11*clhs272 + clhs11*clhs273 - clhs135*clhs245 - clhs19*clhs274 + clhs260*clhs50 - clhs260;
        lhs(8,0)=2*clhs100 + clhs162*clhs172 + clhs277*clhs33;
        lhs(8,1)=2*clhs102 + clhs164*clhs171 + clhs278*clhs47;
        lhs(8,2)=clhs173 + clhs277*clhs54 + clhs278*clhs57;
        lhs(8,3)=clhs162*clhs238 + 2*clhs201 + clhs277*clhs78;
        lhs(8,4)=clhs164*clhs237 + 2*clhs203 + clhs278*clhs91;
        lhs(8,5)=clhs239 + clhs277*clhs94 + clhs278*clhs96;
        lhs(8,6)=clhs117*clhs277 + clhs162*clhs260 + 2*clhs259;
        lhs(8,7)=clhs130*clhs278 + clhs164*clhs259 + 2*clhs260;
        lhs(8,8)=clhs133*clhs277 + clhs135*clhs278 + clhs166*clhs258;

}


template<>
void NavierStokes<3>::ComputeGaussPointRHSContribution(array_1d<double,16>& rhs, const ElementDataStruct& data)
{
    const int nnodes = 4;
    const int dim = 3;
    const int strain_size = 6;

    const double rho = inner_prod(data.N, data.rho);        // Density
    const double mu = inner_prod(data.N, data.mu);          // Dynamic viscosity
    const double h = data.h;                                // Characteristic element size
    const double c = data.c;                                // Wave velocity

    const double& bdf0 = data.bdf0;
    const double& bdf1 = data.bdf1;
    const double& bdf2 = data.bdf2;
    const double& delta_t = data.delta_t;
    const double& dyn_tau_coeff = data.dyn_tau_coeff;

    const bounded_matrix<double,nnodes,dim>& v = data.v;
    const bounded_matrix<double,nnodes,dim>& vn = data.vn;
    const bounded_matrix<double,nnodes,dim>& vnn = data.vnn;
    const bounded_matrix<double,nnodes,dim>& vmesh = data.vmesh;
    const bounded_matrix<double,nnodes,dim>& vconv = v - vmesh;
    const bounded_matrix<double,nnodes,dim>& f = data.f;
    const array_1d<double,nnodes>& p = data.p;
    const array_1d<double,nnodes>& pn = data.pn;
    const array_1d<double,nnodes>& pnn = data.pnn;
    const array_1d<double,strain_size>& stress = data.stress;

    // Get constitutive matrix
    // const Matrix& C = data.C;

    // Get shape function values
    const array_1d<double,nnodes>& N = data.N;
    const bounded_matrix<double,nnodes,dim>& DN = data.DN_DX;

    // Auxiliary variables used in the calculation of the RHS
    const array_1d<double,dim> f_gauss = prod(trans(f), N);
    const array_1d<double,dim> grad_p = prod(trans(DN), p);
    const array_1d<double,dim> vconv_gauss = prod(trans(vconv), N);
    //~ const double p_gauss = inner_prod(N,p);

    const double vconv_norm = norm_2(vconv_gauss);

    //~ array_1d<double,dim> accel_gauss = bdf0*v_gauss;
    //~ noalias(accel_gauss) += bdf1*prod(trans(vn), N);
    //~ noalias(accel_gauss) += bdf2*prod(trans(vnn), N);

    // Stabilization parameters
    const double c1 = 4.0;
    const double c2 = 2.0;
    const double tau1 = 1.0/((rho*dyn_tau_coeff)/delta_t + (c2*rho*vconv_norm)/h + (c1*mu)/(h*h));
    const double tau2 = (h*h)/(c1*tau1);

    const double crhs0 =             N[0]*p[0] + N[1]*p[1] + N[2]*p[2] + N[3]*p[3];
        const double crhs1 =             rho*(N[0]*f(0,0) + N[1]*f(1,0) + N[2]*f(2,0) + N[3]*f(3,0));
        const double crhs2 =             DN(0,2)*v(0,2) + DN(1,2)*v(1,2) + DN(2,2)*v(2,2) + DN(3,2)*v(3,2);
        const double crhs3 =             DN(0,0)*v(0,0);
        const double crhs4 =             DN(0,1)*v(0,1);
        const double crhs5 =             DN(1,0)*v(1,0);
        const double crhs6 =             DN(1,1)*v(1,1);
        const double crhs7 =             DN(2,0)*v(2,0);
        const double crhs8 =             DN(2,1)*v(2,1);
        const double crhs9 =             DN(3,0)*v(3,0);
        const double crhs10 =             DN(3,1)*v(3,1);
        const double crhs11 =             crhs10 + crhs2 + crhs3 + crhs4 + crhs5 + crhs6 + crhs7 + crhs8 + crhs9;
        const double crhs12 =             crhs11*rho;
        const double crhs13 =             N[0]*rho;
        const double crhs14 =             N[0]*(bdf0*v(0,0) + bdf1*vn(0,0) + bdf2*vnn(0,0)) + N[1]*(bdf0*v(1,0) + bdf1*vn(1,0) + bdf2*vnn(1,0)) + N[2]*(bdf0*v(2,0) + bdf1*vn(2,0) + bdf2*vnn(2,0)) + N[3]*(bdf0*v(3,0) + bdf1*vn(3,0) + bdf2*vnn(3,0));
        const double crhs15 =             N[0]*v(0,0) + N[1]*v(1,0) + N[2]*v(2,0) + N[3]*v(3,0);
        const double crhs16 =             pow(c, -2);
        const double crhs17 =             N[0]*(bdf0*p[0] + bdf1*pn[0] + bdf2*pnn[0]) + N[1]*(bdf0*p[1] + bdf1*pn[1] + bdf2*pnn[1]) + N[2]*(bdf0*p[2] + bdf1*pn[2] + bdf2*pnn[2]) + N[3]*(bdf0*p[3] + bdf1*pn[3] + bdf2*pnn[3]);
        const double crhs18 =             crhs16*crhs17;
        const double crhs19 =             crhs15*crhs18;
        const double crhs20 =             crhs16*crhs17/rho;
        const double crhs21 =             tau2*(crhs11 + crhs20);
        const double crhs22 =             -N[0]*vmesh(0,0) - N[1]*vmesh(1,0) - N[2]*vmesh(2,0) - N[3]*vmesh(3,0) + crhs15;
        const double crhs23 =             N[0]*v(0,1) + N[1]*v(1,1) + N[2]*v(2,1) + N[3]*v(3,1);
        const double crhs24 =             -N[0]*vmesh(0,1) - N[1]*vmesh(1,1) - N[2]*vmesh(2,1) - N[3]*vmesh(3,1) + crhs23;
        const double crhs25 =             N[0]*v(0,2) + N[1]*v(1,2) + N[2]*v(2,2) + N[3]*v(3,2);
        const double crhs26 =             -N[0]*vmesh(0,2) - N[1]*vmesh(1,2) - N[2]*vmesh(2,2) - N[3]*vmesh(3,2) + crhs25;
        const double crhs27 =             crhs22*(crhs3 + crhs5 + crhs7 + crhs9) + crhs24*(DN(0,1)*v(0,0) + DN(1,1)*v(1,0) + DN(2,1)*v(2,0) + DN(3,1)*v(3,0)) + crhs26*(DN(0,2)*v(0,0) + DN(1,2)*v(1,0) + DN(2,2)*v(2,0) + DN(3,2)*v(3,0));
        const double crhs28 =             DN(0,0)*p[0] + DN(1,0)*p[1] + DN(2,0)*p[2] + DN(3,0)*p[3] - crhs1 + crhs19 + rho*(crhs14 + crhs27);
        const double crhs29 =             DN(0,0)*crhs28*rho*tau1;
        const double crhs30 =             rho*(N[0]*f(0,1) + N[1]*f(1,1) + N[2]*f(2,1) + N[3]*f(3,1));
        const double crhs31 =             crhs18*crhs23;
        const double crhs32 =             N[0]*(bdf0*v(0,1) + bdf1*vn(0,1) + bdf2*vnn(0,1)) + N[1]*(bdf0*v(1,1) + bdf1*vn(1,1) + bdf2*vnn(1,1)) + N[2]*(bdf0*v(2,1) + bdf1*vn(2,1) + bdf2*vnn(2,1)) + N[3]*(bdf0*v(3,1) + bdf1*vn(3,1) + bdf2*vnn(3,1));
        const double crhs33 =             crhs22*(DN(0,0)*v(0,1) + DN(1,0)*v(1,1) + DN(2,0)*v(2,1) + DN(3,0)*v(3,1)) + crhs24*(crhs10 + crhs4 + crhs6 + crhs8) + crhs26*(DN(0,2)*v(0,1) + DN(1,2)*v(1,1) + DN(2,2)*v(2,1) + DN(3,2)*v(3,1));
        const double crhs34 =             DN(0,1)*p[0] + DN(1,1)*p[1] + DN(2,1)*p[2] + DN(3,1)*p[3] - crhs30 + crhs31 + rho*(crhs32 + crhs33);
        const double crhs35 =             DN(0,1)*crhs34*rho*tau1;
        const double crhs36 =             rho*(N[0]*f(0,2) + N[1]*f(1,2) + N[2]*f(2,2) + N[3]*f(3,2));
        const double crhs37 =             crhs18*crhs25;
        const double crhs38 =             N[0]*(bdf0*v(0,2) + bdf1*vn(0,2) + bdf2*vnn(0,2)) + N[1]*(bdf0*v(1,2) + bdf1*vn(1,2) + bdf2*vnn(1,2)) + N[2]*(bdf0*v(2,2) + bdf1*vn(2,2) + bdf2*vnn(2,2)) + N[3]*(bdf0*v(3,2) + bdf1*vn(3,2) + bdf2*vnn(3,2));
        const double crhs39 =             crhs2*crhs26 + crhs22*(DN(0,0)*v(0,2) + DN(1,0)*v(1,2) + DN(2,0)*v(2,2) + DN(3,0)*v(3,2)) + crhs24*(DN(0,1)*v(0,2) + DN(1,1)*v(1,2) + DN(2,1)*v(2,2) + DN(3,1)*v(3,2));
        const double crhs40 =             DN(0,2)*p[0] + DN(1,2)*p[1] + DN(2,2)*p[2] + DN(3,2)*p[3] - crhs36 + crhs37 + rho*(crhs38 + crhs39);
        const double crhs41 =             DN(0,2)*crhs40*rho*tau1;
        const double crhs42 =             N[0]*crhs16*crhs17;
        const double crhs43 =             crhs28*tau1;
        const double crhs44 =             crhs34*tau1;
        const double crhs45 =             crhs40*tau1;
        const double crhs46 =             2*DN(0,0)*v(0,0) + 2*DN(0,1)*v(0,1) + 2*DN(0,2)*v(0,2) + 2*DN(1,0)*v(1,0) + 2*DN(1,1)*v(1,1) + 2*DN(1,2)*v(1,2) + 2*DN(2,0)*v(2,0) + 2*DN(2,1)*v(2,1) + 2*DN(2,2)*v(2,2) + 2*DN(3,0)*v(3,0) + 2*DN(3,1)*v(3,1) + 2*DN(3,2)*v(3,2);
        const double crhs47 =             N[1]*rho;
        const double crhs48 =             DN(1,0)*crhs28*rho*tau1;
        const double crhs49 =             DN(1,1)*crhs34*rho*tau1;
        const double crhs50 =             DN(1,2)*crhs40*rho*tau1;
        const double crhs51 =             N[1]*crhs16*crhs17;
        const double crhs52 =             N[2]*rho;
        const double crhs53 =             DN(2,0)*crhs28*rho*tau1;
        const double crhs54 =             DN(2,1)*crhs34*rho*tau1;
        const double crhs55 =             DN(2,2)*crhs40*rho*tau1;
        const double crhs56 =             N[2]*crhs16*crhs17;
        const double crhs57 =             N[3]*rho;
        const double crhs58 =             DN(3,0)*crhs28*rho*tau1;
        const double crhs59 =             DN(3,1)*crhs34*rho*tau1;
        const double crhs60 =             DN(3,2)*crhs40*rho*tau1;
        const double crhs61 =             N[3]*crhs16*crhs17;

        rhs[0]=DN(0,0)*crhs0 - DN(0,0)*crhs12 - DN(0,0)*crhs21 - DN(0,0)*stress[0] - DN(0,1)*stress[3] - DN(0,2)*stress[5] + N[0]*crhs1 - N[0]*crhs19 - crhs13*crhs14 - crhs13*crhs27 - crhs22*crhs29 - crhs22*crhs35 - crhs22*crhs41 + crhs42*crhs43;
        rhs[1]=-DN(0,0)*stress[3] + DN(0,1)*crhs0 - DN(0,1)*crhs12 - DN(0,1)*crhs21 - DN(0,1)*stress[1] - DN(0,2)*stress[4] + N[0]*crhs30 - N[0]*crhs31 - crhs13*crhs32 - crhs13*crhs33 - crhs24*crhs29 - crhs24*crhs35 - crhs24*crhs41 + crhs42*crhs44;
        rhs[2]=-DN(0,0)*stress[5] - DN(0,1)*stress[4] + DN(0,2)*crhs0 - DN(0,2)*crhs12 - DN(0,2)*crhs21 - DN(0,2)*stress[2] + N[0]*crhs36 - N[0]*crhs37 - crhs13*crhs38 - crhs13*crhs39 - crhs26*crhs29 - crhs26*crhs35 - crhs26*crhs41 + crhs42*crhs45;
        rhs[3]=-DN(0,0)*crhs43 - DN(0,1)*crhs44 - DN(0,2)*crhs45 - N[0]*crhs20 - N[0]*crhs46;
        rhs[4]=DN(1,0)*crhs0 - DN(1,0)*crhs12 - DN(1,0)*crhs21 - DN(1,0)*stress[0] - DN(1,1)*stress[3] - DN(1,2)*stress[5] + N[1]*crhs1 - N[1]*crhs19 - crhs14*crhs47 - crhs22*crhs48 - crhs22*crhs49 - crhs22*crhs50 - crhs27*crhs47 + crhs43*crhs51;
        rhs[5]=-DN(1,0)*stress[3] + DN(1,1)*crhs0 - DN(1,1)*crhs12 - DN(1,1)*crhs21 - DN(1,1)*stress[1] - DN(1,2)*stress[4] + N[1]*crhs30 - N[1]*crhs31 - crhs24*crhs48 - crhs24*crhs49 - crhs24*crhs50 - crhs32*crhs47 - crhs33*crhs47 + crhs44*crhs51;
        rhs[6]=-DN(1,0)*stress[5] - DN(1,1)*stress[4] + DN(1,2)*crhs0 - DN(1,2)*crhs12 - DN(1,2)*crhs21 - DN(1,2)*stress[2] + N[1]*crhs36 - N[1]*crhs37 - crhs26*crhs48 - crhs26*crhs49 - crhs26*crhs50 - crhs38*crhs47 - crhs39*crhs47 + crhs45*crhs51;
        rhs[7]=-DN(1,0)*crhs43 - DN(1,1)*crhs44 - DN(1,2)*crhs45 - N[1]*crhs20 - N[1]*crhs46;
        rhs[8]=DN(2,0)*crhs0 - DN(2,0)*crhs12 - DN(2,0)*crhs21 - DN(2,0)*stress[0] - DN(2,1)*stress[3] - DN(2,2)*stress[5] + N[2]*crhs1 - N[2]*crhs19 - crhs14*crhs52 - crhs22*crhs53 - crhs22*crhs54 - crhs22*crhs55 - crhs27*crhs52 + crhs43*crhs56;
        rhs[9]=-DN(2,0)*stress[3] + DN(2,1)*crhs0 - DN(2,1)*crhs12 - DN(2,1)*crhs21 - DN(2,1)*stress[1] - DN(2,2)*stress[4] + N[2]*crhs30 - N[2]*crhs31 - crhs24*crhs53 - crhs24*crhs54 - crhs24*crhs55 - crhs32*crhs52 - crhs33*crhs52 + crhs44*crhs56;
        rhs[10]=-DN(2,0)*stress[5] - DN(2,1)*stress[4] + DN(2,2)*crhs0 - DN(2,2)*crhs12 - DN(2,2)*crhs21 - DN(2,2)*stress[2] + N[2]*crhs36 - N[2]*crhs37 - crhs26*crhs53 - crhs26*crhs54 - crhs26*crhs55 - crhs38*crhs52 - crhs39*crhs52 + crhs45*crhs56;
        rhs[11]=-DN(2,0)*crhs43 - DN(2,1)*crhs44 - DN(2,2)*crhs45 - N[2]*crhs20 - N[2]*crhs46;
        rhs[12]=DN(3,0)*crhs0 - DN(3,0)*crhs12 - DN(3,0)*crhs21 - DN(3,0)*stress[0] - DN(3,1)*stress[3] - DN(3,2)*stress[5] + N[3]*crhs1 - N[3]*crhs19 - crhs14*crhs57 - crhs22*crhs58 - crhs22*crhs59 - crhs22*crhs60 - crhs27*crhs57 + crhs43*crhs61;
        rhs[13]=-DN(3,0)*stress[3] + DN(3,1)*crhs0 - DN(3,1)*crhs12 - DN(3,1)*crhs21 - DN(3,1)*stress[1] - DN(3,2)*stress[4] + N[3]*crhs30 - N[3]*crhs31 - crhs24*crhs58 - crhs24*crhs59 - crhs24*crhs60 - crhs32*crhs57 - crhs33*crhs57 + crhs44*crhs61;
        rhs[14]=-DN(3,0)*stress[5] - DN(3,1)*stress[4] + DN(3,2)*crhs0 - DN(3,2)*crhs12 - DN(3,2)*crhs21 - DN(3,2)*stress[2] + N[3]*crhs36 - N[3]*crhs37 - crhs26*crhs58 - crhs26*crhs59 - crhs26*crhs60 - crhs38*crhs57 - crhs39*crhs57 + crhs45*crhs61;
        rhs[15]=-DN(3,0)*crhs43 - DN(3,1)*crhs44 - DN(3,2)*crhs45 - N[3]*crhs20 - N[3]*crhs46;

}


template<>
void NavierStokes<2>::ComputeGaussPointRHSContribution(array_1d<double,9>& rhs, const ElementDataStruct& data)
{
    const int nnodes = 3;
    const int dim = 2;
    const int strain_size = 3;

    const double rho = inner_prod(data.N, data.rho);        // Density
    const double mu = inner_prod(data.N, data.mu);          // Dynamic viscosity
    const double h = data.h;                                // Characteristic element size
    const double c = data.c;                                // Wave velocity

    const double& bdf0 = data.bdf0;
    const double& bdf1 = data.bdf1;
    const double& bdf2 = data.bdf2;
    const double& delta_t = data.delta_t;
    const double& dyn_tau_coeff = data.dyn_tau_coeff;

    const bounded_matrix<double,nnodes,dim>& v = data.v;
    const bounded_matrix<double,nnodes,dim>& vn = data.vn;
    const bounded_matrix<double,nnodes,dim>& vnn = data.vnn;
    const bounded_matrix<double,nnodes,dim>& vmesh = data.vmesh;
    const bounded_matrix<double,nnodes,dim>& vconv = v - vmesh;
    const bounded_matrix<double,nnodes,dim>& f = data.f;
    const array_1d<double,nnodes>& p = data.p;
    const array_1d<double,nnodes>& pn = data.pn;
    const array_1d<double,nnodes>& pnn = data.pnn;
    const array_1d<double,strain_size>& stress = data.stress;

    // Get constitutive matrix
    // const Matrix& C = data.C;

    // Get shape function values
    const array_1d<double,nnodes>& N = data.N;
    const bounded_matrix<double,nnodes,dim>& DN = data.DN_DX;

    // Auxiliary variables used in the calculation of the RHS
    const array_1d<double,dim> f_gauss = prod(trans(f), N);
    const array_1d<double,dim> grad_p = prod(trans(DN), p);
    const array_1d<double,dim> vconv_gauss = prod(trans(vconv), N);
    //~ const double p_gauss = inner_prod(N,p);

    const double vconv_norm = norm_2(vconv_gauss);

    //~ array_1d<double,dim> accel_gauss = bdf0*v_gauss;
    //~ noalias(accel_gauss) += bdf1*prod(trans(vn), N);
    //~ noalias(accel_gauss) += bdf2*prod(trans(vnn), N);

    // Stabilization parameters
    const double c1 = 4.0;
    const double c2 = 2.0;
    const double tau1 = 1.0/((rho*dyn_tau_coeff)/delta_t + (c2*rho*vconv_norm)/h + (c1*mu)/(h*h));
    const double tau2 = (h*h)/(c1*tau1);

    const double crhs0 =             N[0]*p[0] + N[1]*p[1] + N[2]*p[2];
        const double crhs1 =             rho*(N[0]*f(0,0) + N[1]*f(1,0) + N[2]*f(2,0));
        const double crhs2 =             DN(0,0)*v(0,0) + DN(1,0)*v(1,0) + DN(2,0)*v(2,0);
        const double crhs3 =             DN(0,1)*v(0,1) + DN(1,1)*v(1,1) + DN(2,1)*v(2,1);
        const double crhs4 =             crhs2 + crhs3;
        const double crhs5 =             crhs4*rho;
        const double crhs6 =             N[0]*rho;
        const double crhs7 =             N[0]*(bdf0*v(0,0) + bdf1*vn(0,0) + bdf2*vnn(0,0)) + N[1]*(bdf0*v(1,0) + bdf1*vn(1,0) + bdf2*vnn(1,0)) + N[2]*(bdf0*v(2,0) + bdf1*vn(2,0) + bdf2*vnn(2,0));
        const double crhs8 =             N[0]*v(0,0) + N[1]*v(1,0) + N[2]*v(2,0);
        const double crhs9 =             pow(c, -2);
        const double crhs10 =             N[0]*(bdf0*p[0] + bdf1*pn[0] + bdf2*pnn[0]) + N[1]*(bdf0*p[1] + bdf1*pn[1] + bdf2*pnn[1]) + N[2]*(bdf0*p[2] + bdf1*pn[2] + bdf2*pnn[2]);
        const double crhs11 =             crhs10*crhs9;
        const double crhs12 =             crhs11*crhs8;
        const double crhs13 =             crhs10*crhs9/rho;
        const double crhs14 =             tau2*(crhs13 + crhs4);
        const double crhs15 =             -N[0]*vmesh(0,0) - N[1]*vmesh(1,0) - N[2]*vmesh(2,0) + crhs8;
        const double crhs16 =             N[0]*v(0,1) + N[1]*v(1,1) + N[2]*v(2,1);
        const double crhs17 =             -N[0]*vmesh(0,1) - N[1]*vmesh(1,1) - N[2]*vmesh(2,1) + crhs16;
        const double crhs18 =             crhs15*crhs2 + crhs17*(DN(0,1)*v(0,0) + DN(1,1)*v(1,0) + DN(2,1)*v(2,0));
        const double crhs19 =             DN(0,0)*p[0] + DN(1,0)*p[1] + DN(2,0)*p[2] - crhs1 + crhs12 + rho*(crhs18 + crhs7);
        const double crhs20 =             DN(0,0)*crhs19*rho*tau1;
        const double crhs21 =             rho*(N[0]*f(0,1) + N[1]*f(1,1) + N[2]*f(2,1));
        const double crhs22 =             crhs11*crhs16;
        const double crhs23 =             N[0]*(bdf0*v(0,1) + bdf1*vn(0,1) + bdf2*vnn(0,1)) + N[1]*(bdf0*v(1,1) + bdf1*vn(1,1) + bdf2*vnn(1,1)) + N[2]*(bdf0*v(2,1) + bdf1*vn(2,1) + bdf2*vnn(2,1));
        const double crhs24 =             crhs15*(DN(0,0)*v(0,1) + DN(1,0)*v(1,1) + DN(2,0)*v(2,1)) + crhs17*crhs3;
        const double crhs25 =             DN(0,1)*p[0] + DN(1,1)*p[1] + DN(2,1)*p[2] - crhs21 + crhs22 + rho*(crhs23 + crhs24);
        const double crhs26 =             DN(0,1)*crhs25*rho*tau1;
        const double crhs27 =             N[0]*crhs10*crhs9;
        const double crhs28 =             crhs19*tau1;
        const double crhs29 =             crhs25*tau1;
        const double crhs30 =             2*DN(0,0)*v(0,0) + 2*DN(0,1)*v(0,1) + 2*DN(1,0)*v(1,0) + 2*DN(1,1)*v(1,1) + 2*DN(2,0)*v(2,0) + 2*DN(2,1)*v(2,1);
        const double crhs31 =             N[1]*rho;
        const double crhs32 =             DN(1,0)*crhs19*rho*tau1;
        const double crhs33 =             DN(1,1)*crhs25*rho*tau1;
        const double crhs34 =             N[1]*crhs10*crhs9;
        const double crhs35 =             N[2]*rho;
        const double crhs36 =             DN(2,0)*crhs19*rho*tau1;
        const double crhs37 =             DN(2,1)*crhs25*rho*tau1;
        const double crhs38 =             N[2]*crhs10*crhs9;

        rhs[0]=DN(0,0)*crhs0 - DN(0,0)*crhs14 - DN(0,0)*crhs5 - DN(0,0)*stress[0] - DN(0,1)*stress[2] + N[0]*crhs1 - N[0]*crhs12 - crhs15*crhs20 - crhs15*crhs26 - crhs18*crhs6 + crhs27*crhs28 - crhs6*crhs7;
        rhs[1]=-DN(0,0)*stress[2] + DN(0,1)*crhs0 - DN(0,1)*crhs14 - DN(0,1)*crhs5 - DN(0,1)*stress[1] + N[0]*crhs21 - N[0]*crhs22 - crhs17*crhs20 - crhs17*crhs26 - crhs23*crhs6 - crhs24*crhs6 + crhs27*crhs29;
        rhs[2]=-DN(0,0)*crhs28 - DN(0,1)*crhs29 - N[0]*crhs13 - N[0]*crhs30;
        rhs[3]=DN(1,0)*crhs0 - DN(1,0)*crhs14 - DN(1,0)*crhs5 - DN(1,0)*stress[0] - DN(1,1)*stress[2] + N[1]*crhs1 - N[1]*crhs12 - crhs15*crhs32 - crhs15*crhs33 - crhs18*crhs31 + crhs28*crhs34 - crhs31*crhs7;
        rhs[4]=-DN(1,0)*stress[2] + DN(1,1)*crhs0 - DN(1,1)*crhs14 - DN(1,1)*crhs5 - DN(1,1)*stress[1] + N[1]*crhs21 - N[1]*crhs22 - crhs17*crhs32 - crhs17*crhs33 - crhs23*crhs31 - crhs24*crhs31 + crhs29*crhs34;
        rhs[5]=-DN(1,0)*crhs28 - DN(1,1)*crhs29 - N[1]*crhs13 - N[1]*crhs30;
        rhs[6]=DN(2,0)*crhs0 - DN(2,0)*crhs14 - DN(2,0)*crhs5 - DN(2,0)*stress[0] - DN(2,1)*stress[2] + N[2]*crhs1 - N[2]*crhs12 - crhs15*crhs36 - crhs15*crhs37 - crhs18*crhs35 + crhs28*crhs38 - crhs35*crhs7;
        rhs[7]=-DN(2,0)*stress[2] + DN(2,1)*crhs0 - DN(2,1)*crhs14 - DN(2,1)*crhs5 - DN(2,1)*stress[1] + N[2]*crhs21 - N[2]*crhs22 - crhs17*crhs36 - crhs17*crhs37 - crhs23*crhs35 - crhs24*crhs35 + crhs29*crhs38;
        rhs[8]=-DN(2,0)*crhs28 - DN(2,1)*crhs29 - N[2]*crhs13 - N[2]*crhs30;

}


template<>
double NavierStokes<3>::SubscaleErrorEstimate(const ElementDataStruct& data)
{
    const int nnodes = 4;
    const int dim = 3;
    // const int strain_size = 3;

    const double rho = inner_prod(data.N, data.rho);        // Density
    const double mu = inner_prod(data.N, data.mu);          // Dynamic viscosity
    const double h = data.h;                                // Characteristic element size
    const double c = data.c;                                // Wave velocity

    const double& bdf0 = data.bdf0;
    const double& bdf1 = data.bdf1;
    const double& bdf2 = data.bdf2;
    const double& delta_t = data.delta_t;
    const double& dyn_tau_coeff = data.dyn_tau_coeff;

    const bounded_matrix<double,nnodes,dim>& v = data.v;
    const bounded_matrix<double,nnodes,dim>& vn = data.vn;
    const bounded_matrix<double,nnodes,dim>& vnn = data.vnn;
    const bounded_matrix<double,nnodes,dim>& vmesh = data.vmesh;
    const bounded_matrix<double,nnodes,dim>& vconv = v - vmesh;
    const bounded_matrix<double,nnodes,dim>& f = data.f;
    const array_1d<double,nnodes>& p = data.p;
    const array_1d<double,nnodes>& pn = data.pn;
    const array_1d<double,nnodes>& pnn = data.pnn;
    // const array_1d<double,strain_size>& stress = data.stress;

    // // Get constitutive matrix
    // const Matrix& C = data.C;

    // Get shape function values
    const array_1d<double,nnodes>& N = data.N;
    const bounded_matrix<double,nnodes,dim>& DN = data.DN_DX;

    // Auxiliary variables used in the calculation of the error estimator
    array_1d<double,dim> v_s_gauss;
    const array_1d<double,dim> v_gauss = prod(trans(v), N);
    const array_1d<double,dim> f_gauss = prod(trans(f), N);
    const array_1d<double,dim> grad_p = prod(trans(DN), p);
    const array_1d<double,dim> vconv_gauss = prod(trans(vconv), N);

    const double vconv_norm = norm_2(vconv_gauss);

    // Stabilization parameters
    const double c1 = 4.0;
    const double c2 = 2.0;
    const double tau1 = 1.0/((rho*dyn_tau_coeff)/delta_t + (c2*rho*vconv_norm)/h + (c1*mu)/(h*h));
    // const double tau2 = (h*h)/(c1*tau1);

    // Gauss point velocity subscale value computation
    const double cv_s_gauss0 =             N[0]*v(0,0) + N[1]*v(1,0) + N[2]*v(2,0) + N[3]*v(3,0);
    const double cv_s_gauss1 =             (N[0]*(bdf0*p[0] + bdf1*pn[0] + bdf2*pnn[0]) + N[1]*(bdf0*p[1] + bdf1*pn[1] + bdf2*pnn[1]) + N[2]*(bdf0*p[2] + bdf1*pn[2] + bdf2*pnn[2]) + N[3]*(bdf0*p[3] + bdf1*pn[3] + bdf2*pnn[3]))/pow(c, 2);
    const double cv_s_gauss2 =             -N[0]*vmesh(0,0) - N[1]*vmesh(1,0) - N[2]*vmesh(2,0) - N[3]*vmesh(3,0) + cv_s_gauss0;
    const double cv_s_gauss3 =             N[0]*v(0,1) + N[1]*v(1,1) + N[2]*v(2,1) + N[3]*v(3,1);
    const double cv_s_gauss4 =             -N[0]*vmesh(0,1) - N[1]*vmesh(1,1) - N[2]*vmesh(2,1) - N[3]*vmesh(3,1) + cv_s_gauss3;
    const double cv_s_gauss5 =             N[0]*v(0,2) + N[1]*v(1,2) + N[2]*v(2,2) + N[3]*v(3,2);
    const double cv_s_gauss6 =             -N[0]*vmesh(0,2) - N[1]*vmesh(1,2) - N[2]*vmesh(2,2) - N[3]*vmesh(3,2) + cv_s_gauss5;

    v_s_gauss[0]=-tau1*(DN(0,0)*p[0] + DN(1,0)*p[1] + DN(2,0)*p[2] + DN(3,0)*p[3] + cv_s_gauss0*cv_s_gauss1 + rho*(-N[0]*f(0,0) + N[0]*(bdf0*v(0,0) + bdf1*vn(0,0) + bdf2*vnn(0,0)) - N[1]*f(1,0) + N[1]*(bdf0*v(1,0) + bdf1*vn(1,0) + bdf2*vnn(1,0)) - N[2]*f(2,0) + N[2]*(bdf0*v(2,0) + bdf1*vn(2,0) + bdf2*vnn(2,0)) - N[3]*f(3,0) + N[3]*(bdf0*v(3,0) + bdf1*vn(3,0) + bdf2*vnn(3,0)) + cv_s_gauss2*(DN(0,0)*v(0,0) + DN(1,0)*v(1,0) + DN(2,0)*v(2,0) + DN(3,0)*v(3,0)) + cv_s_gauss4*(DN(0,1)*v(0,0) + DN(1,1)*v(1,0) + DN(2,1)*v(2,0) + DN(3,1)*v(3,0)) + cv_s_gauss6*(DN(0,2)*v(0,0) + DN(1,2)*v(1,0) + DN(2,2)*v(2,0) + DN(3,2)*v(3,0))));
    v_s_gauss[1]=-tau1*(DN(0,1)*p[0] + DN(1,1)*p[1] + DN(2,1)*p[2] + DN(3,1)*p[3] + cv_s_gauss1*cv_s_gauss3 + rho*(-N[0]*f(0,1) + N[0]*(bdf0*v(0,1) + bdf1*vn(0,1) + bdf2*vnn(0,1)) - N[1]*f(1,1) + N[1]*(bdf0*v(1,1) + bdf1*vn(1,1) + bdf2*vnn(1,1)) - N[2]*f(2,1) + N[2]*(bdf0*v(2,1) + bdf1*vn(2,1) + bdf2*vnn(2,1)) - N[3]*f(3,1) + N[3]*(bdf0*v(3,1) + bdf1*vn(3,1) + bdf2*vnn(3,1)) + cv_s_gauss2*(DN(0,0)*v(0,1) + DN(1,0)*v(1,1) + DN(2,0)*v(2,1) + DN(3,0)*v(3,1)) + cv_s_gauss4*(DN(0,1)*v(0,1) + DN(1,1)*v(1,1) + DN(2,1)*v(2,1) + DN(3,1)*v(3,1)) + cv_s_gauss6*(DN(0,2)*v(0,1) + DN(1,2)*v(1,1) + DN(2,2)*v(2,1) + DN(3,2)*v(3,1))));
    v_s_gauss[2]=-tau1*(DN(0,2)*p[0] + DN(1,2)*p[1] + DN(2,2)*p[2] + DN(3,2)*p[3] + cv_s_gauss1*cv_s_gauss5 + rho*(-N[0]*f(0,2) + N[0]*(bdf0*v(0,2) + bdf1*vn(0,2) + bdf2*vnn(0,2)) - N[1]*f(1,2) + N[1]*(bdf0*v(1,2) + bdf1*vn(1,2) + bdf2*vnn(1,2)) - N[2]*f(2,2) + N[2]*(bdf0*v(2,2) + bdf1*vn(2,2) + bdf2*vnn(2,2)) - N[3]*f(3,2) + N[3]*(bdf0*v(3,2) + bdf1*vn(3,2) + bdf2*vnn(3,2)) + cv_s_gauss2*(DN(0,0)*v(0,2) + DN(1,0)*v(1,2) + DN(2,0)*v(2,2) + DN(3,0)*v(3,2)) + cv_s_gauss4*(DN(0,1)*v(0,2) + DN(1,1)*v(1,2) + DN(2,1)*v(2,2) + DN(3,1)*v(3,2)) + cv_s_gauss6*(DN(0,2)*v(0,2) + DN(1,2)*v(1,2) + DN(2,2)*v(2,2) + DN(3,2)*v(3,2))));

    const double v_gauss_norm = norm_2(v_gauss);
    const double v_s_gauss_norm = norm_2(v_s_gauss);

    return v_s_gauss_norm/v_gauss_norm;
}


template<>
double NavierStokes<2>::SubscaleErrorEstimate(const ElementDataStruct& data)
{
    const int nnodes = 3;
    const int dim = 2;

    const double rho = inner_prod(data.N, data.rho);        // Density
    const double mu = inner_prod(data.N, data.mu);          // Dynamic viscosity
    const double h = data.h;                                // Characteristic element size
    const double c = data.c;                                // Wave velocity

    const double& bdf0 = data.bdf0;
    const double& bdf1 = data.bdf1;
    const double& bdf2 = data.bdf2;
    const double& delta_t = data.delta_t;
    const double& dyn_tau_coeff = data.dyn_tau_coeff;

    const bounded_matrix<double,nnodes,dim>& v = data.v;
    const bounded_matrix<double,nnodes,dim>& vn = data.vn;
    const bounded_matrix<double,nnodes,dim>& vnn = data.vnn;
    const bounded_matrix<double,nnodes,dim>& vmesh = data.vmesh;
    const bounded_matrix<double,nnodes,dim>& vconv = v - vmesh;
    const bounded_matrix<double,nnodes,dim>& f = data.f;
    const array_1d<double,nnodes>& p = data.p;
    const array_1d<double,nnodes>& pn = data.pn;
    const array_1d<double,nnodes>& pnn = data.pnn;

    // Get shape function values
    const array_1d<double,nnodes>& N = data.N;
    const bounded_matrix<double,nnodes,dim>& DN = data.DN_DX;

    // Auxiliary variables used in the calculation of the error estimator
    array_1d<double,dim> v_s_gauss;
    const array_1d<double,dim> v_gauss = prod(trans(v), N);
    const array_1d<double,dim> f_gauss = prod(trans(f), N);
    const array_1d<double,dim> grad_p = prod(trans(DN), p);
    const array_1d<double,dim> vconv_gauss = prod(trans(vconv), N);

    const double vconv_norm = norm_2(vconv_gauss);

    // Stabilization parameters
    const double c1 = 4.0;
    const double c2 = 2.0;
    const double tau1 = 1.0/((rho*dyn_tau_coeff)/delta_t + (c2*rho*vconv_norm)/h + (c1*mu)/(h*h));
    // const double tau2 = (h*h)/(c1*tau1);

    // Gauss point velocity subscale value computation
    const double cv_s_gauss0 =             N[0]*v(0,0) + N[1]*v(1,0) + N[2]*v(2,0);
    const double cv_s_gauss1 =             (N[0]*(bdf0*p[0] + bdf1*pn[0] + bdf2*pnn[0]) + N[1]*(bdf0*p[1] + bdf1*pn[1] + bdf2*pnn[1]) + N[2]*(bdf0*p[2] + bdf1*pn[2] + bdf2*pnn[2]))/pow(c, 2);
    const double cv_s_gauss2 =             -N[0]*vmesh(0,0) - N[1]*vmesh(1,0) - N[2]*vmesh(2,0) + cv_s_gauss0;
    const double cv_s_gauss3 =             N[0]*v(0,1) + N[1]*v(1,1) + N[2]*v(2,1);
    const double cv_s_gauss4 =             -N[0]*vmesh(0,1) - N[1]*vmesh(1,1) - N[2]*vmesh(2,1) + cv_s_gauss3;

    v_s_gauss[0]=-tau1*(DN(0,0)*p[0] + DN(1,0)*p[1] + DN(2,0)*p[2] + cv_s_gauss0*cv_s_gauss1 + rho*(-N[0]*f(0,0) + N[0]*(bdf0*v(0,0) + bdf1*vn(0,0) + bdf2*vnn(0,0)) - N[1]*f(1,0) + N[1]*(bdf0*v(1,0) + bdf1*vn(1,0) + bdf2*vnn(1,0)) - N[2]*f(2,0) + N[2]*(bdf0*v(2,0) + bdf1*vn(2,0) + bdf2*vnn(2,0)) + cv_s_gauss2*(DN(0,0)*v(0,0) + DN(1,0)*v(1,0) + DN(2,0)*v(2,0)) + cv_s_gauss4*(DN(0,1)*v(0,0) + DN(1,1)*v(1,0) + DN(2,1)*v(2,0))));
    v_s_gauss[1]=-tau1*(DN(0,1)*p[0] + DN(1,1)*p[1] + DN(2,1)*p[2] + cv_s_gauss1*cv_s_gauss3 + rho*(-N[0]*f(0,1) + N[0]*(bdf0*v(0,1) + bdf1*vn(0,1) + bdf2*vnn(0,1)) - N[1]*f(1,1) + N[1]*(bdf0*v(1,1) + bdf1*vn(1,1) + bdf2*vnn(1,1)) - N[2]*f(2,1) + N[2]*(bdf0*v(2,1) + bdf1*vn(2,1) + bdf2*vnn(2,1)) + cv_s_gauss2*(DN(0,0)*v(0,1) + DN(1,0)*v(1,1) + DN(2,0)*v(2,1)) + cv_s_gauss4*(DN(0,1)*v(0,1) + DN(1,1)*v(1,1) + DN(2,1)*v(2,1))));

    const double v_gauss_norm = norm_2(v_gauss);
    const double v_s_gauss_norm = norm_2(v_s_gauss);

    return v_s_gauss_norm/v_gauss_norm;
}

}
