#include "custom_elements/stokes_3D_twofluid.h"

namespace Kratos
{


void Stokes3DTwoFluid::ComputeGaussPointLHSContribution(bounded_matrix<double,16,16>& lhs, const element_data<4,3>& data)
{
    const int nnodes = 4;
    const int dim = 3;

    const double rho = inner_prod(data.N, data.rho);
    const double& bdf0 = data.bdf0;

    //get constitutive matrix
    const Matrix& C = data.C;

    //get shape function values
    const bounded_matrix<double,nnodes,dim>& DN = data.DN_DX;
    const array_1d<double,nnodes>& N = data.N;


    //compute an equivalent tau by Bitrans*c*Bi
    const double tau_denom =             (C(3,3) + C(4,4) + C(5,5))*(pow(DN(0,0), 2) + pow(DN(0,1), 2) + pow(DN(0,2), 2) + pow(DN(1,0), 2) + pow(DN(1,1), 2) + pow(DN(1,2), 2) + pow(DN(2,0), 2) + pow(DN(2,1), 2) + pow(DN(2,2), 2) + pow(DN(3,0), 2) + pow(DN(3,1), 2) + pow(DN(3,2), 2));

    const double tau1 = 1.0/(tau_denom);


    const double clhs0 =             bdf0*rho;
    const double clhs1 =             pow(N[0], 2)*clhs0;
    const double clhs2 =             C(0,0)*DN(0,0) + C(0,3)*DN(0,1) + C(0,5)*DN(0,2);
    const double clhs3 =             C(0,3)*DN(0,0);
    const double clhs4 =             C(3,3)*DN(0,1) + C(3,5)*DN(0,2) + clhs3;
    const double clhs5 =             C(0,5)*DN(0,0);
    const double clhs6 =             C(3,5)*DN(0,1) + C(5,5)*DN(0,2) + clhs5;
    const double clhs7 =             C(0,1)*DN(0,1) + C(0,4)*DN(0,2) + clhs3;
    const double clhs8 =             C(1,3)*DN(0,1);
    const double clhs9 =             C(3,3)*DN(0,0) + C(3,4)*DN(0,2) + clhs8;
    const double clhs10 =             C(3,5)*DN(0,0);
    const double clhs11 =             C(4,5)*DN(0,2);
    const double clhs12 =             C(1,5)*DN(0,1) + clhs10 + clhs11;
    const double clhs13 =             C(0,2)*DN(0,2) + C(0,4)*DN(0,1) + clhs5;
    const double clhs14 =             C(3,4)*DN(0,1);
    const double clhs15 =             C(2,3)*DN(0,2) + clhs10 + clhs14;
    const double clhs16 =             C(2,5)*DN(0,2);
    const double clhs17 =             C(4,5)*DN(0,1) + C(5,5)*DN(0,0) + clhs16;
    const double clhs18 =             DN(0,0)*N[0];
    const double clhs19 =             N[0]*bdf0*rho;
    const double clhs20 =             N[1]*clhs19;
    const double clhs21 =             C(0,0)*DN(1,0) + C(0,3)*DN(1,1) + C(0,5)*DN(1,2);
    const double clhs22 =             C(0,3)*DN(1,0);
    const double clhs23 =             C(3,3)*DN(1,1) + C(3,5)*DN(1,2) + clhs22;
    const double clhs24 =             C(0,5)*DN(1,0);
    const double clhs25 =             C(3,5)*DN(1,1) + C(5,5)*DN(1,2) + clhs24;
    const double clhs26 =             C(0,1)*DN(1,1) + C(0,4)*DN(1,2) + clhs22;
    const double clhs27 =             C(1,3)*DN(1,1);
    const double clhs28 =             C(3,3)*DN(1,0) + C(3,4)*DN(1,2) + clhs27;
    const double clhs29 =             C(3,5)*DN(1,0);
    const double clhs30 =             C(4,5)*DN(1,2);
    const double clhs31 =             C(1,5)*DN(1,1) + clhs29 + clhs30;
    const double clhs32 =             C(0,2)*DN(1,2) + C(0,4)*DN(1,1) + clhs24;
    const double clhs33 =             C(3,4)*DN(1,1);
    const double clhs34 =             C(2,3)*DN(1,2) + clhs29 + clhs33;
    const double clhs35 =             C(2,5)*DN(1,2);
    const double clhs36 =             C(4,5)*DN(1,1) + C(5,5)*DN(1,0) + clhs35;
    const double clhs37 =             DN(0,0)*N[1];
    const double clhs38 =             N[2]*clhs19;
    const double clhs39 =             C(0,0)*DN(2,0) + C(0,3)*DN(2,1) + C(0,5)*DN(2,2);
    const double clhs40 =             C(0,3)*DN(2,0);
    const double clhs41 =             C(3,3)*DN(2,1) + C(3,5)*DN(2,2) + clhs40;
    const double clhs42 =             C(0,5)*DN(2,0);
    const double clhs43 =             C(3,5)*DN(2,1) + C(5,5)*DN(2,2) + clhs42;
    const double clhs44 =             C(0,1)*DN(2,1) + C(0,4)*DN(2,2) + clhs40;
    const double clhs45 =             C(1,3)*DN(2,1);
    const double clhs46 =             C(3,3)*DN(2,0) + C(3,4)*DN(2,2) + clhs45;
    const double clhs47 =             C(3,5)*DN(2,0);
    const double clhs48 =             C(4,5)*DN(2,2);
    const double clhs49 =             C(1,5)*DN(2,1) + clhs47 + clhs48;
    const double clhs50 =             C(0,2)*DN(2,2) + C(0,4)*DN(2,1) + clhs42;
    const double clhs51 =             C(3,4)*DN(2,1);
    const double clhs52 =             C(2,3)*DN(2,2) + clhs47 + clhs51;
    const double clhs53 =             C(2,5)*DN(2,2);
    const double clhs54 =             C(4,5)*DN(2,1) + C(5,5)*DN(2,0) + clhs53;
    const double clhs55 =             DN(0,0)*N[2];
    const double clhs56 =             N[3]*clhs19;
    const double clhs57 =             C(0,0)*DN(3,0) + C(0,3)*DN(3,1) + C(0,5)*DN(3,2);
    const double clhs58 =             C(0,3)*DN(3,0);
    const double clhs59 =             C(3,3)*DN(3,1) + C(3,5)*DN(3,2) + clhs58;
    const double clhs60 =             C(0,5)*DN(3,0);
    const double clhs61 =             C(3,5)*DN(3,1) + C(5,5)*DN(3,2) + clhs60;
    const double clhs62 =             C(0,1)*DN(3,1) + C(0,4)*DN(3,2) + clhs58;
    const double clhs63 =             C(1,3)*DN(3,1);
    const double clhs64 =             C(3,3)*DN(3,0) + C(3,4)*DN(3,2) + clhs63;
    const double clhs65 =             C(3,5)*DN(3,0);
    const double clhs66 =             C(4,5)*DN(3,2);
    const double clhs67 =             C(1,5)*DN(3,1) + clhs65 + clhs66;
    const double clhs68 =             C(0,2)*DN(3,2) + C(0,4)*DN(3,1) + clhs60;
    const double clhs69 =             C(3,4)*DN(3,1);
    const double clhs70 =             C(2,3)*DN(3,2) + clhs65 + clhs69;
    const double clhs71 =             C(2,5)*DN(3,2);
    const double clhs72 =             C(4,5)*DN(3,1) + C(5,5)*DN(3,0) + clhs71;
    const double clhs73 =             DN(0,0)*N[3];
    const double clhs74 =             C(0,1)*DN(0,0) + C(1,5)*DN(0,2) + clhs8;
    const double clhs75 =             C(0,4)*DN(0,0) + clhs11 + clhs14;
    const double clhs76 =             C(1,1)*DN(0,1) + C(1,3)*DN(0,0) + C(1,4)*DN(0,2);
    const double clhs77 =             C(1,4)*DN(0,1);
    const double clhs78 =             C(3,4)*DN(0,0) + C(4,4)*DN(0,2) + clhs77;
    const double clhs79 =             C(1,2)*DN(0,2) + C(1,5)*DN(0,0) + clhs77;
    const double clhs80 =             C(2,4)*DN(0,2);
    const double clhs81 =             C(4,4)*DN(0,1) + C(4,5)*DN(0,0) + clhs80;
    const double clhs82 =             DN(0,1)*N[0];
    const double clhs83 =             C(0,1)*DN(1,0) + C(1,5)*DN(1,2) + clhs27;
    const double clhs84 =             C(0,4)*DN(1,0) + clhs30 + clhs33;
    const double clhs85 =             C(1,1)*DN(1,1) + C(1,3)*DN(1,0) + C(1,4)*DN(1,2);
    const double clhs86 =             C(1,4)*DN(1,1);
    const double clhs87 =             C(3,4)*DN(1,0) + C(4,4)*DN(1,2) + clhs86;
    const double clhs88 =             C(1,2)*DN(1,2) + C(1,5)*DN(1,0) + clhs86;
    const double clhs89 =             C(2,4)*DN(1,2);
    const double clhs90 =             C(4,4)*DN(1,1) + C(4,5)*DN(1,0) + clhs89;
    const double clhs91 =             DN(0,1)*N[1];
    const double clhs92 =             C(0,1)*DN(2,0) + C(1,5)*DN(2,2) + clhs45;
    const double clhs93 =             C(0,4)*DN(2,0) + clhs48 + clhs51;
    const double clhs94 =             C(1,1)*DN(2,1) + C(1,3)*DN(2,0) + C(1,4)*DN(2,2);
    const double clhs95 =             C(1,4)*DN(2,1);
    const double clhs96 =             C(3,4)*DN(2,0) + C(4,4)*DN(2,2) + clhs95;
    const double clhs97 =             C(1,2)*DN(2,2) + C(1,5)*DN(2,0) + clhs95;
    const double clhs98 =             C(2,4)*DN(2,2);
    const double clhs99 =             C(4,4)*DN(2,1) + C(4,5)*DN(2,0) + clhs98;
    const double clhs100 =             DN(0,1)*N[2];
    const double clhs101 =             C(0,1)*DN(3,0) + C(1,5)*DN(3,2) + clhs63;
    const double clhs102 =             C(0,4)*DN(3,0) + clhs66 + clhs69;
    const double clhs103 =             C(1,1)*DN(3,1) + C(1,3)*DN(3,0) + C(1,4)*DN(3,2);
    const double clhs104 =             C(1,4)*DN(3,1);
    const double clhs105 =             C(3,4)*DN(3,0) + C(4,4)*DN(3,2) + clhs104;
    const double clhs106 =             C(1,2)*DN(3,2) + C(1,5)*DN(3,0) + clhs104;
    const double clhs107 =             C(2,4)*DN(3,2);
    const double clhs108 =             C(4,4)*DN(3,1) + C(4,5)*DN(3,0) + clhs107;
    const double clhs109 =             DN(0,1)*N[3];
    const double clhs110 =             C(0,2)*DN(0,0) + C(2,3)*DN(0,1) + clhs16;
    const double clhs111 =             C(1,2)*DN(0,1) + C(2,3)*DN(0,0) + clhs80;
    const double clhs112 =             C(2,2)*DN(0,2) + C(2,4)*DN(0,1) + C(2,5)*DN(0,0);
    const double clhs113 =             DN(0,2)*N[0];
    const double clhs114 =             C(0,2)*DN(1,0) + C(2,3)*DN(1,1) + clhs35;
    const double clhs115 =             C(1,2)*DN(1,1) + C(2,3)*DN(1,0) + clhs89;
    const double clhs116 =             C(2,2)*DN(1,2) + C(2,4)*DN(1,1) + C(2,5)*DN(1,0);
    const double clhs117 =             DN(0,2)*N[1];
    const double clhs118 =             C(0,2)*DN(2,0) + C(2,3)*DN(2,1) + clhs53;
    const double clhs119 =             C(1,2)*DN(2,1) + C(2,3)*DN(2,0) + clhs98;
    const double clhs120 =             C(2,2)*DN(2,2) + C(2,4)*DN(2,1) + C(2,5)*DN(2,0);
    const double clhs121 =             DN(0,2)*N[2];
    const double clhs122 =             C(0,2)*DN(3,0) + C(2,3)*DN(3,1) + clhs71;
    const double clhs123 =             C(1,2)*DN(3,1) + C(2,3)*DN(3,0) + clhs107;
    const double clhs124 =             C(2,2)*DN(3,2) + C(2,4)*DN(3,1) + C(2,5)*DN(3,0);
    const double clhs125 =             DN(0,2)*N[3];
    const double clhs126 =             bdf0*pow(rho, 2)*tau1;
    const double clhs127 =             clhs126 + 1;
    const double clhs128 =             rho*tau1;
    const double clhs129 =             DN(1,0)*N[0];
    const double clhs130 =             DN(1,1)*N[0];
    const double clhs131 =             DN(1,2)*N[0];
    const double clhs132 =             clhs128*(DN(0,0)*DN(1,0) + DN(0,1)*DN(1,1) + DN(0,2)*DN(1,2));
    const double clhs133 =             DN(2,0)*N[0];
    const double clhs134 =             DN(2,1)*N[0];
    const double clhs135 =             DN(2,2)*N[0];
    const double clhs136 =             clhs128*(DN(0,0)*DN(2,0) + DN(0,1)*DN(2,1) + DN(0,2)*DN(2,2));
    const double clhs137 =             DN(3,0)*N[0];
    const double clhs138 =             DN(3,1)*N[0];
    const double clhs139 =             DN(3,2)*N[0];
    const double clhs140 =             clhs128*(DN(0,0)*DN(3,0) + DN(0,1)*DN(3,1) + DN(0,2)*DN(3,2));
    const double clhs141 =             pow(N[1], 2)*clhs0;
    const double clhs142 =             DN(1,0)*N[1];
    const double clhs143 =             N[1]*bdf0*rho;
    const double clhs144 =             N[2]*clhs143;
    const double clhs145 =             DN(1,0)*N[2];
    const double clhs146 =             N[3]*clhs143;
    const double clhs147 =             DN(1,0)*N[3];
    const double clhs148 =             DN(1,1)*N[1];
    const double clhs149 =             DN(1,1)*N[2];
    const double clhs150 =             DN(1,1)*N[3];
    const double clhs151 =             DN(1,2)*N[1];
    const double clhs152 =             DN(1,2)*N[2];
    const double clhs153 =             DN(1,2)*N[3];
    const double clhs154 =             DN(2,0)*N[1];
    const double clhs155 =             DN(2,1)*N[1];
    const double clhs156 =             DN(2,2)*N[1];
    const double clhs157 =             clhs128*(DN(1,0)*DN(2,0) + DN(1,1)*DN(2,1) + DN(1,2)*DN(2,2));
    const double clhs158 =             DN(3,0)*N[1];
    const double clhs159 =             DN(3,1)*N[1];
    const double clhs160 =             DN(3,2)*N[1];
    const double clhs161 =             clhs128*(DN(1,0)*DN(3,0) + DN(1,1)*DN(3,1) + DN(1,2)*DN(3,2));
    const double clhs162 =             pow(N[2], 2)*clhs0;
    const double clhs163 =             DN(2,0)*N[2];
    const double clhs164 =             N[2]*N[3]*clhs0;
    const double clhs165 =             DN(2,0)*N[3];
    const double clhs166 =             DN(2,1)*N[2];
    const double clhs167 =             DN(2,1)*N[3];
    const double clhs168 =             DN(2,2)*N[2];
    const double clhs169 =             DN(2,2)*N[3];
    const double clhs170 =             DN(3,0)*N[2];
    const double clhs171 =             DN(3,1)*N[2];
    const double clhs172 =             DN(3,2)*N[2];
    const double clhs173 =             clhs128*(DN(2,0)*DN(3,0) + DN(2,1)*DN(3,1) + DN(2,2)*DN(3,2));
    const double clhs174 =             pow(N[3], 2)*clhs0;
    const double clhs175 =             DN(3,0)*N[3];
    const double clhs176 =             DN(3,1)*N[3];
    const double clhs177 =             DN(3,2)*N[3];
    lhs(0,0)=DN(0,0)*clhs2 + DN(0,1)*clhs4 + DN(0,2)*clhs6 + clhs1;
    lhs(0,1)=DN(0,0)*clhs7 + DN(0,1)*clhs9 + DN(0,2)*clhs12;
    lhs(0,2)=DN(0,0)*clhs13 + DN(0,1)*clhs15 + DN(0,2)*clhs17;
    lhs(0,3)=-clhs18;
    lhs(0,4)=DN(0,0)*clhs21 + DN(0,1)*clhs23 + DN(0,2)*clhs25 + clhs20;
    lhs(0,5)=DN(0,0)*clhs26 + DN(0,1)*clhs28 + DN(0,2)*clhs31;
    lhs(0,6)=DN(0,0)*clhs32 + DN(0,1)*clhs34 + DN(0,2)*clhs36;
    lhs(0,7)=-clhs37;
    lhs(0,8)=DN(0,0)*clhs39 + DN(0,1)*clhs41 + DN(0,2)*clhs43 + clhs38;
    lhs(0,9)=DN(0,0)*clhs44 + DN(0,1)*clhs46 + DN(0,2)*clhs49;
    lhs(0,10)=DN(0,0)*clhs50 + DN(0,1)*clhs52 + DN(0,2)*clhs54;
    lhs(0,11)=-clhs55;
    lhs(0,12)=DN(0,0)*clhs57 + DN(0,1)*clhs59 + DN(0,2)*clhs61 + clhs56;
    lhs(0,13)=DN(0,0)*clhs62 + DN(0,1)*clhs64 + DN(0,2)*clhs67;
    lhs(0,14)=DN(0,0)*clhs68 + DN(0,1)*clhs70 + DN(0,2)*clhs72;
    lhs(0,15)=-clhs73;
    lhs(1,0)=DN(0,0)*clhs4 + DN(0,1)*clhs74 + DN(0,2)*clhs75;
    lhs(1,1)=DN(0,0)*clhs9 + DN(0,1)*clhs76 + DN(0,2)*clhs78 + clhs1;
    lhs(1,2)=DN(0,0)*clhs15 + DN(0,1)*clhs79 + DN(0,2)*clhs81;
    lhs(1,3)=-clhs82;
    lhs(1,4)=DN(0,0)*clhs23 + DN(0,1)*clhs83 + DN(0,2)*clhs84;
    lhs(1,5)=DN(0,0)*clhs28 + DN(0,1)*clhs85 + DN(0,2)*clhs87 + clhs20;
    lhs(1,6)=DN(0,0)*clhs34 + DN(0,1)*clhs88 + DN(0,2)*clhs90;
    lhs(1,7)=-clhs91;
    lhs(1,8)=DN(0,0)*clhs41 + DN(0,1)*clhs92 + DN(0,2)*clhs93;
    lhs(1,9)=DN(0,0)*clhs46 + DN(0,1)*clhs94 + DN(0,2)*clhs96 + clhs38;
    lhs(1,10)=DN(0,0)*clhs52 + DN(0,1)*clhs97 + DN(0,2)*clhs99;
    lhs(1,11)=-clhs100;
    lhs(1,12)=DN(0,0)*clhs59 + DN(0,1)*clhs101 + DN(0,2)*clhs102;
    lhs(1,13)=DN(0,0)*clhs64 + DN(0,1)*clhs103 + DN(0,2)*clhs105 + clhs56;
    lhs(1,14)=DN(0,0)*clhs70 + DN(0,1)*clhs106 + DN(0,2)*clhs108;
    lhs(1,15)=-clhs109;
    lhs(2,0)=DN(0,0)*clhs6 + DN(0,1)*clhs75 + DN(0,2)*clhs110;
    lhs(2,1)=DN(0,0)*clhs12 + DN(0,1)*clhs78 + DN(0,2)*clhs111;
    lhs(2,2)=DN(0,0)*clhs17 + DN(0,1)*clhs81 + DN(0,2)*clhs112 + clhs1;
    lhs(2,3)=-clhs113;
    lhs(2,4)=DN(0,0)*clhs25 + DN(0,1)*clhs84 + DN(0,2)*clhs114;
    lhs(2,5)=DN(0,0)*clhs31 + DN(0,1)*clhs87 + DN(0,2)*clhs115;
    lhs(2,6)=DN(0,0)*clhs36 + DN(0,1)*clhs90 + DN(0,2)*clhs116 + clhs20;
    lhs(2,7)=-clhs117;
    lhs(2,8)=DN(0,0)*clhs43 + DN(0,1)*clhs93 + DN(0,2)*clhs118;
    lhs(2,9)=DN(0,0)*clhs49 + DN(0,1)*clhs96 + DN(0,2)*clhs119;
    lhs(2,10)=DN(0,0)*clhs54 + DN(0,1)*clhs99 + DN(0,2)*clhs120 + clhs38;
    lhs(2,11)=-clhs121;
    lhs(2,12)=DN(0,0)*clhs61 + DN(0,1)*clhs102 + DN(0,2)*clhs122;
    lhs(2,13)=DN(0,0)*clhs67 + DN(0,1)*clhs105 + DN(0,2)*clhs123;
    lhs(2,14)=DN(0,0)*clhs72 + DN(0,1)*clhs108 + DN(0,2)*clhs124 + clhs56;
    lhs(2,15)=-clhs125;
    lhs(3,0)=clhs127*clhs18;
    lhs(3,1)=clhs127*clhs82;
    lhs(3,2)=clhs113*clhs127;
    lhs(3,3)=clhs128*(pow(DN(0,0), 2) + pow(DN(0,1), 2) + pow(DN(0,2), 2));
    lhs(3,4)=clhs126*clhs37 + clhs129;
    lhs(3,5)=clhs126*clhs91 + clhs130;
    lhs(3,6)=clhs117*clhs126 + clhs131;
    lhs(3,7)=clhs132;
    lhs(3,8)=clhs126*clhs55 + clhs133;
    lhs(3,9)=clhs100*clhs126 + clhs134;
    lhs(3,10)=clhs121*clhs126 + clhs135;
    lhs(3,11)=clhs136;
    lhs(3,12)=clhs126*clhs73 + clhs137;
    lhs(3,13)=clhs109*clhs126 + clhs138;
    lhs(3,14)=clhs125*clhs126 + clhs139;
    lhs(3,15)=clhs140;
    lhs(4,0)=DN(1,0)*clhs2 + DN(1,1)*clhs4 + DN(1,2)*clhs6 + clhs20;
    lhs(4,1)=DN(1,0)*clhs7 + DN(1,1)*clhs9 + DN(1,2)*clhs12;
    lhs(4,2)=DN(1,0)*clhs13 + DN(1,1)*clhs15 + DN(1,2)*clhs17;
    lhs(4,3)=-clhs129;
    lhs(4,4)=DN(1,0)*clhs21 + DN(1,1)*clhs23 + DN(1,2)*clhs25 + clhs141;
    lhs(4,5)=DN(1,0)*clhs26 + DN(1,1)*clhs28 + DN(1,2)*clhs31;
    lhs(4,6)=DN(1,0)*clhs32 + DN(1,1)*clhs34 + DN(1,2)*clhs36;
    lhs(4,7)=-clhs142;
    lhs(4,8)=DN(1,0)*clhs39 + DN(1,1)*clhs41 + DN(1,2)*clhs43 + clhs144;
    lhs(4,9)=DN(1,0)*clhs44 + DN(1,1)*clhs46 + DN(1,2)*clhs49;
    lhs(4,10)=DN(1,0)*clhs50 + DN(1,1)*clhs52 + DN(1,2)*clhs54;
    lhs(4,11)=-clhs145;
    lhs(4,12)=DN(1,0)*clhs57 + DN(1,1)*clhs59 + DN(1,2)*clhs61 + clhs146;
    lhs(4,13)=DN(1,0)*clhs62 + DN(1,1)*clhs64 + DN(1,2)*clhs67;
    lhs(4,14)=DN(1,0)*clhs68 + DN(1,1)*clhs70 + DN(1,2)*clhs72;
    lhs(4,15)=-clhs147;
    lhs(5,0)=DN(1,0)*clhs4 + DN(1,1)*clhs74 + DN(1,2)*clhs75;
    lhs(5,1)=DN(1,0)*clhs9 + DN(1,1)*clhs76 + DN(1,2)*clhs78 + clhs20;
    lhs(5,2)=DN(1,0)*clhs15 + DN(1,1)*clhs79 + DN(1,2)*clhs81;
    lhs(5,3)=-clhs130;
    lhs(5,4)=DN(1,0)*clhs23 + DN(1,1)*clhs83 + DN(1,2)*clhs84;
    lhs(5,5)=DN(1,0)*clhs28 + DN(1,1)*clhs85 + DN(1,2)*clhs87 + clhs141;
    lhs(5,6)=DN(1,0)*clhs34 + DN(1,1)*clhs88 + DN(1,2)*clhs90;
    lhs(5,7)=-clhs148;
    lhs(5,8)=DN(1,0)*clhs41 + DN(1,1)*clhs92 + DN(1,2)*clhs93;
    lhs(5,9)=DN(1,0)*clhs46 + DN(1,1)*clhs94 + DN(1,2)*clhs96 + clhs144;
    lhs(5,10)=DN(1,0)*clhs52 + DN(1,1)*clhs97 + DN(1,2)*clhs99;
    lhs(5,11)=-clhs149;
    lhs(5,12)=DN(1,0)*clhs59 + DN(1,1)*clhs101 + DN(1,2)*clhs102;
    lhs(5,13)=DN(1,0)*clhs64 + DN(1,1)*clhs103 + DN(1,2)*clhs105 + clhs146;
    lhs(5,14)=DN(1,0)*clhs70 + DN(1,1)*clhs106 + DN(1,2)*clhs108;
    lhs(5,15)=-clhs150;
    lhs(6,0)=DN(1,0)*clhs6 + DN(1,1)*clhs75 + DN(1,2)*clhs110;
    lhs(6,1)=DN(1,0)*clhs12 + DN(1,1)*clhs78 + DN(1,2)*clhs111;
    lhs(6,2)=DN(1,0)*clhs17 + DN(1,1)*clhs81 + DN(1,2)*clhs112 + clhs20;
    lhs(6,3)=-clhs131;
    lhs(6,4)=DN(1,0)*clhs25 + DN(1,1)*clhs84 + DN(1,2)*clhs114;
    lhs(6,5)=DN(1,0)*clhs31 + DN(1,1)*clhs87 + DN(1,2)*clhs115;
    lhs(6,6)=DN(1,0)*clhs36 + DN(1,1)*clhs90 + DN(1,2)*clhs116 + clhs141;
    lhs(6,7)=-clhs151;
    lhs(6,8)=DN(1,0)*clhs43 + DN(1,1)*clhs93 + DN(1,2)*clhs118;
    lhs(6,9)=DN(1,0)*clhs49 + DN(1,1)*clhs96 + DN(1,2)*clhs119;
    lhs(6,10)=DN(1,0)*clhs54 + DN(1,1)*clhs99 + DN(1,2)*clhs120 + clhs144;
    lhs(6,11)=-clhs152;
    lhs(6,12)=DN(1,0)*clhs61 + DN(1,1)*clhs102 + DN(1,2)*clhs122;
    lhs(6,13)=DN(1,0)*clhs67 + DN(1,1)*clhs105 + DN(1,2)*clhs123;
    lhs(6,14)=DN(1,0)*clhs72 + DN(1,1)*clhs108 + DN(1,2)*clhs124 + clhs146;
    lhs(6,15)=-clhs153;
    lhs(7,0)=clhs126*clhs129 + clhs37;
    lhs(7,1)=clhs126*clhs130 + clhs91;
    lhs(7,2)=clhs117 + clhs126*clhs131;
    lhs(7,3)=clhs132;
    lhs(7,4)=clhs127*clhs142;
    lhs(7,5)=clhs127*clhs148;
    lhs(7,6)=clhs127*clhs151;
    lhs(7,7)=clhs128*(pow(DN(1,0), 2) + pow(DN(1,1), 2) + pow(DN(1,2), 2));
    lhs(7,8)=clhs126*clhs145 + clhs154;
    lhs(7,9)=clhs126*clhs149 + clhs155;
    lhs(7,10)=clhs126*clhs152 + clhs156;
    lhs(7,11)=clhs157;
    lhs(7,12)=clhs126*clhs147 + clhs158;
    lhs(7,13)=clhs126*clhs150 + clhs159;
    lhs(7,14)=clhs126*clhs153 + clhs160;
    lhs(7,15)=clhs161;
    lhs(8,0)=DN(2,0)*clhs2 + DN(2,1)*clhs4 + DN(2,2)*clhs6 + clhs38;
    lhs(8,1)=DN(2,0)*clhs7 + DN(2,1)*clhs9 + DN(2,2)*clhs12;
    lhs(8,2)=DN(2,0)*clhs13 + DN(2,1)*clhs15 + DN(2,2)*clhs17;
    lhs(8,3)=-clhs133;
    lhs(8,4)=DN(2,0)*clhs21 + DN(2,1)*clhs23 + DN(2,2)*clhs25 + clhs144;
    lhs(8,5)=DN(2,0)*clhs26 + DN(2,1)*clhs28 + DN(2,2)*clhs31;
    lhs(8,6)=DN(2,0)*clhs32 + DN(2,1)*clhs34 + DN(2,2)*clhs36;
    lhs(8,7)=-clhs154;
    lhs(8,8)=DN(2,0)*clhs39 + DN(2,1)*clhs41 + DN(2,2)*clhs43 + clhs162;
    lhs(8,9)=DN(2,0)*clhs44 + DN(2,1)*clhs46 + DN(2,2)*clhs49;
    lhs(8,10)=DN(2,0)*clhs50 + DN(2,1)*clhs52 + DN(2,2)*clhs54;
    lhs(8,11)=-clhs163;
    lhs(8,12)=DN(2,0)*clhs57 + DN(2,1)*clhs59 + DN(2,2)*clhs61 + clhs164;
    lhs(8,13)=DN(2,0)*clhs62 + DN(2,1)*clhs64 + DN(2,2)*clhs67;
    lhs(8,14)=DN(2,0)*clhs68 + DN(2,1)*clhs70 + DN(2,2)*clhs72;
    lhs(8,15)=-clhs165;
    lhs(9,0)=DN(2,0)*clhs4 + DN(2,1)*clhs74 + DN(2,2)*clhs75;
    lhs(9,1)=DN(2,0)*clhs9 + DN(2,1)*clhs76 + DN(2,2)*clhs78 + clhs38;
    lhs(9,2)=DN(2,0)*clhs15 + DN(2,1)*clhs79 + DN(2,2)*clhs81;
    lhs(9,3)=-clhs134;
    lhs(9,4)=DN(2,0)*clhs23 + DN(2,1)*clhs83 + DN(2,2)*clhs84;
    lhs(9,5)=DN(2,0)*clhs28 + DN(2,1)*clhs85 + DN(2,2)*clhs87 + clhs144;
    lhs(9,6)=DN(2,0)*clhs34 + DN(2,1)*clhs88 + DN(2,2)*clhs90;
    lhs(9,7)=-clhs155;
    lhs(9,8)=DN(2,0)*clhs41 + DN(2,1)*clhs92 + DN(2,2)*clhs93;
    lhs(9,9)=DN(2,0)*clhs46 + DN(2,1)*clhs94 + DN(2,2)*clhs96 + clhs162;
    lhs(9,10)=DN(2,0)*clhs52 + DN(2,1)*clhs97 + DN(2,2)*clhs99;
    lhs(9,11)=-clhs166;
    lhs(9,12)=DN(2,0)*clhs59 + DN(2,1)*clhs101 + DN(2,2)*clhs102;
    lhs(9,13)=DN(2,0)*clhs64 + DN(2,1)*clhs103 + DN(2,2)*clhs105 + clhs164;
    lhs(9,14)=DN(2,0)*clhs70 + DN(2,1)*clhs106 + DN(2,2)*clhs108;
    lhs(9,15)=-clhs167;
    lhs(10,0)=DN(2,0)*clhs6 + DN(2,1)*clhs75 + DN(2,2)*clhs110;
    lhs(10,1)=DN(2,0)*clhs12 + DN(2,1)*clhs78 + DN(2,2)*clhs111;
    lhs(10,2)=DN(2,0)*clhs17 + DN(2,1)*clhs81 + DN(2,2)*clhs112 + clhs38;
    lhs(10,3)=-clhs135;
    lhs(10,4)=DN(2,0)*clhs25 + DN(2,1)*clhs84 + DN(2,2)*clhs114;
    lhs(10,5)=DN(2,0)*clhs31 + DN(2,1)*clhs87 + DN(2,2)*clhs115;
    lhs(10,6)=DN(2,0)*clhs36 + DN(2,1)*clhs90 + DN(2,2)*clhs116 + clhs144;
    lhs(10,7)=-clhs156;
    lhs(10,8)=DN(2,0)*clhs43 + DN(2,1)*clhs93 + DN(2,2)*clhs118;
    lhs(10,9)=DN(2,0)*clhs49 + DN(2,1)*clhs96 + DN(2,2)*clhs119;
    lhs(10,10)=DN(2,0)*clhs54 + DN(2,1)*clhs99 + DN(2,2)*clhs120 + clhs162;
    lhs(10,11)=-clhs168;
    lhs(10,12)=DN(2,0)*clhs61 + DN(2,1)*clhs102 + DN(2,2)*clhs122;
    lhs(10,13)=DN(2,0)*clhs67 + DN(2,1)*clhs105 + DN(2,2)*clhs123;
    lhs(10,14)=DN(2,0)*clhs72 + DN(2,1)*clhs108 + DN(2,2)*clhs124 + clhs164;
    lhs(10,15)=-clhs169;
    lhs(11,0)=clhs126*clhs133 + clhs55;
    lhs(11,1)=clhs100 + clhs126*clhs134;
    lhs(11,2)=clhs121 + clhs126*clhs135;
    lhs(11,3)=clhs136;
    lhs(11,4)=clhs126*clhs154 + clhs145;
    lhs(11,5)=clhs126*clhs155 + clhs149;
    lhs(11,6)=clhs126*clhs156 + clhs152;
    lhs(11,7)=clhs157;
    lhs(11,8)=clhs127*clhs163;
    lhs(11,9)=clhs127*clhs166;
    lhs(11,10)=clhs127*clhs168;
    lhs(11,11)=clhs128*(pow(DN(2,0), 2) + pow(DN(2,1), 2) + pow(DN(2,2), 2));
    lhs(11,12)=clhs126*clhs165 + clhs170;
    lhs(11,13)=clhs126*clhs167 + clhs171;
    lhs(11,14)=clhs126*clhs169 + clhs172;
    lhs(11,15)=clhs173;
    lhs(12,0)=DN(3,0)*clhs2 + DN(3,1)*clhs4 + DN(3,2)*clhs6 + clhs56;
    lhs(12,1)=DN(3,0)*clhs7 + DN(3,1)*clhs9 + DN(3,2)*clhs12;
    lhs(12,2)=DN(3,0)*clhs13 + DN(3,1)*clhs15 + DN(3,2)*clhs17;
    lhs(12,3)=-clhs137;
    lhs(12,4)=DN(3,0)*clhs21 + DN(3,1)*clhs23 + DN(3,2)*clhs25 + clhs146;
    lhs(12,5)=DN(3,0)*clhs26 + DN(3,1)*clhs28 + DN(3,2)*clhs31;
    lhs(12,6)=DN(3,0)*clhs32 + DN(3,1)*clhs34 + DN(3,2)*clhs36;
    lhs(12,7)=-clhs158;
    lhs(12,8)=DN(3,0)*clhs39 + DN(3,1)*clhs41 + DN(3,2)*clhs43 + clhs164;
    lhs(12,9)=DN(3,0)*clhs44 + DN(3,1)*clhs46 + DN(3,2)*clhs49;
    lhs(12,10)=DN(3,0)*clhs50 + DN(3,1)*clhs52 + DN(3,2)*clhs54;
    lhs(12,11)=-clhs170;
    lhs(12,12)=DN(3,0)*clhs57 + DN(3,1)*clhs59 + DN(3,2)*clhs61 + clhs174;
    lhs(12,13)=DN(3,0)*clhs62 + DN(3,1)*clhs64 + DN(3,2)*clhs67;
    lhs(12,14)=DN(3,0)*clhs68 + DN(3,1)*clhs70 + DN(3,2)*clhs72;
    lhs(12,15)=-clhs175;
    lhs(13,0)=DN(3,0)*clhs4 + DN(3,1)*clhs74 + DN(3,2)*clhs75;
    lhs(13,1)=DN(3,0)*clhs9 + DN(3,1)*clhs76 + DN(3,2)*clhs78 + clhs56;
    lhs(13,2)=DN(3,0)*clhs15 + DN(3,1)*clhs79 + DN(3,2)*clhs81;
    lhs(13,3)=-clhs138;
    lhs(13,4)=DN(3,0)*clhs23 + DN(3,1)*clhs83 + DN(3,2)*clhs84;
    lhs(13,5)=DN(3,0)*clhs28 + DN(3,1)*clhs85 + DN(3,2)*clhs87 + clhs146;
    lhs(13,6)=DN(3,0)*clhs34 + DN(3,1)*clhs88 + DN(3,2)*clhs90;
    lhs(13,7)=-clhs159;
    lhs(13,8)=DN(3,0)*clhs41 + DN(3,1)*clhs92 + DN(3,2)*clhs93;
    lhs(13,9)=DN(3,0)*clhs46 + DN(3,1)*clhs94 + DN(3,2)*clhs96 + clhs164;
    lhs(13,10)=DN(3,0)*clhs52 + DN(3,1)*clhs97 + DN(3,2)*clhs99;
    lhs(13,11)=-clhs171;
    lhs(13,12)=DN(3,0)*clhs59 + DN(3,1)*clhs101 + DN(3,2)*clhs102;
    lhs(13,13)=DN(3,0)*clhs64 + DN(3,1)*clhs103 + DN(3,2)*clhs105 + clhs174;
    lhs(13,14)=DN(3,0)*clhs70 + DN(3,1)*clhs106 + DN(3,2)*clhs108;
    lhs(13,15)=-clhs176;
    lhs(14,0)=DN(3,0)*clhs6 + DN(3,1)*clhs75 + DN(3,2)*clhs110;
    lhs(14,1)=DN(3,0)*clhs12 + DN(3,1)*clhs78 + DN(3,2)*clhs111;
    lhs(14,2)=DN(3,0)*clhs17 + DN(3,1)*clhs81 + DN(3,2)*clhs112 + clhs56;
    lhs(14,3)=-clhs139;
    lhs(14,4)=DN(3,0)*clhs25 + DN(3,1)*clhs84 + DN(3,2)*clhs114;
    lhs(14,5)=DN(3,0)*clhs31 + DN(3,1)*clhs87 + DN(3,2)*clhs115;
    lhs(14,6)=DN(3,0)*clhs36 + DN(3,1)*clhs90 + DN(3,2)*clhs116 + clhs146;
    lhs(14,7)=-clhs160;
    lhs(14,8)=DN(3,0)*clhs43 + DN(3,1)*clhs93 + DN(3,2)*clhs118;
    lhs(14,9)=DN(3,0)*clhs49 + DN(3,1)*clhs96 + DN(3,2)*clhs119;
    lhs(14,10)=DN(3,0)*clhs54 + DN(3,1)*clhs99 + DN(3,2)*clhs120 + clhs164;
    lhs(14,11)=-clhs172;
    lhs(14,12)=DN(3,0)*clhs61 + DN(3,1)*clhs102 + DN(3,2)*clhs122;
    lhs(14,13)=DN(3,0)*clhs67 + DN(3,1)*clhs105 + DN(3,2)*clhs123;
    lhs(14,14)=DN(3,0)*clhs72 + DN(3,1)*clhs108 + DN(3,2)*clhs124 + clhs174;
    lhs(14,15)=-clhs177;
    lhs(15,0)=clhs126*clhs137 + clhs73;
    lhs(15,1)=clhs109 + clhs126*clhs138;
    lhs(15,2)=clhs125 + clhs126*clhs139;
    lhs(15,3)=clhs140;
    lhs(15,4)=clhs126*clhs158 + clhs147;
    lhs(15,5)=clhs126*clhs159 + clhs150;
    lhs(15,6)=clhs126*clhs160 + clhs153;
    lhs(15,7)=clhs161;
    lhs(15,8)=clhs126*clhs170 + clhs165;
    lhs(15,9)=clhs126*clhs171 + clhs167;
    lhs(15,10)=clhs126*clhs172 + clhs169;
    lhs(15,11)=clhs173;
    lhs(15,12)=clhs127*clhs175;
    lhs(15,13)=clhs127*clhs176;
    lhs(15,14)=clhs127*clhs177;
    lhs(15,15)=clhs128*(pow(DN(3,0), 2) + pow(DN(3,1), 2) + pow(DN(3,2), 2));


}

void Stokes3DTwoFluid::ComputeGaussPointRHSContribution(array_1d<double,16>& rhs, const element_data<4,3>& data)
{
    const int nnodes = 4;
    const int dim = 3;

    const double rho = inner_prod(data.N, data.rho);
    const double& bdf0 = data.bdf0;
    const double& bdf1 = data.bdf1;
    const double& bdf2 = data.bdf2;

    const bounded_matrix<double,nnodes,dim>& v = data.v;
    const bounded_matrix<double,nnodes,dim>& vn = data.vn;
    const bounded_matrix<double,nnodes,dim>& vnn = data.vnn;
    const bounded_matrix<double,nnodes,dim>& f = data.f;
    const array_1d<double,nnodes>& p = data.p;

    //get constitutive matrix
    const Matrix& C = data.C;
    const Vector& stress = data.stress;

    //get shape function values
    const bounded_matrix<double,nnodes,dim>& DN = data.DN_DX;
    const array_1d<double,nnodes>& N = data.N;

    //compute an equivalent tau by Bitrans*c*Bi
    const double tau_denom =             (C(3,3) + C(4,4) + C(5,5))*(pow(DN(0,0), 2) + pow(DN(0,1), 2) + pow(DN(0,2), 2) + pow(DN(1,0), 2) + pow(DN(1,1), 2) + pow(DN(1,2), 2) + pow(DN(2,0), 2) + pow(DN(2,1), 2) + pow(DN(2,2), 2) + pow(DN(3,0), 2) + pow(DN(3,1), 2) + pow(DN(3,2), 2));

    const double tau1 = 1.0/(tau_denom);

    //auxiliary variables used in the calculation of the RHS
    const array_1d<double,dim> fgauss = prod(trans(f), N);
    const array_1d<double,dim> vgauss = prod(trans(v), N);
    const array_1d<double,dim> grad_p = prod(trans(DN), p);
    const double pgauss = inner_prod(N,p);

    array_1d<double,dim> acch = bdf0*vgauss;
    noalias(acch) += bdf1*prod(trans(vn), N);
    noalias(acch) += bdf2*prod(trans(vnn), N);

    const double crhs0 =             acch[0]*rho - fgauss[0];
    const double crhs1 =             acch[1]*rho - fgauss[1];
    const double crhs2 =             acch[2]*rho - fgauss[2];
    const double crhs3 =             rho*tau1*(crhs0 + grad_p[0]);
    const double crhs4 =             rho*tau1*(crhs1 + grad_p[1]);
    const double crhs5 =             rho*tau1*(crhs2 + grad_p[2]);
    const double crhs6 =             DN(0,0)*v(0,0) + DN(0,1)*v(0,1) + DN(0,2)*v(0,2) + DN(1,0)*v(1,0) + DN(1,1)*v(1,1) + DN(1,2)*v(1,2) + DN(2,0)*v(2,0) + DN(2,1)*v(2,1) + DN(2,2)*v(2,2) + DN(3,0)*v(3,0) + DN(3,1)*v(3,1) + DN(3,2)*v(3,2);
    rhs[0]=DN(0,0)*pgauss - DN(0,0)*stress[0] - DN(0,1)*stress[3] - DN(0,2)*stress[5] - N[0]*crhs0;
    rhs[1]=-DN(0,0)*stress[3] + DN(0,1)*pgauss - DN(0,1)*stress[1] - DN(0,2)*stress[4] - N[0]*crhs1;
    rhs[2]=-DN(0,0)*stress[5] - DN(0,1)*stress[4] + DN(0,2)*pgauss - DN(0,2)*stress[2] - N[0]*crhs2;
    rhs[3]=-DN(0,0)*crhs3 - DN(0,1)*crhs4 - DN(0,2)*crhs5 - N[0]*crhs6;
    rhs[4]=DN(1,0)*pgauss - DN(1,0)*stress[0] - DN(1,1)*stress[3] - DN(1,2)*stress[5] - N[1]*crhs0;
    rhs[5]=-DN(1,0)*stress[3] + DN(1,1)*pgauss - DN(1,1)*stress[1] - DN(1,2)*stress[4] - N[1]*crhs1;
    rhs[6]=-DN(1,0)*stress[5] - DN(1,1)*stress[4] + DN(1,2)*pgauss - DN(1,2)*stress[2] - N[1]*crhs2;
    rhs[7]=-DN(1,0)*crhs3 - DN(1,1)*crhs4 - DN(1,2)*crhs5 - N[1]*crhs6;
    rhs[8]=DN(2,0)*pgauss - DN(2,0)*stress[0] - DN(2,1)*stress[3] - DN(2,2)*stress[5] - N[2]*crhs0;
    rhs[9]=-DN(2,0)*stress[3] + DN(2,1)*pgauss - DN(2,1)*stress[1] - DN(2,2)*stress[4] - N[2]*crhs1;
    rhs[10]=-DN(2,0)*stress[5] - DN(2,1)*stress[4] + DN(2,2)*pgauss - DN(2,2)*stress[2] - N[2]*crhs2;
    rhs[11]=-DN(2,0)*crhs3 - DN(2,1)*crhs4 - DN(2,2)*crhs5 - N[2]*crhs6;
    rhs[12]=DN(3,0)*pgauss - DN(3,0)*stress[0] - DN(3,1)*stress[3] - DN(3,2)*stress[5] - N[3]*crhs0;
    rhs[13]=-DN(3,0)*stress[3] + DN(3,1)*pgauss - DN(3,1)*stress[1] - DN(3,2)*stress[4] - N[3]*crhs1;
    rhs[14]=-DN(3,0)*stress[5] - DN(3,1)*stress[4] + DN(3,2)*pgauss - DN(3,2)*stress[2] - N[3]*crhs2;
    rhs[15]=-DN(3,0)*crhs3 - DN(3,1)*crhs4 - DN(3,2)*crhs5 - N[3]*crhs6;

}


void Stokes3DTwoFluid::ComputeGaussPointEnrichmentContributions(
    boost::numeric::ublas::bounded_matrix<double,4,16>& H,
    boost::numeric::ublas::bounded_matrix<double,16,4>& V,
    boost::numeric::ublas::bounded_matrix<double,4,4>&  Kee,
    array_1d<double,4>& rhs_ee,
    const element_data<4,3>& data,
    const array_1d<double,4>& distances,
    const array_1d<double,4>& Nenr,
    const boost::numeric::ublas::bounded_matrix<double,4,4>& DNenr
)
{
    const int nnodes = 4;
    const int dim = 3;

    const double rho = inner_prod(data.N, data.rho);
    const double& bdf0 = data.bdf0;
    const double& bdf1 = data.bdf1;
    const double& bdf2 = data.bdf2;

    const bounded_matrix<double,nnodes,dim>& v = data.v;
    const bounded_matrix<double,nnodes,dim>& vn = data.vn;
    const bounded_matrix<double,nnodes,dim>& vnn = data.vnn;
    const bounded_matrix<double,nnodes,dim>& f = data.f;
    const array_1d<double,nnodes>& p = data.p;

    //get constitutive matrix
    const Matrix& C = data.C;
//         const Vector& stress = data.stress;

    //get shape function values
    const bounded_matrix<double,nnodes,dim>& DN = data.DN_DX;
    const array_1d<double,nnodes>& N = data.N;

    //compute an equivalent tau by Bitrans*c*Bi
    const double tau_denom =             (C(3,3) + C(4,4) + C(5,5))*(pow(DN(0,0), 2) + pow(DN(0,1), 2) + pow(DN(0,2), 2) + pow(DN(1,0), 2) + pow(DN(1,1), 2) + pow(DN(1,2), 2) + pow(DN(2,0), 2) + pow(DN(2,1), 2) + pow(DN(2,2), 2) + pow(DN(3,0), 2) + pow(DN(3,1), 2) + pow(DN(3,2), 2));

    const double tau1 = 1.0/(tau_denom);

    //auxiliary variables used in the calculation of the RHS
    const array_1d<double,dim> fgauss = prod(trans(f), N);
    const array_1d<double,dim> vgauss = prod(trans(v), N);
    const array_1d<double,dim> grad_p = prod(trans(DN), p);
//         const double pgauss = inner_prod(N,p);

    array_1d<double,dim> acch = bdf0*vgauss;
    noalias(acch) += bdf1*prod(trans(vn), N);
    noalias(acch) += bdf2*prod(trans(vnn), N);

    array_1d<double,4> penr = ZeroVector(4); //penriched is considered to be zero as we do not want to store it

    const double cV0 =             rho*tau1;
    V(0,0)=-DN(0,0)*Nenr[0];
    V(0,1)=-DN(0,0)*Nenr[1];
    V(0,2)=-DN(0,0)*Nenr[2];
    V(0,3)=-DN(0,0)*Nenr[3];
    V(1,0)=-DN(0,1)*Nenr[0];
    V(1,1)=-DN(0,1)*Nenr[1];
    V(1,2)=-DN(0,1)*Nenr[2];
    V(1,3)=-DN(0,1)*Nenr[3];
    V(2,0)=-DN(0,2)*Nenr[0];
    V(2,1)=-DN(0,2)*Nenr[1];
    V(2,2)=-DN(0,2)*Nenr[2];
    V(2,3)=-DN(0,2)*Nenr[3];
    V(3,0)=cV0*(DN(0,0)*DNenr(0,0) + DN(0,1)*DNenr(0,1) + DN(0,2)*DNenr(0,2));
    V(3,1)=cV0*(DN(0,0)*DNenr(1,0) + DN(0,1)*DNenr(1,1) + DN(0,2)*DNenr(1,2));
    V(3,2)=cV0*(DN(0,0)*DNenr(2,0) + DN(0,1)*DNenr(2,1) + DN(0,2)*DNenr(2,2));
    V(3,3)=cV0*(DN(0,0)*DNenr(3,0) + DN(0,1)*DNenr(3,1) + DN(0,2)*DNenr(3,2));
    V(4,0)=-DN(1,0)*Nenr[0];
    V(4,1)=-DN(1,0)*Nenr[1];
    V(4,2)=-DN(1,0)*Nenr[2];
    V(4,3)=-DN(1,0)*Nenr[3];
    V(5,0)=-DN(1,1)*Nenr[0];
    V(5,1)=-DN(1,1)*Nenr[1];
    V(5,2)=-DN(1,1)*Nenr[2];
    V(5,3)=-DN(1,1)*Nenr[3];
    V(6,0)=-DN(1,2)*Nenr[0];
    V(6,1)=-DN(1,2)*Nenr[1];
    V(6,2)=-DN(1,2)*Nenr[2];
    V(6,3)=-DN(1,2)*Nenr[3];
    V(7,0)=cV0*(DN(1,0)*DNenr(0,0) + DN(1,1)*DNenr(0,1) + DN(1,2)*DNenr(0,2));
    V(7,1)=cV0*(DN(1,0)*DNenr(1,0) + DN(1,1)*DNenr(1,1) + DN(1,2)*DNenr(1,2));
    V(7,2)=cV0*(DN(1,0)*DNenr(2,0) + DN(1,1)*DNenr(2,1) + DN(1,2)*DNenr(2,2));
    V(7,3)=cV0*(DN(1,0)*DNenr(3,0) + DN(1,1)*DNenr(3,1) + DN(1,2)*DNenr(3,2));
    V(8,0)=-DN(2,0)*Nenr[0];
    V(8,1)=-DN(2,0)*Nenr[1];
    V(8,2)=-DN(2,0)*Nenr[2];
    V(8,3)=-DN(2,0)*Nenr[3];
    V(9,0)=-DN(2,1)*Nenr[0];
    V(9,1)=-DN(2,1)*Nenr[1];
    V(9,2)=-DN(2,1)*Nenr[2];
    V(9,3)=-DN(2,1)*Nenr[3];
    V(10,0)=-DN(2,2)*Nenr[0];
    V(10,1)=-DN(2,2)*Nenr[1];
    V(10,2)=-DN(2,2)*Nenr[2];
    V(10,3)=-DN(2,2)*Nenr[3];
    V(11,0)=cV0*(DN(2,0)*DNenr(0,0) + DN(2,1)*DNenr(0,1) + DN(2,2)*DNenr(0,2));
    V(11,1)=cV0*(DN(2,0)*DNenr(1,0) + DN(2,1)*DNenr(1,1) + DN(2,2)*DNenr(1,2));
    V(11,2)=cV0*(DN(2,0)*DNenr(2,0) + DN(2,1)*DNenr(2,1) + DN(2,2)*DNenr(2,2));
    V(11,3)=cV0*(DN(2,0)*DNenr(3,0) + DN(2,1)*DNenr(3,1) + DN(2,2)*DNenr(3,2));
    V(12,0)=-DN(3,0)*Nenr[0];
    V(12,1)=-DN(3,0)*Nenr[1];
    V(12,2)=-DN(3,0)*Nenr[2];
    V(12,3)=-DN(3,0)*Nenr[3];
    V(13,0)=-DN(3,1)*Nenr[0];
    V(13,1)=-DN(3,1)*Nenr[1];
    V(13,2)=-DN(3,1)*Nenr[2];
    V(13,3)=-DN(3,1)*Nenr[3];
    V(14,0)=-DN(3,2)*Nenr[0];
    V(14,1)=-DN(3,2)*Nenr[1];
    V(14,2)=-DN(3,2)*Nenr[2];
    V(14,3)=-DN(3,2)*Nenr[3];
    V(15,0)=cV0*(DN(3,0)*DNenr(0,0) + DN(3,1)*DNenr(0,1) + DN(3,2)*DNenr(0,2));
    V(15,1)=cV0*(DN(3,0)*DNenr(1,0) + DN(3,1)*DNenr(1,1) + DN(3,2)*DNenr(1,2));
    V(15,2)=cV0*(DN(3,0)*DNenr(2,0) + DN(3,1)*DNenr(2,1) + DN(3,2)*DNenr(2,2));
    V(15,3)=cV0*(DN(3,0)*DNenr(3,0) + DN(3,1)*DNenr(3,1) + DN(3,2)*DNenr(3,2));


    const double cH0 =             pow(rho, 2);
    const double cH1 =             DNenr(0,0)*bdf0*cH0*tau1;
    const double cH2 =             DNenr(0,1)*bdf0*cH0*tau1;
    const double cH3 =             DNenr(0,2)*bdf0*cH0*tau1;
    const double cH4 =             rho*tau1;
    const double cH5 =             DNenr(1,0)*bdf0*cH0*tau1;
    const double cH6 =             DNenr(1,1)*bdf0*cH0*tau1;
    const double cH7 =             DNenr(1,2)*bdf0*cH0*tau1;
    const double cH8 =             DNenr(2,0)*bdf0*cH0*tau1;
    const double cH9 =             DNenr(2,1)*bdf0*cH0*tau1;
    const double cH10 =             DNenr(2,2)*bdf0*cH0*tau1;
    const double cH11 =             DNenr(3,0)*bdf0*cH0*tau1;
    const double cH12 =             DNenr(3,1)*bdf0*cH0*tau1;
    const double cH13 =             DNenr(3,2)*bdf0*cH0*tau1;
    H(0,0)=N[0]*cH1;
    H(0,1)=N[0]*cH2;
    H(0,2)=N[0]*cH3;
    H(0,3)=cH4*(DN(0,0)*DNenr(0,0) + DN(0,1)*DNenr(0,1) + DN(0,2)*DNenr(0,2));
    H(0,4)=N[1]*cH1;
    H(0,5)=N[1]*cH2;
    H(0,6)=N[1]*cH3;
    H(0,7)=cH4*(DN(1,0)*DNenr(0,0) + DN(1,1)*DNenr(0,1) + DN(1,2)*DNenr(0,2));
    H(0,8)=N[2]*cH1;
    H(0,9)=N[2]*cH2;
    H(0,10)=N[2]*cH3;
    H(0,11)=cH4*(DN(2,0)*DNenr(0,0) + DN(2,1)*DNenr(0,1) + DN(2,2)*DNenr(0,2));
    H(0,12)=N[3]*cH1;
    H(0,13)=N[3]*cH2;
    H(0,14)=N[3]*cH3;
    H(0,15)=cH4*(DN(3,0)*DNenr(0,0) + DN(3,1)*DNenr(0,1) + DN(3,2)*DNenr(0,2));
    H(1,0)=N[0]*cH5;
    H(1,1)=N[0]*cH6;
    H(1,2)=N[0]*cH7;
    H(1,3)=cH4*(DN(0,0)*DNenr(1,0) + DN(0,1)*DNenr(1,1) + DN(0,2)*DNenr(1,2));
    H(1,4)=N[1]*cH5;
    H(1,5)=N[1]*cH6;
    H(1,6)=N[1]*cH7;
    H(1,7)=cH4*(DN(1,0)*DNenr(1,0) + DN(1,1)*DNenr(1,1) + DN(1,2)*DNenr(1,2));
    H(1,8)=N[2]*cH5;
    H(1,9)=N[2]*cH6;
    H(1,10)=N[2]*cH7;
    H(1,11)=cH4*(DN(2,0)*DNenr(1,0) + DN(2,1)*DNenr(1,1) + DN(2,2)*DNenr(1,2));
    H(1,12)=N[3]*cH5;
    H(1,13)=N[3]*cH6;
    H(1,14)=N[3]*cH7;
    H(1,15)=cH4*(DN(3,0)*DNenr(1,0) + DN(3,1)*DNenr(1,1) + DN(3,2)*DNenr(1,2));
    H(2,0)=N[0]*cH8;
    H(2,1)=N[0]*cH9;
    H(2,2)=N[0]*cH10;
    H(2,3)=cH4*(DN(0,0)*DNenr(2,0) + DN(0,1)*DNenr(2,1) + DN(0,2)*DNenr(2,2));
    H(2,4)=N[1]*cH8;
    H(2,5)=N[1]*cH9;
    H(2,6)=N[1]*cH10;
    H(2,7)=cH4*(DN(1,0)*DNenr(2,0) + DN(1,1)*DNenr(2,1) + DN(1,2)*DNenr(2,2));
    H(2,8)=N[2]*cH8;
    H(2,9)=N[2]*cH9;
    H(2,10)=N[2]*cH10;
    H(2,11)=cH4*(DN(2,0)*DNenr(2,0) + DN(2,1)*DNenr(2,1) + DN(2,2)*DNenr(2,2));
    H(2,12)=N[3]*cH8;
    H(2,13)=N[3]*cH9;
    H(2,14)=N[3]*cH10;
    H(2,15)=cH4*(DN(3,0)*DNenr(2,0) + DN(3,1)*DNenr(2,1) + DN(3,2)*DNenr(2,2));
    H(3,0)=N[0]*cH11;
    H(3,1)=N[0]*cH12;
    H(3,2)=N[0]*cH13;
    H(3,3)=cH4*(DN(0,0)*DNenr(3,0) + DN(0,1)*DNenr(3,1) + DN(0,2)*DNenr(3,2));
    H(3,4)=N[1]*cH11;
    H(3,5)=N[1]*cH12;
    H(3,6)=N[1]*cH13;
    H(3,7)=cH4*(DN(1,0)*DNenr(3,0) + DN(1,1)*DNenr(3,1) + DN(1,2)*DNenr(3,2));
    H(3,8)=N[2]*cH11;
    H(3,9)=N[2]*cH12;
    H(3,10)=N[2]*cH13;
    H(3,11)=cH4*(DN(2,0)*DNenr(3,0) + DN(2,1)*DNenr(3,1) + DN(2,2)*DNenr(3,2));
    H(3,12)=N[3]*cH11;
    H(3,13)=N[3]*cH12;
    H(3,14)=N[3]*cH13;
    H(3,15)=cH4*(DN(3,0)*DNenr(3,0) + DN(3,1)*DNenr(3,1) + DN(3,2)*DNenr(3,2));


    const double cKee0 =             rho*tau1;
    const double cKee1 =             cKee0*(DNenr(0,0)*DNenr(1,0) + DNenr(0,1)*DNenr(1,1) + DNenr(0,2)*DNenr(1,2));
    const double cKee2 =             cKee0*(DNenr(0,0)*DNenr(2,0) + DNenr(0,1)*DNenr(2,1) + DNenr(0,2)*DNenr(2,2));
    const double cKee3 =             cKee0*(DNenr(0,0)*DNenr(3,0) + DNenr(0,1)*DNenr(3,1) + DNenr(0,2)*DNenr(3,2));
    const double cKee4 =             cKee0*(DNenr(1,0)*DNenr(2,0) + DNenr(1,1)*DNenr(2,1) + DNenr(1,2)*DNenr(2,2));
    const double cKee5 =             cKee0*(DNenr(1,0)*DNenr(3,0) + DNenr(1,1)*DNenr(3,1) + DNenr(1,2)*DNenr(3,2));
    const double cKee6 =             cKee0*(DNenr(2,0)*DNenr(3,0) + DNenr(2,1)*DNenr(3,1) + DNenr(2,2)*DNenr(3,2));
    Kee(0,0)=cKee0*(pow(DNenr(0,0), 2) + pow(DNenr(0,1), 2) + pow(DNenr(0,2), 2));
    Kee(0,1)=cKee1;
    Kee(0,2)=cKee2;
    Kee(0,3)=cKee3;
    Kee(1,0)=cKee1;
    Kee(1,1)=cKee0*(pow(DNenr(1,0), 2) + pow(DNenr(1,1), 2) + pow(DNenr(1,2), 2));
    Kee(1,2)=cKee4;
    Kee(1,3)=cKee5;
    Kee(2,0)=cKee2;
    Kee(2,1)=cKee4;
    Kee(2,2)=cKee0*(pow(DNenr(2,0), 2) + pow(DNenr(2,1), 2) + pow(DNenr(2,2), 2));
    Kee(2,3)=cKee6;
    Kee(3,0)=cKee3;
    Kee(3,1)=cKee5;
    Kee(3,2)=cKee6;
    Kee(3,3)=cKee0*(pow(DNenr(3,0), 2) + pow(DNenr(3,1), 2) + pow(DNenr(3,2), 2));


    const double crhs_ee0 =             rho*tau1;
    const double crhs_ee1 =             DN(0,0)*p[0] + DN(1,0)*p[1] + DN(2,0)*p[2] + DN(3,0)*p[3] + DNenr(0,0)*penr[0] + DNenr(1,0)*penr[1] + DNenr(2,0)*penr[2] + DNenr(3,0)*penr[3] - N[0]*f(0,0) - N[1]*f(1,0) - N[2]*f(2,0) - N[3]*f(3,0) + rho*(N[0]*(bdf0*v(0,0) + bdf1*vn(0,0) + bdf2*vnn(0,0)) + N[1]*(bdf0*v(1,0) + bdf1*vn(1,0) + bdf2*vnn(1,0)) + N[2]*(bdf0*v(2,0) + bdf1*vn(2,0) + bdf2*vnn(2,0)) + N[3]*(bdf0*v(3,0) + bdf1*vn(3,0) + bdf2*vnn(3,0)));
    const double crhs_ee2 =             DN(0,1)*p[0] + DN(1,1)*p[1] + DN(2,1)*p[2] + DN(3,1)*p[3] + DNenr(0,1)*penr[0] + DNenr(1,1)*penr[1] + DNenr(2,1)*penr[2] + DNenr(3,1)*penr[3] - N[0]*f(0,1) - N[1]*f(1,1) - N[2]*f(2,1) - N[3]*f(3,1) + rho*(N[0]*(bdf0*v(0,1) + bdf1*vn(0,1) + bdf2*vnn(0,1)) + N[1]*(bdf0*v(1,1) + bdf1*vn(1,1) + bdf2*vnn(1,1)) + N[2]*(bdf0*v(2,1) + bdf1*vn(2,1) + bdf2*vnn(2,1)) + N[3]*(bdf0*v(3,1) + bdf1*vn(3,1) + bdf2*vnn(3,1)));
    const double crhs_ee3 =             DN(0,2)*p[0] + DN(1,2)*p[1] + DN(2,2)*p[2] + DN(3,2)*p[3] + DNenr(0,2)*penr[0] + DNenr(1,2)*penr[1] + DNenr(2,2)*penr[2] + DNenr(3,2)*penr[3] - N[0]*f(0,2) - N[1]*f(1,2) - N[2]*f(2,2) - N[3]*f(3,2) + rho*(N[0]*(bdf0*v(0,2) + bdf1*vn(0,2) + bdf2*vnn(0,2)) + N[1]*(bdf0*v(1,2) + bdf1*vn(1,2) + bdf2*vnn(1,2)) + N[2]*(bdf0*v(2,2) + bdf1*vn(2,2) + bdf2*vnn(2,2)) + N[3]*(bdf0*v(3,2) + bdf1*vn(3,2) + bdf2*vnn(3,2)));
    rhs_ee[0]=-crhs_ee0*(DNenr(0,0)*crhs_ee1 + DNenr(0,1)*crhs_ee2 + DNenr(0,2)*crhs_ee3);
    rhs_ee[1]=-crhs_ee0*(DNenr(1,0)*crhs_ee1 + DNenr(1,1)*crhs_ee2 + DNenr(1,2)*crhs_ee3);
    rhs_ee[2]=-crhs_ee0*(DNenr(2,0)*crhs_ee1 + DNenr(2,1)*crhs_ee2 + DNenr(2,2)*crhs_ee3);
    rhs_ee[3]=-crhs_ee0*(DNenr(3,0)*crhs_ee1 + DNenr(3,1)*crhs_ee2 + DNenr(3,2)*crhs_ee3);



}

}

