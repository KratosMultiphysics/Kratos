#import the configuration data as read from the GiD
import DEM_FEM_Application_var

##################################################################
##################################################################
#setting the domain size for the problem to be solved
domain_size = DEM_FEM_Application_var.domain_size

##################################################################
##################################################################
## ATTENTION: here the order is important

#including kratos path

#from KratosMultiphysics import *
#from KratosMultiphysics.DEM_FEM_Application import *


kratos_libs_path            = DEM_FEM_Application_var.kratos_path + '/libs' ##kratos_root/libs
kratos_applications_path    = DEM_FEM_Application_var.kratos_path + '/applications' ##kratos_root/applications
import sys
sys.path.append(kratos_libs_path)
sys.path.append(kratos_applications_path)

#importing Kratos main library
from Kratos import *
kernel = Kernel()   #defining kernel

#importing applications
import applications_interface
applications_interface.Import_DEM_FEM_Application = True
applications_interface.ImportApplications(kernel, kratos_applications_path)
from KratosDEM_FEM_Application import *

## from now on the order is not anymore crucial
##################################################################
##################################################################

#defining a model part
model_part = ModelPart("DEM_FEM_Part");  
model_part.AddNodalSolutionStepVariable(FORCE);


#adding of Variables to Model Part should be here when the "very fix container will be ready"
import DEM_FEM_Explicit_Solve_Strategy
DEM_FEM_Explicit_Solve_Strategy.AddVariables(model_part)
 


#reading a model
name = DEM_FEM_Application_var.problem_name

gid_mode = GiDPostMode.GiD_PostBinary
multifile = MultiFileFlag.MultipleFiles
deformed_mesh_flag = WriteDeformedMeshFlag.WriteUndeformed
write_conditions = WriteConditionsFlag.WriteElementsOnly
gid_io = GidIO(name,gid_mode,multifile,deformed_mesh_flag, write_conditions)
model_part_io = ModelPartIO(name)
model_part_io.ReadModelPart(model_part)

mesh_name = 0.0
gid_io.InitializeMesh( mesh_name );
gid_io.WriteMesh((model_part).GetMesh());
gid_io.FinalizeMesh()

print model_part
print model_part.Properties

#the buffer size should be set up here after the mesh is read for the first time
model_part.SetBufferSize(2)


#importing the solver files
DEM_FEM_Explicit_Solve_Strategy.AddDofs(model_part)
solver = DEM_FEM_Explicit_Solve_Strategy.DynamicStructuralSolver(model_part,domain_size)

##choosing the default value for the constitutive law 
if(DEM_FEM_Application_var.ConstitutiveLaw == "LinearElastic"):
    if(domain_size == 2):
        for prop in model_part.Properties:
            prop.SetValue(CONSTITUTIVE_LAW, Isotropic2D() )
    else:
        for prop in model_part.Properties:
            prop.SetValue(CONSTITUTIVE_LAW, Isotropic3D() )
elif(DEM_FEM_Application_var.ConstitutiveLaw == "DruckerPrager"):    
    if(domain_size == 3):
        for prop in model_part.Properties:
            prop.SetValue(CONSTITUTIVE_LAW, DruckerPrager())
    else:
        print "Error!!!!!DruckerPrager Constitutive Law only suitable for 3D Mesh"


####choosing the liear_solver
solver.structure_linear_solver  =  SkylineLUFactorizationSolver()


####initial the solver parameter
solver.damping_ratio            = DEM_FEM_Application_var.DampRatio
solver.max_delta_time           = DEM_FEM_Application_var.Time_Step
solver.ConvUnbalForceRatio      = DEM_FEM_Application_var.ConvUnBalForceRatio
solver.contact_stiffness_ratio  = DEM_FEM_Application_var.ContactStiffRatio

if(DEM_FEM_Application_var.MassType == "VirtualMass"):
    solver.virtual_mass = True
else:
    solver.virtual_mass = False

if(DEM_FEM_Application_var.DampType == "LocalDamp"):
    solver.damp_type = 1
else:
    solver.damp_type = 2

if(DEM_FEM_Application_var.MassType == "True"):
    solver.ComputeFemFemContact = True
else:
    solver.ComputeFemFemContact = False

## Creat the expicit object
solver.Initialize()

(solver.solver).SetEchoLevel(2);

gid_io.InitializeResults(mesh_name,(model_part).GetMesh())


Nsteps         = DEM_FEM_Application_var.TotalSteps
OutputInterval =  DEM_FEM_Application_var.OutputInterval

for step in range(1,Nsteps):
    model_part.ProcessInfo[TIME_STEPS] = step
    #solving the fluid problem
    if(step > 0):
        solver.Solve()
        time = model_part.ProcessInfo[TIME]
        if(step % OutputInterval == 0):
	    gid_io.WriteNodalResults(DISPLACEMENT,model_part.Nodes,time,0)
	    gid_io.WriteNodalResults(FORCE,model_part.Nodes,time,0)
	    gid_io.WriteNodalResults(REACTION,model_part.Nodes,time,0)
	    gid_io.WriteNodalResults(VELOCITY,model_part.Nodes,time,0)
	    gid_io.WriteNodalResults(ACCELERATION,model_part.Nodes,time,0)

print "Analysis Completed "

gid_io.FinalizeResults()

          
        

