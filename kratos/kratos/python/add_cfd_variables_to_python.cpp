// Kratos Multi-Physics
//
// Copyright (c) 2016, Pooyan Dadvand, Riccardo Rossi, CIMNE (International Center for Numerical Methods in Engineering)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
// 	-	Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// 	-	Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer
// 		in the documentation and/or other materials provided with the distribution.
// 	-	All advertising materials mentioning features or use of this software must display the following acknowledgement:
// 			This product includes Kratos Multi-Physics technology.
// 	-	Neither the name of the CIMNE nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDERS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED ANDON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
// THE USE OF THISSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


// System includes

// External includes
#include <boost/python.hpp>


// Project includes
#include "includes/define.h"
#include "includes/ublas_interface.h"
#include "containers/data_value_container.h"
#include "containers/flags.h"
#include "includes/cfd_variables.h"
#include "python/add_cfd_variables_to_python.h"



#ifdef KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_FLAG_IMPLEMENTATION
#undef KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_FLAG_IMPLEMENTATION
#endif
#define KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_FLAG_IMPLEMENTATION(flag) \
 scope().attr(#flag) = boost::ref(flag)      \

#ifdef KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_FLAG
#undef KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_FLAG
#endif
#define KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_FLAG(flag) \
    KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_FLAG_IMPLEMENTATION(flag);   \
    KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_FLAG_IMPLEMENTATION(NOT_##flag)

#ifdef KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE
#undef KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE
#endif
#define KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE(variable) \
    scope().attr(#variable) = boost::ref(variable);


#ifdef KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_3D_VARIABLE_WITH_COMPONENTS
#undef KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_3D_VARIABLE_WITH_COMPONENTS
#endif
#define KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_3D_VARIABLE_WITH_COMPONENTS(name) \
    KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE(name) \
    KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE(name##_X) \
    KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE(name##_Y) \
    KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE(name##_Z)

namespace Kratos
{
//KRATOS_CREATE_FLAG(STRUCTURE,   63);

namespace Python
{
using namespace boost::python;

void  AddCFDVariablesToPython()
{

    // Useful variables
//     KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_3D_VARIABLE_WITH_COMPONENTS( ADVPROJ );
//     KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE( DIVPROJ );
//     KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE( C_SMAGORINSKY );
//     KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE( MOLECULAR_VISCOSITY );
//     KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE( TURBULENT_VISCOSITY );
//     KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE( Y_WALL);
// 
//     // Legacy variables
//     KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE( DYNAMIC_TAU );
//     KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE( M );
    
        KRATOS_REGISTER_IN_PYTHON_3D_VARIABLE_WITH_COMPONENTS( ADVPROJ );
    KRATOS_REGISTER_IN_PYTHON_3D_VARIABLE_WITH_COMPONENTS( CONV_PROJ );
    KRATOS_REGISTER_IN_PYTHON_3D_VARIABLE_WITH_COMPONENTS( PRESS_PROJ );
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( DIVPROJ );
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( PRESSURE_OLD_IT );
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( C_SMAGORINSKY );
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( MOLECULAR_VISCOSITY );
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( TURBULENT_VISCOSITY );
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( Y_WALL);
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( OSS_SWITCH );

    // Legacy variables
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( DYNAMIC_TAU );
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( DYNAMIC_VISCOSITY);
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( EFFECTIVE_VISCOSITY );
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( KINEMATIC_VISCOSITY);
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( THAWONE );
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( THAWTWO );
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( M );
    
    KRATOS_REGISTER_IN_PYTHON_VARIABLE( CROSS_WIND_STABILIZATION_FACTOR );


}
}  // namespace Python.
} // Namespace Kratos

#undef KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_FLAG
#undef KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_VARIABLE
#undef KRATOS_REGISTER_IN_PYTHON_IN_PYTHON_3D_VARIABLE_WITH_COMPONENTS
