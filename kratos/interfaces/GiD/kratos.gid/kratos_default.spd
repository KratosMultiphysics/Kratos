<?xml version="1.0" encoding="utf-8"?><!-- -*- coding: utf-8; mode: SGML -*- -->
<Kratos_data show_menubutton_about="0" version='5.0.1'> 
  <groups/>
  <units>
  </units>
  <!-- Fill this fields to automatically active an App without the init window -->
  <hiddenfield n="activeapp" active="0" v="" state="disabled"/>
  <value n="nDim" pn="Dimension" un="nDim" v="undefined" state="disabled" values="undefined,2D,2Da,3D" dict="undefined,Undefined,2D,2D,2Da,2D axisymmetric,3D,3D"/>
  
  <appLink n="Structural"		public="1" pn="Structural" active="0" appid="Structural" prefix="ST"/>
  <appLink n="Solid" 			public="1" pn="Solid" active="0" appid="Solid" prefix="SL"/>
  <appLink n="Fluid" 			public="1" pn="Fluid" active="0" appid="Fluid" prefix="FL"/>
  <appLink n="EmbeddedFluid" 	public="0" pn="Embedded fluid" active="0" appid="EmbeddedFluid" prefix="FL"/>
  <appLink n="FSI" 				public="1" pn="FSI" active="0" appid="FSI" prefix="FSI"/>
  <appLink n="Pfem" 			public="1" pn="Pfem" active="0" appid="Pfem" prefix="PFEM_"/>
  <appLink n="StenosisWizard" 	public="1" pn="Stenosis Wizard" active="0" appid="StenosisWizard" prefix="StenosisWizard"/>
  <appLink n="Dam" 				public="1" pn="Dam" active="0" appid="Dam" prefix="Dam"/>
  
  <blockdata n="units" pn="Units" icon="units" open_window="0">
    <value n='units_mesh' pn='Mesh units' unit_mesh_definition="1"/>
    <value n='units_system' pn='Units system' units_system_definition="1">
      <dependencies node="//*[@unit_definition or @unit_mesh_definition='1']" att1='change_units_system' v1='{@v}'/> 
    </value>      
    <container n="basic_units" pn="Basic units" icon="units" help="Basic units to be used in the analysis." open_window="0">
      <value n='units_length' pn='Length' unit_definition="L"/>     
      <value n='units_mass' pn='Mass' unit_definition="M"/>          
    </container>
  </blockdata>     
  <procs>
	<proc n='GetElements' args='args'>
	  <![CDATA[
	  return [spdAux::ProcGetElements $domNode $args]
	  ]]>
	</proc>
	<proc n='GetElementsDict' args='args'>
	  <![CDATA[
	  return [spdAux::ProcGetElementsDict $domNode $args]
	  ]]>
	</proc>
	<proc n='GetElementsValues' args='args'>
	  <![CDATA[
	  return [spdAux::ProcGetElementsValues $domNode $args]
	  ]]>
	</proc>
	
	<proc n='GetSolutionStrategies' args='args'>
	  <![CDATA[
	  return [spdAux::ProcGetSolutionStrategies $domNode $args]
	  ]]>
	</proc>
	    <proc n='GetSchemes' args='args'>
	  <![CDATA[
		return [spdAux::ProcGetSchemes $domNode $args]
	  ]]>
	</proc>
		
	<proc n='GetConstitutiveLaws' args='args'>
	  <![CDATA[
	  return [spdAux::ProcGetConstitutiveLaws $domNode $args]
	  ]]>
	</proc>
	<proc n='GetAllConstitutiveLaws' args='args'>
	  <![CDATA[
	  return [spdAux::ProcGetAllConstitutiveLaws $domNode $args]
	  ]]>
	</proc>
		<proc n='GetSolvers' args='args'>
	  <![CDATA[
	return [spdAux::ProcGetSolvers $domNode $args]
	  ]]>
	</proc>
	  <proc n='CheckNodalConditionState' args='args'>
	  <![CDATA[
		return [spdAux::ProcCheckNodalConditionState $domNode $args]
	  ]]>
	</proc>
	  <proc n='CheckNodalConditionOutputState' args='args'>
	  <![CDATA[
		return [spdAux::ProcCheckNodalConditionOutputState $domNode $args]
	  ]]>
	</proc>
	  <proc n='RefreshTree' args='args'>
	  <![CDATA[
		spdAux::RequestRefresh
	  ]]>
	</proc>

	  <proc n='checkStateByUniqueName' args='args'>
	  <![CDATA[
		return [spdAux::ProccheckStateByUniqueName $domNode $args]
	  ]]>
	</proc>
	  	  <proc n='SolverParamState' args='args'>
	  <![CDATA[
		return [spdAux::ProcSolverParamState $domNode $args]
	  ]]>
	</proc>
	<proc n='PartParamValue' args='args'>
	  <![CDATA[
		return [spdAux::ProcPartParamValue $domNode $args]
	  ]]>
	</proc>
	  <proc n='PartParamState' args='args'>
	  <![CDATA[
		return [spdAux::ProcPartParamState $domNode $args]
	  ]]>
	</proc>
	  	  <proc n='SolverEntryState' args='args'>
	  <![CDATA[
		return [spdAux::ProcSolverEntryState $domNode $args]
	  ]]>
	</proc>
	<proc n='CheckDimension' args='args'>
	  <![CDATA[
		return [spdAux::ProcCheckDimension $domNode $args]
	  ]]>
	  
	</proc>
	<proc n='getStateFromXPathValue' args='args'>
	  <![CDATA[
	  return [spdAux::ProcgetStateFromXPathValue $domNode $args]
	  ]]>
	</proc>
    <proc n='give_materials_list' args='args'>
      <![CDATA[
	  return [spdAux::ProcGive_materials_list $domNode {*}$args]
      ]]>
    </proc>
    <proc n='edit_database_list' args='args'>
      <![CDATA[
	  return [spdAux::ProcEdit_database_list $domNode {*}$args]  
      ]]>
    </proc>
	<proc n='CambioMat' args='args'>
	  <![CDATA[
	  return [spdAux::ProcCambioMat $domNode $args] 
	  ]]>
	</proc>
	<proc n='ConditionState' args='args'>
	  <![CDATA[
		return [spdAux::ProcConditionState $domNode $args]
	  ]]>
	</proc>
	
	  <proc n='SolStratParamState' args='args'>
	  <![CDATA[
		return [spdAux::ProcSolStratParamState $domNode $args]
	  ]]>
	</proc>
	  <proc n='SchemeParamState' args='args'>
	  <![CDATA[
		return [spdAux::ProcSchemeParamState $domNode $args]
	  ]]>
	</proc>	   
	  <proc n='ConstLawOutputState' args='args'>
	  <![CDATA[
		return [spdAux::ProcConstLawOutputState $domNode $args]
	  ]]>
	</proc>
	  <proc n='ElementOutputState' args='args'>
	  <![CDATA[
		return [spdAux::ProcElementOutputState $domNode $args]
	  ]]>
	</proc>
	  
	  <proc n='ActiveIfAnyPartState' args='args'>
	  <![CDATA[
	  return [spdAux::ProcActiveIfAnyPartState $domNode $args]
	  ]]>
	</proc>
	  <proc n='ActiveIfRestartAvailable' args='args'>
	  <![CDATA[
	  return [spdAux::ProcActiveIfRestartAvailable $domNode $args]
	  ]]>
	</proc>
	  
		  <proc n='DisableIfUniqueName' args='args'>
	  <![CDATA[
		catch {[get_domnode_attribute $domNode dict]}
		return [spdAux::ProcDisableIfUniqueName $domNode $args]
	  ]]>
	</proc>
		<proc n='CheckGeometry' args='args'>
	  <![CDATA[
		return [spdAux::ProcCheckGeometry $domNode $args]
	  ]]>
	</proc>
	  <proc n='UpdateTree' args='args'>
	  <![CDATA[
	  gid_groups_conds::actualize_conditions_window
	  ]]>
	</proc>
	  <proc n='DirectorVectorNonZero' args='args'>
	  <![CDATA[
	 return [spdAux::ProcDirectorVectorNonZero $domNode $args]
	  ]]>
	</proc>
	  <proc n='ShowInMode' args='args'>
	  <![CDATA[
	  return [spdAux::ProcShowInMode $domNode $args]
	  ]]>
	</proc>
	   <proc n='UpdateDictAndReturnState' args='args'>
          <![CDATA[
				set dict [spdAux::ProcGetConstitutiveLaws $domNode]
				$domNode setAttribute dict $dict
				set values [split [get_domnode_attribute $domNode values] ","]
				set value [get_domnode_attribute $domNode v]
				if {$value ni $values} {set value [lindex $values 0]; $domNode setAttribute v $value}
				return "normal"
          ]]>
        </proc>
	   
	  <proc n='getIntervals' args='args'>
	  <![CDATA[
		return [spdAux::ProcGetIntervals $domNode $args]
	  ]]>
	</proc>
	  <proc n='getTimeFunctions' args='args'>
	  <![CDATA[
		set lista [::spdAux::getTimeFunctions]
		if {[$domNode @v] eq "" || [$domNode @v] ni $lista} {
			$domNode setAttribute v [lindex $lista 0]
		}
		set res [spdAux::ListToValues $lista]
		return $res
	  ]]>
	</proc>
	  <proc n='getFields' args='args'>
	  <![CDATA[
		set lista [::spdAux::getFields]
		if {[$domNode @v] eq "" || [$domNode @v] ni $lista} {
			$domNode setAttribute v [lindex $lista 0]
		}
		set res [spdAux::ListToValues $lista]
		return $res
	  ]]>
	</proc>
	  <proc n="loads_function_time" args="load_name">
		<![CDATA[
      return [spdAux::chk_loads_function_time $domNode $load_name]
	  ]]>
    </proc>
	  <proc n="FileDict" args="args">
		<![CDATA[
		return [spdAux::ProcFileDict $domNode $args]
	  ]]>
    </proc>
	  
    <proc n='AddFile' args='args'>
      <![CDATA[
	  if {[get_domnode_attribute $domNode v] eq "- Add new file"} {
		spdAux::AddFile $domNode
	  }
      ]]>
    </proc>
    <proc n='GetFilesValues' args='args'>
      <![CDATA[
		return [spdAux::ProcGetFilesValues]
      ]]>
    </proc>
	<dynamicnode command="injectProcs" args=""/>
  </procs>
  <container n="files" state="hidden">
  </container>
  <translations>
    <translation pn="User defined"/>
  </translations>
  <display_options frame_width="186"/>
  <blockdata n="Internal data" state="hidden">
    <value n="lognoter_file" v=""/>
  </blockdata>  
</Kratos_data>
