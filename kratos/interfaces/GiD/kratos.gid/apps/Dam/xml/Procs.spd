<?xml version="1.0" encoding="utf-8"?>
<container n="procs" pn="procs" includeContainer="No">


	  <proc n='SolStratParamState' args='args'>
	  <![CDATA[
		    
			set resp [Dam::xml::SolStratParamState $domNode]
			if {$resp} {return "normal"} else {return "hidden"}
	  ]]>
	</proc>

		 	<proc n='GetSolutionStrategies' args='args'>
	  <![CDATA[
	  
		set names ""
		set pnames ""
		set ids [list ]
		set type_of_problem [lindex $args 0]
		if {$type_of_problem eq "Mechanic"} {set n "NewtonRaphson"} {set n "Generic"}
		set Sols [::Model::GetSolutionStrategies [list n $n] ]
		foreach ss $Sols {
			lappend ids [$ss getName]
			append names [$ss getName] ","
			append pnames [$ss getName] "," [$ss getPublicName] ","
		}
		set names [string range $names 0 end-1]
		set pnames [string range $pnames 0 end-1]
		
		$domNode setAttribute dict $pnames
		if {[$domNode getAttribute v] eq ""} {$domNode setAttribute v [lindex $ids 0]}
		#spdAux::RequestRefresh
		return $names
	  
	  ]]>
	</proc>
		  			
		  <proc n='CheckNodalConditionState' args='args'>
	  <![CDATA[
	  # Overwritten the base function to add Solution Type restrictions
		set parts_un DamParts
	    if {[spdAux::getRoute $parts_un] ne ""} {
			set conditionId [$domNode @n]
			set elems [$domNode selectNodes "[spdAux::getRoute $parts_un]/group/value\[@n='Element'\]"]
			set elemnames [list ]
			foreach elem $elems { lappend elemnames [$elem @v]}
			set elemnames [lsort -unique $elemnames]
			
			set solutionType [get_domnode_attribute [$domNode selectNodes [spdAux::getRoute DamSoluType]] v]
			set TypeofProblem [get_domnode_attribute [$domNode selectNodes [spdAux::getRoute DamTypeofProblem]] v]
			set params [list analysis_type $solutionType TypeofProblem $TypeofProblem]
			if {[::Model::CheckElementsNodalCondition $conditionId $elemnames $params]} {return "normal"} else {return "hidden"}
		} {return "hidden"}
	  ]]>
	</proc>		
	 
	  
	          <proc n='CheckGeometryStructural' args='args'>
          <![CDATA[                
                if {$::Model::SpatialDimension eq "3D"} {return surface,volume} {return surface}                
          ]]>
        </proc>


	    <proc n='GetSchemes' args='args'>
	  <![CDATA[
		return [Dam::xml::ProcGetSchemes $domNode $args]
	  ]]>
	</proc>
		
			<proc n='ConditionState' args='args'>
	  <![CDATA[
	  if {[spdAux::ProcActiveIfAnyPartState $domNode $args] eq "hidden"} {return "hidden"}
		set resp [::Model::CheckConditionState $domNode]
	  if {$resp} {return "normal"} else {return "hidden"}
	  ]]>
	</proc>


</container>
